article,chunk_name,png_path,code,functions,function_labels
1-one-title-for-2-graphs,thecode-1,images/1-one-title-for-2-graphs/thecode-1.png,"#Dummy data 
Ixos <- rnorm(4000,100,30)
Primadur <- Ixos+rnorm(4000 , 0 , 30)
 
#Divide the screen in 1 line and 2 columns
par(
  mfrow=c(1,2), 
  oma = c(0, 0, 2, 0)
) 
 
#Make the margin around each graph a bit smaller
par(mar=c(4,2,2,2))
 
# Histogram and Scatterplot
hist(Ixos,  main="""" , breaks=30 , col=rgb(0.3,0.5,1,0.4) , xlab=""height"" , ylab=""nbr of plants"")
plot(Ixos , Primadur,  main="""" , pch=20 , cex=0.4 , col=rgb(0.3,0.5,1,0.4)  , xlab=""primadur"" , ylab=""Ixos"" )
 
#And I add only ONE title :
mtext(""Primadur : Distribution and correlation with Ixos"", outer = TRUE, cex = 1.5, font=4, col=rgb(0.1,0.3,0.5,0.5) )","<-,rnorm,+,par,c,hist,rgb,plot,mtext",hist
1-one-title-for-2-graphs,thecode2-1,images/1-one-title-for-2-graphs/thecode2-1.png,"# Create data
data = data.frame(
  x=seq(1:100) + 0.1*seq(1:100)*sample(c(1:10) , 100 , replace=T),
  y=seq(1:100) + 0.2*seq(1:100)*sample(c(1:10) , 100 , replace=T)
)

# Basic scatterplot
plot(data$x, data$y,
     xlim=c(0,250) , ylim=c(0,250), 
     pch=18, 
     cex=2, 
     col=""#69b3a2"",
     xlab=""value of X"", ylab=""value of Y"",
     main=""A simple scatterplot""
     )","=,data.frame,+,seq,:,*,sample,c,plot,$",
100-high-density-scatterplot-with-binning,thecode-1,images/100-high-density-scatterplot-with-binning/thecode-1.png,"# Packages
library(hexbin)
library(RColorBrewer)
 
# Create data
x <- rnorm(mean=1.5, 5000)
y <- rnorm(mean=1.6, 5000)
 
# Make the plot
bin<-hexbin(x, y, xbins=40)
my_colors=colorRampPalette(rev(brewer.pal(11,'Spectral')))
plot(bin, main="""" , colramp=my_colors , legend=F ) 
","library,<-,rnorm,hexbin,=,colorRampPalette,rev,brewer.pal,plot",hexbin
104-plot-lines-with-error-envelopes-ggplot2,thecode-1,images/104-plot-lines-with-error-envelopes-ggplot2/thecode-1.png,"library(ggplot2)
 
# Get the data from the web !
CC <- read.table(""http://www.sr.bham.ac.uk/~ajrs/papers/sanderson06/mean_Tprofile-CC.txt"" ,  header=TRUE)
nCC <- read.table(""http://www.sr.bham.ac.uk/~ajrs/papers/sanderson06/mean_Tprofile-nCC.txt"" , header=TRUE)
CC$type <- ""Cool core""
nCC$type <- ""Non-cool core""
A <- rbind(CC, nCC)
 
 
# Make the plot
ggplot(data=A, aes(x=r.r500, y=sckT, ymin=sckT.lo, ymax=sckT.up, fill=type, linetype=type)) + 
 geom_line() + 
 geom_ribbon(alpha=0.5) + 
 scale_x_log10() + 
 scale_y_log10() + 
 xlab(as.expression(expression( paste(""Radius ("", R[500], "")"") ))) + 
 ylab(""Scaled Temperature"")
","library,<-,read.table,$,rbind,+,ggplot,aes,geom_line,geom_ribbon,scale_x_log10,scale_y_log10,xlab,as.expression,expression,paste,[,ylab","geom_line,geom_ribbon"
115-study-correlations-with-a-correlogram,thecode-1,images/115-study-correlations-with-a-correlogram/thecode-1.png,"# Corrgram library
library(corrgram)

# mtcars dataset is natively available in R
# head(mtcars)

# First
corrgram(mtcars, order=TRUE, lower.panel=panel.shade, upper.panel=panel.pie, text.panel=panel.txt, main=""Car Milage Data in PC2/PC1 Order"") 

# Second
corrgram(mtcars, order=TRUE, lower.panel=panel.ellipse, upper.panel=panel.pts, text.panel=panel.txt, diag.panel=panel.minmax, main=""Car Milage Data in PC2/PC1 Order"") 

# Third
corrgram(mtcars, order=NULL, lower.panel=panel.shade, upper.panel=NULL, text.panel=panel.txt, main=""Car Milage Data (unsorted)"")","library,corrgram",corrgram
115-study-correlations-with-a-correlogram,thecode-2,images/115-study-correlations-with-a-correlogram/thecode-2.png,,,
115-study-correlations-with-a-correlogram,thecode2-1,images/115-study-correlations-with-a-correlogram/thecode2-1.png,"# Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables
library(GGally)

# Create data
data <- data.frame( var1 = 1:100 + rnorm(100,sd=20), v2 = 1:100 + rnorm(100,sd=27), v3 = rep(1, 100) + rnorm(100, sd = 1))
data$v4 = data$var1 ** 2
data$v5 = -(data$var1 ** 2)

# Check correlation between variables
#cor(data)

# Nice visualization of correlations
ggcorr(data, method = c(""everything"", ""pearson""))","library,<-,data.frame,+,:,rnorm,rep,=,$,^,-,(,ggcorr,c",ggcorr
115-study-correlations-with-a-correlogram,thecode3-1,images/115-study-correlations-with-a-correlogram/thecode3-1.png,"# Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables
library(GGally)

# From the help page:
data(flea)
ggpairs(flea, columns = 2:4, ggplot2::aes(colour=species))","library,data,ggpairs,:,aes",ggpairs
115-study-correlations-with-a-correlogram,thecode4-1,images/115-study-correlations-with-a-correlogram/thecode4-1.png,"# Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables
library(GGally)

# From the help page:
data(tips, package = ""reshape"")
ggpairs(
  tips[, c(1, 3, 4, 2)],
  upper = list(continuous = ""density"", combo = ""box_no_facet""),
  lower = list(continuous = ""points"", combo = ""dot_no_facet"")
)","library,data,ggpairs,[,c,list",ggpairs
119-add-a-legend-to-a-plot,thecode-1,images/119-add-a-legend-to-a-plot/thecode-1.png,"# Create data:
a=c(1:5)
b=c(5,3,4,5,5)
c=c(4,5,4,3,1)
 
# Make a basic graph
plot( b~a , type=""b"" , bty=""l"" , xlab=""value of a"" , ylab=""value of b"" , col=rgb(0.2,0.4,0.1,0.7) , lwd=3 , pch=17 , ylim=c(1,5) )
lines(c ~a , col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type=""b"" )
 
# Add a legend
legend(""bottomleft"", 
  legend = c(""Group 1"", ""Group 2""), 
  col = c(rgb(0.2,0.4,0.1,0.7), 
  rgb(0.8,0.4,0.1,0.7)), 
  pch = c(17,19), 
  bty = ""n"", 
  pt.cex = 2, 
  cex = 1.2, 
  text.col = ""black"", 
  horiz = F , 
  inset = c(0.1, 0.1))","=,c,:,plot,~,rgb,lines,legend",lines
120-plot-with-an-image-as-background,thecode-1,images/120-plot-with-an-image-as-background/thecode-1.png,"# If you want to show an image coming from the web, first download it with R:
download.file(""https://github.com/holtzy/R-graph-gallery/blob/master/img/logo/R_full_medium.png?raw=true"" , destfile=""tmp.png"")
#Else, just place the image in the current directory
 
# Charge the image as an R object with the ""JPEG"" package
library(jpeg)
library(png)
my_image <- readPNG(""tmp.png"")
 
# Set up a plot area with no plot
plot(1:2, type='n', main="""", xlab=""x"", ylab=""y"")
 
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(my_image, 
            xleft=1, xright=2, 
            ybottom=1.3, ytop=1.7)
grid()
 
#Add your plot !
lines(
  x=c(1, 1.2, 1.4, 1.6, 1.8, 2.0), 
  y=c(1, 1.3, 1.7, 1.6, 1.7, 1.0), 
  type=""b"", lwd=5, col=""black"")","download.file,library,<-,readPNG,plot,:,par,rasterImage,grid,lines,c","rasterImage,lines"
122-a-circular-plot-with-the-circlize-package,thecode-1,images/122-a-circular-plot-with-the-circlize-package/thecode-1.png,"### You need several libraries
library(circlize)
library(migest)
library(dplyr)
 
### Make data
m <- data.frame(order = 1:6,
            country = c(""Ausralia"", ""India"", ""China"", ""Japan"", ""Thailand"", ""Malaysia""),
            V3 = c(1, 150000, 90000, 180000, 15000, 10000),
            V4 = c(35000, 1, 10000, 12000, 25000, 8000),
            V5 = c(10000, 7000, 1, 40000, 5000, 4000),
            V6 = c(7000, 8000, 175000, 1, 11000, 18000),
            V7 = c(70000, 30000, 22000, 120000, 1, 40000),
            V8 = c(60000, 90000, 110000, 14000, 30000, 1),
            r = c(255,255,255,153,51,51),
            g = c(51, 153, 255, 255, 255, 255),
            b = c(51, 51, 51, 51, 51, 153),
            stringsAsFactors = FALSE)
df1 <- m[, c(1,2, 9:11)]
m <- m[,-(1:2)]/1e04
m <- as.matrix(m[,c(1:6)])
dimnames(m) <- list(orig = df1$country, dest = df1$country)
#Sort order of data.frame and matrix for plotting in circos
df1 <- arrange(df1, order)
df1$country <- factor(df1$country, levels = df1$country)
m <- m[levels(df1$country),levels(df1$country)]
 
 
### Define ranges of circos sectors and their colors (both of the sectors and the links)
df1$xmin <- 0
df1$xmax <- rowSums(m) + colSums(m)
n <- nrow(df1)
df1$rcol<-rgb(df1$r, df1$g, df1$b, max = 255)
df1$lcol<-rgb(df1$r, df1$g, df1$b, alpha=200, max = 255)
 
### Plot sectors (outer part)
par(mar=rep(0,4))
circos.clear()
 
### Basic circos graphic parameters
circos.par(cell.padding=c(0,0,0,0), track.margin=c(0,0.15), start.degree = 90, gap.degree =4)
 
### Sector details
circos.initialize(factors = df1$country, xlim = cbind(df1$xmin, df1$xmax))
 
### Plot sectors
circos.trackPlotRegion(ylim = c(0, 1), factors = df1$country, track.height=0.1,
                      #panel.fun for each sector
                      panel.fun = function(x, y) {
                      #select details of current sector
                      name = get.cell.meta.data(""sector.index"")
                      i = get.cell.meta.data(""sector.numeric.index"")
                      xlim = get.cell.meta.data(""xlim"")
                      ylim = get.cell.meta.data(""ylim"")
 
                      #text direction (dd) and adjusmtents (aa)
                      theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
                      dd <- ifelse(theta < 90 || theta > 270, ""clockwise"", ""reverse.clockwise"")
                      aa = c(1, 0.5)
                      if(theta < 90 || theta > 270)  aa = c(0, 0.5)
 
                      #plot country labels
                      circos.text(x=mean(xlim), y=1.7, labels=name, facing = dd, cex=0.6,  adj = aa)
 
                      #plot main sector
                      circos.rect(xleft=xlim[1], ybottom=ylim[1], xright=xlim[2], ytop=ylim[2], 
                                  col = df1$rcol[i], border=df1$rcol[i])
 
                      #blank in part of main sector
                      circos.rect(xleft=xlim[1], ybottom=ylim[1], xright=xlim[2]-rowSums(m)[i], ytop=ylim[1]+0.3, 
                                  col = ""white"", border = ""white"")
 
                      #white line all the way around
                      circos.rect(xleft=xlim[1], ybottom=0.3, xright=xlim[2], ytop=0.32, col = ""white"", border = ""white"")
 
                      #plot axis
                      circos.axis(labels.cex=0.6, direction = ""outside"", major.at=seq(from=0,to=floor(df1$xmax)[i],by=5), 
                                  minor.ticks=1, labels.away.percentage = 0.15)
                    })
 
### Plot links (inner part)
### Add sum values to df1, marking the x-position of the first links
### out (sum1) and in (sum2). Updated for further links in loop below.
df1$sum1 <- colSums(m)
df1$sum2 <- numeric(n)
 
### Create a data.frame of the flow matrix sorted by flow size, to allow largest flow plotted first
df2 <- cbind(as.data.frame(m),orig=rownames(m),  stringsAsFactors=FALSE)
df2 <- reshape(df2, idvar=""orig"", varying=list(1:n), direction=""long"",
           timevar=""dest"", time=rownames(m),  v.names = ""m"")
df2 <- arrange(df2,desc(m))
 
### Keep only the largest flows to avoid clutter
df2 <- subset(df2, m > quantile(m,0.6))
 
### Plot links
for(k in 1:nrow(df2)){
    #i,j reference of flow matrix
    i<-match(df2$orig[k],df1$country)
    j<-match(df2$dest[k],df1$country)
 
#plot link
circos.link(sector.index1=df1$country[i], point1=c(df1$sum1[i], df1$sum1[i] + abs(m[i, j])),
            sector.index2=df1$country[j], point2=c(df1$sum2[j], df1$sum2[j] + abs(m[i, j])),
            col = df1$lcol[i])
 
#update sum1 and sum2 for use when plotting the next link
df1$sum1[i] = df1$sum1[i] + abs(m[i, j])
df1$sum2[j] = df1$sum2[j] + abs(m[i, j])
}","library,<-,data.frame,:,c,[,/,-,(,as.matrix,dimnames,list,$,arrange,factor,levels,+,rowSums,colSums,nrow,rgb,par,rep,circos.clear,circos.par,circos.initialize,cbind,circos.trackPlotRegion,function,{,=,get.cell.meta.data,%%,circlize,mean,ifelse,||,<,>,if,circos.text,circos.rect,circos.axis,seq,floor,numeric,as.data.frame,rownames,reshape,desc,subset,quantile,for,match,circos.link,abs",
123-circular-plot-circlize-package-2,thecode-1,images/123-circular-plot-circlize-package-2/thecode-1.png,"# Create an adjacency matrix: 
# a list of connections between 20 origin nodes, and 5 destination nodes:
numbers <- sample(c(1:1000), 100, replace = T)
data <- matrix( numbers, ncol=5)
rownames(data) <- paste0(""orig-"", seq(1,20))
colnames(data) <- paste0(""dest-"", seq(1,5))

# Load the circlize library
library(circlize)
 
# Make the circular plot
chordDiagram(data, transparency = 0.5)","<-,sample,c,:,matrix,rownames,paste0,seq,colnames,library,chordDiagram",
123-circular-plot-circlize-package-2,thecode2-1,images/123-circular-plot-circlize-package-2/thecode2-1.png,"# Create an edge list: a list of connections between 10 origin nodes, and 10 destination nodes:
origin <- paste0(""orig "", sample(c(1:10), 20, replace = T))
destination <- paste0(""dest "", sample(c(1:10), 20, replace = T))
data <- data.frame(origin, destination)

# Transform input data in a adjacency matrix
adjacencyData <- with(data, table(origin, destination))
 
# Charge the circlize library
library(circlize)
 
# Make the circular plot
chordDiagram(adjacencyData, transparency = 0.5)","<-,paste0,sample,c,:,data.frame,with,table,library,chordDiagram",
127-r-snail,thecode-1,images/127-r-snail/thecode-1.png,"par(mfrow=c(1,1),mar=c(0,0,0,0),oma=c(1,1,1,1))
plot(0,0,type=""n"", xlim=c(-2,32), ylim=c(3,27),
    xaxs=""i"", yaxs=""i"", axes=FALSE, xlab=NA, ylab=NA,
    asp=1)

for (j in 0:35) {
for (i in 0:35) {


    R <- 8
    alpha <- j*10
    X <- 15+R*cos(alpha/180*pi)
    Y <- 15+R*sin(alpha/180*pi)

    r <- 3
    beta <- i*10
    x <- 15+r*cos(beta/180*pi)
    y <- 15+r*sin(beta/180*pi)

    d1 <- sqrt((X-x)^2+(Y-y)^2)
    xc <- x
    yc <- y

  n <- 180-atan((Y-y)/(X-x))/pi*180

    alpha2 <- -(0:n)
    theta <- alpha2/180*pi

    b <- d1/(n/180*pi)
    r <- b*theta

    x1 <- xc+r*cos(theta)
    y1 <- yc+r*sin(theta)

    lines(x1,y1, col=""black"")

    }
}","par,c,plot,-,for,:,{,<-,*,+,cos,/,sin,sqrt,^,(,atan,lines",lines
128-ring-or-donut-plot,thecode-1,images/128-ring-or-donut-plot/thecode-1.png,"# load library
library(ggplot2)
 
# Create test data.
data <- data.frame(
  category=c(""A"", ""B"", ""C""),
  count=c(10, 60, 30)
)
 
# Compute percentages
data$fraction = data$count / sum(data$count)

# Compute the cumulative percentages (top of each rectangle)
data$ymax = cumsum(data$fraction)

# Compute the bottom of each rectangle
data$ymin = c(0, head(data$ymax, n=-1))
 
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
     geom_rect() +
     coord_polar(theta=""y"") + # Try to remove that to understand how the chart is built initially
     xlim(c(2, 4)) # Try to remove that to see how to make a pie chart","library,<-,data.frame,c,=,$,/,sum,cumsum,head,-,+,ggplot,aes,geom_rect,coord_polar,xlim","geom_rect,coord_polar"
128-ring-or-donut-plot,thecode3-1,images/128-ring-or-donut-plot/thecode3-1.png,"# load library
library(ggplot2)

# Create test data.
data <- data.frame(
  category=c(""A"", ""B"", ""C""),
  count=c(10, 60, 30)
)
 
# Compute percentages
data$fraction <- data$count / sum(data$count)

# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)

# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))

# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2

# Compute a good label
data$label <- paste0(data$category, ""\n value: "", data$count)

# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
  geom_rect() +
  geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
  scale_fill_brewer(palette=4) +
  coord_polar(theta=""y"") +
  xlim(c(2, 4)) +
  theme_void() +
  theme(legend.position = ""none"")","library,<-,data.frame,c,$,/,sum,cumsum,head,-,(,+,paste0,ggplot,aes,geom_rect,geom_label,scale_fill_brewer,coord_polar,xlim,theme_void,theme","geom_rect,geom_label,coord_polar"
128-ring-or-donut-plot,thecode2-1,images/128-ring-or-donut-plot/thecode2-1.png,"# load library
library(ggplot2)

# Create test data.
data <- data.frame(
  category=c(""A"", ""B"", ""C""),
  count=c(10, 60, 30)
)
 
# Compute percentages
data$fraction <- data$count / sum(data$count)

# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)

# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))

# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2

# Compute a good label
data$label <- paste0(data$category, ""\n value: "", data$count)

# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
  geom_rect() +
  geom_text( x=2, aes(y=labelPosition, label=label, color=category), size=6) + # x here controls label position (inner / outer)
  scale_fill_brewer(palette=3) +
  scale_color_brewer(palette=3) +
  coord_polar(theta=""y"") +
  xlim(c(-1, 4)) +
  theme_void() +
  theme(legend.position = ""none"")","library,<-,data.frame,c,$,/,sum,cumsum,head,-,(,+,paste0,ggplot,aes,geom_rect,geom_text,scale_fill_brewer,scale_color_brewer,coord_polar,xlim,theme_void,theme","geom_rect,geom_text,coord_polar"
13-scatter-plot,thecode-1,images/13-scatter-plot/thecode-1.png,"# Create data
data = data.frame(
  x=seq(1:100) + 0.1*seq(1:100)*sample(c(1:10) , 100 , replace=T),
  y=seq(1:100) + 0.2*seq(1:100)*sample(c(1:10) , 100 , replace=T)
)

# Basic scatterplot
plot(x=data$x, y=data$y)","=,data.frame,+,seq,:,*,sample,c,plot,$",
13-scatter-plot,thecode2-1,images/13-scatter-plot/thecode2-1.png,"# Create data
data = data.frame(
  x=seq(1:100) + 0.1*seq(1:100)*sample(c(1:10) , 100 , replace=T),
  y=seq(1:100) + 0.2*seq(1:100)*sample(c(1:10) , 100 , replace=T)
)

# Basic scatterplot
plot(data$x, data$y,
     xlim=c(0,250) , ylim=c(0,250), 
     pch=18, 
     cex=2, 
     col=""#69b3a2"",
     xlab=""value of X"", ylab=""value of Y"",
     main=""A simple scatterplot""
     )","=,data.frame,+,seq,:,*,sample,c,plot,$",
13-scatter-plot,thecode3-1,images/13-scatter-plot/thecode3-1.png,"# the iris dataset is provided by R natively

# Create a color palette
library(paletteer)
colors <- paletteer_c(package = ""ggthemes"", palette = ""Green-Blue-White"", n = 3)

# Scatterplot with categoric color scale
plot(
  x = iris$Petal.Length, 
  y = iris$Petal.Width,
  bg = colors[ unclass(iris$Species) ],
  cex = 3,
  pch=21
)
     
    ","library,<-,paletteer_c,plot,$,[,unclass",
13-scatter-plot,thecode4-1,images/13-scatter-plot/thecode4-1.png,"# the iris dataset is provided by R natively

# Create a color palette
library(paletteer)
nColor <- 20
colors <- paletteer_c(package = ""viridis"", palette = ""inferno"", n = nColor)

# Transform the numeric variable in bins
rank <- as.factor( as.numeric( cut(iris$Petal.Width, nColor)))

# Scatterplot with color gradient
plot(
  x = iris$Petal.Length, 
  y = iris$Petal.Width,
  bg = colors[ rank ],
  cex = 3,
  pch=21
)
     
    ","library,<-,paletteer_c,as.factor,as.numeric,cut,$,plot,[",
130-ring-or-donut-chart,thecode-1,images/130-ring-or-donut-chart/thecode-1.png,"# The doughnut function permits to draw a donut plot
doughnut <-
function (x, labels = names(x), edges = 200, outer.radius = 0.8,
          inner.radius=0.6, clockwise = FALSE,
          init.angle = if (clockwise) 90 else 0, density = NULL,
          angle = 45, col = NULL, border = FALSE, lty = NULL,
          main = NULL, ...)
{
    if (!is.numeric(x) || any(is.na(x) | x < 0))
        stop(""'x' values must be positive."")
    if (is.null(labels))
        labels <- as.character(seq_along(x))
    else labels <- as.graphicsAnnot(labels)
    x <- c(0, cumsum(x)/sum(x))
    dx <- diff(x)
    nx <- length(dx)
    plot.new()
    pin <- par(""pin"")
    xlim <- ylim <- c(-1, 1)
    if (pin[1L] > pin[2L])
        xlim <- (pin[1L]/pin[2L]) * xlim
    else ylim <- (pin[2L]/pin[1L]) * ylim
    plot.window(xlim, ylim, """", asp = 1)
    if (is.null(col))
        col <- if (is.null(density))
          palette()
        else par(""fg"")
    col <- rep(col, length.out = nx)
    border <- rep(border, length.out = nx)
    lty <- rep(lty, length.out = nx)
    angle <- rep(angle, length.out = nx)
    density <- rep(density, length.out = nx)
    twopi <- if (clockwise)
        -2 * pi
    else 2 * pi
    t2xy <- function(t, radius) {
        t2p <- twopi * t + init.angle * pi/180
        list(x = radius * cos(t2p),
             y = radius * sin(t2p))
    }
    for (i in 1L:nx) {
        n <- max(2, floor(edges * dx[i]))
        P <- t2xy(seq.int(x[i], x[i + 1], length.out = n),
                  outer.radius)
        polygon(c(P$x, 0), c(P$y, 0), density = density[i],
                angle = angle[i], border = border[i],
                col = col[i], lty = lty[i])
        Pout <- t2xy(mean(x[i + 0:1]), outer.radius)
        lab <- as.character(labels[i])
        if (!is.na(lab) && nzchar(lab)) {
            lines(c(1, 1.05) * Pout$x, c(1, 1.05) * Pout$y)
            text(1.1 * Pout$x, 1.1 * Pout$y, labels[i],
                 xpd = TRUE, adj = ifelse(Pout$x < 0, 1, 0),
                 ...)
        }
        ## Add white disc          
        Pin <- t2xy(seq.int(0, 1, length.out = n*nx),
                  inner.radius)
        polygon(Pin$x, Pin$y, density = density[i],
                angle = angle[i], border = border[i],
                col = ""white"", lty = lty[i])
    }

    title(main = main, ...)
    invisible(NULL)
}


# Let's use the function, it works like PiePlot !
# inner.radius controls the width of the ring!
doughnut( c(3,5,9,12) , inner.radius=0.5, col=c(rgb(0.2,0.2,0.4,0.5), rgb(0.8,0.2,0.4,0.5), rgb(0.2,0.9,0.4,0.4) , rgb(0.0,0.9,0.8,0.4)) )
","<-,function,names,if,{,||,!,is.numeric,any,|,is.na,<,stop,is.null,as.character,seq_along,as.graphicsAnnot,c,/,cumsum,sum,diff,length,plot.new,par,-,>,[,*,(,plot.window,palette,rep,+,list,cos,sin,for,:,max,floor,t2xy,seq.int,polygon,$,mean,&&,nzchar,lines,text,ifelse,title,invisible,doughnut,rgb","polygon,lines,text,doughnut"
131-pie-plot-with-r,thecode-1,images/131-pie-plot-with-r/thecode-1.png,"# Create Data
Prop <- c(3,7,9,1,2)
 
# Make the default Pie Plot
pie(Prop)","<-,c,pie",pie
131-pie-plot-with-r,thecode2-1,images/131-pie-plot-with-r/thecode2-1.png,"# You can also custom the labels:
pie(Prop , labels = c(""Gr-A"",""Gr-B"",""Gr-C"",""Gr-D"",""Gr-E""))","pie,c",pie
131-pie-plot-with-r,thecode3-1,images/131-pie-plot-with-r/thecode3-1.png,"# If you give a low value to the ""edge"" argument, you go from something circular to a shape with edges
pie(Prop , labels = c(""Gr-A"",""Gr-B"",""Gr-C"",""Gr-D"",""Gr-E"") , edges=10)","pie,c",pie
131-pie-plot-with-r,thecode4-1,images/131-pie-plot-with-r/thecode4-1.png,"# The density arguments adds stripes. You can control the angle of this lines with ""angle""
pie(Prop , labels = c(""Gr-A"",""Gr-B"",""Gr-C"",""Gr-D"",""Gr-E"") , density=10 , angle=c(20,90,30,10,0))
","pie,c",pie
131-pie-plot-with-r,thecode5-1,images/131-pie-plot-with-r/thecode5-1.png,"# Prepare a color palette. Here with R color brewer:
library(RColorBrewer)
myPalette <- brewer.pal(5, ""Set2"") 

# You can change the border of each area with the classical parameters:
pie(Prop , labels = c(""Gr-A"",""Gr-B"",""Gr-C"",""Gr-D"",""Gr-E""), border=""white"", col=myPalette )","library,<-,brewer.pal,pie,c",pie
135-stacked-density-graph,unnamed-chunk-2-1,images/135-stacked-density-graph/unnamed-chunk-2-1.png,"p1
p2",,
135-stacked-density-graph,unnamed-chunk-3-1,images/135-stacked-density-graph/unnamed-chunk-3-1.png,"# Load dataset from github
data <- read.table(""https://raw.githubusercontent.com/zonination/perceptions/master/probly.csv"", header=TRUE, sep="","")
data <- data %>%
  gather(key=""text"", value=""value"") %>%
  mutate(text = gsub(""\\."", "" "",text)) %>%
  mutate(value = round(as.numeric(value),0))

# A dataframe for annotations
annot <- data.frame(
  text = c(""Almost No Chance"", ""About Even"", ""Probable"", ""Almost Certainly""),
  x = c(5, 53, 65, 79),
  y = c(0.15, 0.4, 0.06, 0.1)
)

# Plot
data %>%
  filter(text %in% c(""Almost No Chance"", ""About Even"", ""Probable"", ""Almost Certainly"")) %>%
  ggplot( aes(x=value, color=text, fill=text)) +
    geom_density(alpha=0.6) +
    scale_fill_viridis(discrete=TRUE) +
    scale_color_viridis(discrete=TRUE) +
    geom_text( data=annot, aes(x=x, y=y, label=text, color=text), hjust=0, size=4.5) +
    theme_ipsum() +
    theme(
      legend.position=""none""
    ) +
    ylab("""") +
    xlab(""Assigned Probability (%)"")","<-,read.table,%>%,gather,mutate,gsub,round,as.numeric,data.frame,c,+,filter,%in%,ggplot,aes,geom_density,scale_fill_viridis,scale_color_viridis,geom_text,theme_ipsum,theme,ylab,xlab","geom_density,geom_text"
135-stacked-density-graph,unnamed-chunk-4-1,images/135-stacked-density-graph/unnamed-chunk-4-1.png,"# Using Small multiple
ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +
    geom_density(adjust=1.5) +
    theme_ipsum() +
    facet_wrap(~cut) +
    theme(
      legend.position=""none"",
      panel.spacing = unit(0.1, ""lines""),
      axis.ticks.x=element_blank()
    )
","+,ggplot,aes,geom_density,theme_ipsum,facet_wrap,~,theme,unit,element_blank","geom_density,facet_wrap"
135-stacked-density-graph,unnamed-chunk-6-1,images/135-stacked-density-graph/unnamed-chunk-6-1.png,p,,
136-stacked-area-chart,thecode-1,images/136-stacked-area-chart/thecode-1.png,"# Packages
library(ggplot2)
library(dplyr)
 
# create data
time <- as.numeric(rep(seq(1,7),each=7))  # x Axis
value <- runif(49, 10, 100)               # y Axis
group <- rep(LETTERS[1:7],times=7)        # group, one shape per group
data <- data.frame(time, value, group)

# stacked area chart
ggplot(data, aes(x=time, y=value, fill=group)) + 
    geom_area()","library,<-,as.numeric,rep,seq,runif,[,:,data.frame,+,ggplot,aes,geom_area",geom_area
136-stacked-area-chart,thecode2-1,images/136-stacked-area-chart/thecode2-1.png,"# Give a specific order:
data$group <- factor(data$group , levels=c(""B"", ""A"", ""D"", ""E"", ""G"", ""F"", ""C"") )

# Plot again
ggplot(data, aes(x=time, y=value, fill=group)) + 
    geom_area()

# Note: you can also sort levels alphabetically:
myLevels <- levels(data$group)
data$group <- factor(data$group , levels=sort(myLevels) )

# Note: sort followinig values at time = 5
myLevels <- data %>%
  filter(time==6) %>%
  arrange(value)
data$group <- factor(data$group , levels=myLevels$group )","<-,$,factor,c,+,ggplot,aes,geom_area,levels,sort,%>%,filter,==,arrange",geom_area
136-stacked-area-chart,thecode3-1,images/136-stacked-area-chart/thecode3-1.png,"# Compute percentages with dplyr
library(dplyr)
data <- data  %>%
  group_by(time, group) %>%
  summarise(n = sum(value)) %>%
  mutate(percentage = n / sum(n))

# Plot
ggplot(data, aes(x=time, y=percentage, fill=group)) + 
    geom_area(alpha=0.6 , size=1, colour=""black"")

# Note: compute percentages without dplyr:
my_fun <- function(vec){ 
  as.numeric(vec[2]) / sum(data$value[data$time==vec[1]]) *100 
}
data$percentage <- apply(data , 1 , my_fun)
","library,<-,%>%,group_by,summarise,sum,mutate,/,+,ggplot,aes,geom_area,function,{,*,as.numeric,[,$,==,apply",geom_area
136-stacked-area-chart,thecode4-1,images/136-stacked-area-chart/thecode4-1.png,"# Library
library(viridis)
library(hrbrthemes)

# Plot
ggplot(data, aes(x=time, y=value, fill=group)) + 
    geom_area(alpha=0.6 , size=.5, colour=""white"") +
    scale_fill_viridis(discrete = T) +
    theme_ipsum() + 
    ggtitle(""The race between ..."")

","library,+,ggplot,aes,geom_area,scale_fill_viridis,theme_ipsum,ggtitle",geom_area
137-spring-shapes-data-art,thecode-1,images/137-spring-shapes-data-art/thecode-1.png,"set.seed(345)
library(ggplot2)
library(RColorBrewer)
ngroup=30
names=paste(""G_"",seq(1,ngroup),sep="""")
DAT=data.frame()

for(i in seq(1:30)){
    data=data.frame( matrix(0, ngroup , 3))
    data[,1]=i
    data[,2]=sample(names, nrow(data))
    data[,3]=prop.table(sample( c(rep(0,100),c(1:ngroup)) ,nrow(data)))
    DAT=rbind(DAT,data)
    }
colnames(DAT)=c(""Year"",""Group"",""Value"")
DAT=DAT[order( DAT$Year, DAT$Group) , ]


coul = brewer.pal(12, ""Paired"") 
coul = colorRampPalette(coul)(ngroup)
coul=coul[sample(c(1:length(coul)) , size=length(coul) ) ]

ggplot(DAT, aes(x=Year, y=Value, fill=Group )) + 
    geom_area(alpha=1  )+
    theme_bw() +
    #scale_fill_brewer(colour=""red"", breaks=rev(levels(DAT$Group)))+
    scale_fill_manual(values = coul)+
     theme(
        text = element_blank(),
        line = element_blank(),
        title = element_blank(),
        legend.position=""none"",
        panel.border = element_blank(),
        panel.background = element_blank())","set.seed,library,=,paste,seq,data.frame,for,:,{,matrix,[,sample,nrow,prop.table,c,rep,rbind,colnames,order,$,brewer.pal,colorRampPalette,length,+,ggplot,aes,geom_area,theme_bw,scale_fill_manual,theme,element_blank",geom_area
142-basic-radar-chart,thecode-1,images/142-basic-radar-chart/thecode-1.png,"# Library
library(fmsb)
 
# Create data: note in High school for Jonathan:
data <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(data) <- c(""math"" , ""english"" , ""biology"" , ""music"" , ""R-coding"", ""data-viz"" , ""french"" , ""physic"", ""statistic"", ""sport"" )
 
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- rbind(rep(20,10) , rep(0,10) , data)
 
# Check your data, it has to look like this!
# head(data)

# The default radar chart 
radarchart(data)","library,<-,as.data.frame,matrix,sample,:,colnames,c,rbind,rep,radarchart",radarchart
142-basic-radar-chart,thecode2-1,images/142-basic-radar-chart/thecode2-1.png,"# Library
library(fmsb)
 
# Create data: note in High school for Jonathan:
data <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(data) <- c(""math"" , ""english"" , ""biology"" , ""music"" , ""R-coding"", ""data-viz"" , ""french"" , ""physic"", ""statistic"", ""sport"" )
 
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- rbind(rep(20,10) , rep(0,10) , data)
 
# Check your data, it has to look like this!
# head(data)

# Custom the radarChart !
radarchart( data  , axistype=1 , 
 
    #custom polygon
    pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 , 
 
    #custom the grid
    cglcol=""grey"", cglty=1, axislabcol=""grey"", caxislabels=seq(0,20,5), cglwd=0.8,
 
    #custom labels
    vlcex=0.8 
    )","library,<-,as.data.frame,matrix,sample,:,colnames,c,rbind,rep,radarchart,rgb,seq",radarchart
143-spider-chart-with-saveral-individuals,thecode-1,images/143-spider-chart-with-saveral-individuals/thecode-1.png,"# Library
library(fmsb)
 
# Create data: note in High school for several students
set.seed(99)
data <- as.data.frame(matrix( sample( 0:20 , 15 , replace=F) , ncol=5))
colnames(data) <- c(""math"" , ""english"" , ""biology"" , ""music"" , ""R-coding"" )
rownames(data) <- paste(""mister"" , letters[1:3] , sep=""-"")
 
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each variable to show on the plot!
data <- rbind(rep(20,5) , rep(0,5) , data)
 
# plot with default options:
radarchart(data)","library,set.seed,<-,as.data.frame,matrix,sample,:,colnames,c,rownames,paste,[,rbind,rep,radarchart",radarchart
143-spider-chart-with-saveral-individuals,thecode2-1,images/143-spider-chart-with-saveral-individuals/thecode2-1.png,"# Library
library(fmsb)
 
# Create data: note in High school for several students
set.seed(99)
data <- as.data.frame(matrix( sample( 0:20 , 15 , replace=F) , ncol=5))
colnames(data) <- c(""math"" , ""english"" , ""biology"" , ""music"" , ""R-coding"" )
rownames(data) <- paste(""mister"" , letters[1:3] , sep=""-"")
 
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each variable to show on the plot!
data <- rbind(rep(20,5) , rep(0,5) , data)

# Color vector
colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9) , rgb(0.7,0.5,0.1,0.9) )
colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4) , rgb(0.7,0.5,0.1,0.4) )

# plot with default options:
radarchart( data  , axistype=1 , 
    #custom polygon
    pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
    #custom the grid
    cglcol=""grey"", cglty=1, axislabcol=""grey"", caxislabels=seq(0,20,5), cglwd=0.8,
    #custom labels
    vlcex=0.8 
    )

# Add a legend
legend(x=0.7, y=1, legend = rownames(data[-c(1,2),]), bty = ""n"", pch=20 , col=colors_in , text.col = ""grey"", cex=1.2, pt.cex=3)","library,set.seed,<-,as.data.frame,matrix,sample,:,colnames,c,rownames,paste,[,rbind,rep,=,rgb,radarchart,seq,legend,-",radarchart
143-spider-chart-with-saveral-individuals,thecode3-1,images/143-spider-chart-with-saveral-individuals/thecode3-1.png,"# Library
library(fmsb)
 
# Create data: note in High school for several students
set.seed(99)
data <- as.data.frame(matrix( sample( 0:20 , 15 , replace=F) , ncol=5))
colnames(data) <- c(""math"" , ""english"" , ""biology"" , ""music"" , ""R-coding"" )
rownames(data) <- paste(""mister"" , letters[1:3] , sep=""-"")
 
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each variable to show on the plot!
data <- rbind(rep(20,5) , rep(0,5) , data)
 
# Set graphic colors
library(RColorBrewer)
coul <- brewer.pal(3, ""BuPu"")
colors_border <- coul
library(scales)
colors_in <- alpha(coul,0.3)

# If you remove the 2 first lines, the function compute the max and min of each variable with the available data:
radarchart( data[-c(1,2),]  , axistype=0 , maxmin=F,
    #custom polygon
    pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1,
    #custom the grid
    cglcol=""grey"", cglty=1, axislabcol=""black"", cglwd=0.8, 
    #custom labels
    vlcex=0.8 
    )

# Add a legend
legend(x=0.7, y=1, legend = rownames(data[-c(1,2),]), bty = ""n"", pch=20 , col=colors_in , text.col = ""grey"", cex=1.2, pt.cex=3)","library,set.seed,<-,as.data.frame,matrix,sample,:,colnames,c,rownames,paste,[,rbind,rep,brewer.pal,alpha,radarchart,-,legend",radarchart
144-droid-bb-8-data-art,thecode-1,images/144-droid-bb-8-data-art/thecode-1.png,"# Packages ----------------------------------------------------------------

library(""dplyr"")
library(""ggplot2"")
library(""sp"")
library(""rgeos"")


# Funs --------------------------------------------------------------------

coord_circle <- function(centre = c(0, 0), r = 1, n = 1000) {
  data_frame(
    x = seq(from = 0 - r, to = 0 + r, length.out = n %/% 2),
    y = sqrt(r^2 - x^2)
  ) %>% bind_rows(., -.) %>%
    mutate(x = x + centre[1], y = y + centre[2])
}


create_poly <- function(...) {
  args <- list(...)
  SpatialPolygons(
    lapply(
      X = seq_along(args),
      FUN = function(x) {
        Polygons(list(Polygon(as.data.frame(args[[x]]))), names(args)[x])
      }
    )
  )
}


echancrure <- function(to_var, by_var, p = 0.1) {
  ind <- which(by_var >= -0.08 & by_var <= 0.08 & to_var > 0)
  to_var[ind] <- to_var[ind] - p
  ind <- which(by_var >= -0.08 & by_var <= 0.08 & to_var < 0)
  to_var[ind] <- to_var[ind] + p
  return(to_var)
}



# BB-8 geometries ---------------------------------------------------------


# droid_body -------------------------------------------------------------------

# shape of the droid_body : two circles and a vertical line
droid_body <- coord_circle(centre = c(0, 0), r = 1)
droid_body$xvert <- 0
droid_body$yvert <- droid_body$x
droid_body <- bind_cols(
  droid_body,
  coord_circle(centre = c(0, 0), r = 0.35, n = nrow(droid_body)) %>% select(xint = x, yint = y)
)

# grey shapes in the central inner circle
droid_body_rect <- data_frame(
  x = c(-0.5, 0.5, 0.5, -0.5, c(-0.5, 0.5, 0.5, -0.5) - 0.2, c(-0.5, 0.5, 0.5, -0.5) + 0.2),
  y = c(-0.6, 0.4, 0.6, -0.4, c(-0.6, 0.4, 0.6, -0.4) + 0.2, c(-0.6, 0.4, 0.6, -0.4) - 0.2),
  group = rep(1:3, each = 4)
)
# a polygon for calculate the intersection between the grey shapes and the inner circle
polyrect <- create_poly(
  ""polyrect1"" = droid_body_rect[droid_body_rect$group == 1, 1:2],
  ""polyrect2"" = droid_body_rect[droid_body_rect$group == 2, 1:2],
  ""polyrect3"" = droid_body_rect[droid_body_rect$group == 3, 1:2]
)

polycircle <- create_poly(
  ""polycircle"" = droid_body[, c(""xint"", ""yint"")]
)
# plot(polyrect); plot(polycircle, add = TRUE)
polyrect <- gIntersection(spgeom1 = polyrect, spgeom2 = polycircle)
# plot(polyrect); plot(polycircle, add = TRUE)

# fortify the polygon for ggplot
droid_body_rect <- fortify(polyrect)


# Central ring (orange)
ring <- coord_circle(centre = c(0, 0), r = 0.4)
ring$y <- echancrure(to_var = ring$y, by_var = ring$x, p = 0.1)
ring$x <- echancrure(to_var = ring$x, by_var = ring$y, p = 0.1)
ring <- bind_rows(
  ring %>% mutate(group = (x >= 0) * 1),
  coord_circle(centre = c(0, 0), r = 0.55, n = nrow(ring)) %>% mutate(y = -y, group = (x >= 0) * 1)
) %>%
  filter(group == 1) # oups something went wrong
ring <- bind_rows(ring, ring %>% mutate(x = -x, group = 2))




# ring left and right
# we make a copy of the right part of the central ring
ring_left <- ring %>% filter(group == 1)
# and we shift the ring center
ring_left$x <- ring_left$x - 1.3

# the same ...
ring_right <- ring %>% filter(group == 2)
ring_right$x <- ring_right$x + 1.3

# we creta a polygon for the intersection with the droid_body circle
polyring <- create_poly(
  ""polyring_g"" = ring_left[, c(""x"", ""y"")],
  ""polyring_d"" = ring_right[, c(""x"", ""y"")]
)

polydroid_body <- create_poly(""polydroid_body"" = droid_body[, c(""x"", ""y"")])

# plot(polyring); plot(polydroid_body, add = TRUE)

polyring <- gIntersection(spgeom1 = polyring, spgeom2 = polydroid_body)
fort_ring <- fortify(polyring)


# the horizontal line of the body (in two parts)
ligne_hori <- data_frame(
  x = c(-1, range(ring$x), 1),
  y = 0,
  group = c(1, 1, 2, 2)
)


# droid head --------------------------------------------------------------------

droid_head <- coord_circle(centre = c(0, 1.02), r = 0.52) %>%
  filter(y >= 1.02) %>%
  mutate(group = 1, fill = ""white"", col= ""black"") %>%
  bind_rows(
    data_frame(
      x = c(-0.52, -0.4, 0.4, 0.52),
      y = c(1.02, 0.95, 0.95, 1.02),
      group = 2, fill = ""white"", col= ""black""
    )
  )



# Grey bars in droid's head
poly_head_grey <- create_poly(
  ""poly_head_grey_haut"" = data_frame(
    x = c(-0.52, 0.52, 0.52, -0.52),
    y = c(1.44, 1.44, 1.51, 1.51)
  ),
  ""poly_head_grey_bas"" = data_frame(
    x = c(-0.52, 0.52, 0.52, -0.52),
    y = c(1.02, 1.02, 1.07, 1.07)
  )
)

polydroid_head <- create_poly(""polydroid_head"" = droid_head[droid_head$group == 1, c(""x"", ""y"")])

poly_head_grey <- gIntersection(spgeom1 = poly_head_grey, spgeom2 = polydroid_head)
fort_droid_headrectgris <- fortify(poly_head_grey)



# orange bars
poly_head_orange <- create_poly(
  ""poly_head_orange1"" = data_frame(
    x = c(-0.52, 0.52, 0.52, -0.52),
    y = c(1.38, 1.38, 1.42, 1.42)
  ),
  ""poly_head_orange2"" = data_frame(
    x = c(-0.35, -0.35, -0.2, -0.2),
    y = c(1.07, 1.15, 1.15, 1.07)
  ),
  ""poly_head_orange3"" = data_frame(
    x = c(-0.55, -0.55, -0.45, -0.45),
    y = c(1.07, 1.15, 1.15, 1.07)
  ),
  ""poly_head_orange4"" = data_frame(
    x = c(0.44, 0.44, 0.47, 0.47),
    y = c(1.07, 1.15, 1.15, 1.07)
  )
)

poly_head_orange <- gIntersection(spgeom1 = poly_head_orange, spgeom2 = polydroid_head)
fort_droid_headrectorange <- fortify(poly_head_orange)


polygones_droid_head <- bind_rows(
  fort_droid_headrectgris %>% select(-piece) %>%
    mutate(group = as.numeric(as.character(group)), fill = ""#8E8E9C"", col= ""black""),
  fort_droid_headrectorange %>% select(-piece) %>% 
    mutate(group = as.numeric(as.character(group)) * 2, fill = ""#DF8D5D"", col= ""black"")
)


# Eyes
droid_eyes <- bind_rows(
  coord_circle(centre = c(0, 1.35), r = 0.14) %>% mutate(group = 1, fill = ""white"", col = ""white""),
  coord_circle(centre = c(0, 1.35), r = 0.12) %>% mutate(group = 2, fill = ""white"", col = ""black""),
  coord_circle(centre = c(0, 1.35), r = 0.10) %>% mutate(group = 3, fill = ""grey40"", col = ""grey40""),
  coord_circle(centre = c(0, 1.35), r = 0.08) %>% mutate(group = 4, fill = ""black"", col = ""black""),
  coord_circle(centre = c(0, 1.16), r = 0.04) %>% mutate(group = 5, fill = ""#76B1DE"", col = ""black""),
  coord_circle(centre = c(0.25, 1.20), r = 0.08) %>% mutate(group = 6, fill = ""black"", col = ""black""),
  coord_circle(centre = c(0.25, 1.20), r = 0.07) %>% mutate(group = 7, fill = ""white"", col = ""black""),
  coord_circle(centre = c(0.25, 1.20), r = 0.06) %>% mutate(group = 8, fill = ""grey40"", col = ""grey40""),
  coord_circle(centre = c(0.25, 1.20), r = 0.04) %>% mutate(group = 9, fill = ""black"", col = ""black"")
)

eye_line <- data_frame(
  x = 0,
  y = c(1.07, 1.16-0.04)
)

# Antennas
antennas <- data_frame(
  x = c(0.01, 0.01, 0.10, 0.10),
  y = c(sqrt(0.52^2 - 0.01^2) + 1.02, sqrt(0.52^2 - 0.01^2) + 1.02 + 0.15,
        sqrt(0.52^2 - 0.1^2) + 1.02, sqrt(0.52^2 - 0.1^2) + 1.02 + 0.25),
  group = c(1, 1, 2, 2)
)


# bb-8/ggplot2 ------------------------------------------------------------

bb8 <- ggplot(data = droid_body) +
  coord_fixed() +
  geom_polygon(mapping = aes(x = x, y = y), fill = ""white"", col = ""black"") +
  geom_polygon(data = droid_body_rect, mapping = aes(x = long, y = lat, group = group), fill = ""#8E8E9C"") +
  geom_path(mapping = aes(x = xvert, y = yvert)) +
  geom_path(mapping = aes(x = xint, y = yint)) +
  geom_polygon(data = ring, mapping = aes(x = x, y = y, group = group), fill = ""#DF8D5D"", col = ""#DF8D5D"") +
  geom_path(data = ligne_hori, mapping = aes(x = x, y = y, group = group)) +
  geom_polygon(data = fort_ring , mapping = aes(x = long, y = lat, group = group), fill = ""#DF8D5D"") +
  geom_polygon(data = droid_head, mapping = aes(x = x, y = y, group = group, fill = fill, col = col)) +
  geom_polygon(data = polygones_droid_head, mapping = aes(x = long, y = lat, group = group, fill = fill, col = col)) +
  geom_polygon(data = droid_eyes, mapping = aes(x = x, y = y, group = group, fill = fill, col = col)) +
  scale_fill_identity() + scale_color_identity() +
  geom_line(data = eye_line, mapping = aes(x = x, y = y)) +
  geom_line(data = antennas, mapping = aes(x = x, y = y, group = group), col = ""black"")


bb8
# or
#bb8 + theme_void()



# save --------------------------------------------------------------------

#ggsave(filename = ""#144_bb8_ggplot2.png"", plot = bb8, width = 6, height = 8)
#ggsave(filename = ""#144_bb8_ggplot2_void.png"", plot = bb8 + theme_void(), width = 6, height = 8)","library,<-,function,c,{,%>%,data_frame,seq,-,+,%/%,sqrt,^,bind_rows,mutate,[,list,SpatialPolygons,lapply,seq_along,Polygons,Polygon,as.data.frame,[[,names,which,&,>=,<=,>,<,return,coord_circle,$,bind_cols,nrow,select,rep,:,create_poly,==,gIntersection,fortify,echancrure,*,(,filter,range,as.numeric,as.character,ggplot,coord_fixed,geom_polygon,aes,geom_path,scale_fill_identity,scale_color_identity,geom_line","coord_circle,geom_polygon,geom_path,geom_line"
145-two-different-y-axis-on-the-same-plot,thecode-1,images/145-two-different-y-axis-on-the-same-plot/thecode-1.png,"#library
library(latticeExtra)
 
# create data
set.seed(1)
x <- 1:100
var1 <- cumsum(rnorm(100))
var2 <- var1^2
data <- data.frame(x,var1,var2)
 
 
# usual line chart
xyplot(var1 + var2 ~ x, data, type = ""l"", col=c(""steelblue"", ""#69b3a2"") , lwd=2)
 ","library,set.seed,<-,:,cumsum,rnorm,^,data.frame,xyplot,~,+,c",xyplot
145-two-different-y-axis-on-the-same-plot,thecode2-1,images/145-two-different-y-axis-on-the-same-plot/thecode2-1.png,"#library
library(latticeExtra)
 
# create data
set.seed(1)
x <- 1:100
var1 <- cumsum(rnorm(100))
var2 <- var1^2
data <- data.frame(x,var1,var2)
 
 
# --> construct separate plots for each series
obj1 <- xyplot(var1 ~ x, data, type = ""l"" , lwd=2, col=""steelblue"")
obj2 <- xyplot(var2 ~ x, data, type = ""l"", lwd=2, col=""#69b3a2"")
 
# --> Make the plot with second y axis:
doubleYScale(obj1, obj2, add.ylab2 = TRUE, use.style=FALSE )
","library,set.seed,<-,:,cumsum,rnorm,^,data.frame,xyplot,~,doubleYScale",xyplot
145-two-different-y-axis-on-the-same-plot,thecode3-1,images/145-two-different-y-axis-on-the-same-plot/thecode3-1.png,"#library
library(latticeExtra)
 
# create data
set.seed(1)
x <- 1:100
var1 <- cumsum(rnorm(100))
var2 <- var1^2
data <- data.frame(x,var1,var2)
 
 
# --> construct separate plots for each series
obj1 <- xyplot(var1 ~ x, data, type = ""l"" , lwd=2)
obj2 <- xyplot(var2 ~ x, data, type = ""l"", lwd=2)
 
# --> Make the plot with second y axis AND legend:
doubleYScale(obj1, obj2, text = c(""obj1"", ""obj2"") , add.ylab2 = TRUE)","library,set.seed,<-,:,cumsum,rnorm,^,data.frame,xyplot,~,doubleYScale,c",xyplot
15-wordcloud,thecode-1,images/15-wordcloud/thecode-1.png,"#Charge the wordcloud library
library(wordcloud)
 
#Create a list of words (Random words concerning my work)
a <- c(""Cereal"",""WSSMV"",""SBCMV"",""Experimentation"",""Talk"",""Conference"",""Writing"", 
   ""Publication"",""Analysis"",""Bioinformatics"",""Science"",""Statistics"",""Data"", 
   ""Programming"",""Wheat"",""Virus"",""Genotyping"",""Work"",""Fun"",""Surfing"",""R"", ""R"",
   ""Data-Viz"",""Python"",""Linux"",""Programming"",""Graph Gallery"",""Biologie"", ""Resistance"",
   ""Computing"",""Data-Science"",""Reproductible"",""GitHub"",""Script"")
 
#I give a frequency to each word of this list 
b <- sample(seq(0,1,0.01) , length(a) , replace=TRUE) 
 
#The package will automatically make the wordcloud ! (I add a black background)
par(bg=""black"") 
wordcloud(a , b , col=terrain.colors(length(a) , alpha=0.9) , rot.per=0.3 )","library,<-,c,sample,seq,length,par,wordcloud,terrain.colors",
164-area-chart-ggplot2,thecode-1,images/164-area-chart-ggplot2/thecode-1.png,"# Libraries
library(ggplot2)

# create data
xValue <- 1:50
yValue <- cumsum(rnorm(50))
data <- data.frame(xValue,yValue)

# Plot
ggplot(data, aes(x=xValue, y=yValue)) +
  geom_area()","library,<-,:,cumsum,rnorm,data.frame,+,ggplot,aes,geom_area",geom_area
164-area-chart-ggplot2,thecode2-1,images/164-area-chart-ggplot2/thecode2-1.png,"# Libraries
library(ggplot2)
library(hrbrthemes)

# create data
xValue <- 1:10
yValue <- abs(cumsum(rnorm(10)))
data <- data.frame(xValue,yValue)

# Plot
ggplot(data, aes(x=xValue, y=yValue)) +
  geom_area( fill=""#69b3a2"", alpha=0.4) +
  geom_line(color=""#69b3a2"", size=2) +
  geom_point(size=3, color=""#69b3a2"") +
  theme_ipsum() +
  ggtitle(""Evolution of something"")","library,<-,:,abs,cumsum,rnorm,data.frame,+,ggplot,aes,geom_area,geom_line,geom_point,theme_ipsum,ggtitle","geom_area,geom_line,geom_point"
165-basic-area-chart,thecode-1,images/165-basic-area-chart/thecode-1.png,"# Create data
data <- data.frame(
  x=seq(1,10), 
  y=sample(seq(1,15),10)
)

# Add line on top
plot( data$x , data$y , col=rgb(0.2,0.1,0.5,0.9) , type=""o"" , lwd=3 , xlab="""" , ylab=""size"" , pch=20)

# Fill the area
polygon( 
  c(min(data$x), data$x , max(data$x)) , 
  c( min(data$y) , data$y , min(data$y)) , 
  col=rgb(0.2,0.1,0.5,0.2) , border=F
)","<-,data.frame,seq,sample,plot,$,rgb,polygon,c,min,max",polygon
168-load-a-shape-file-into-r,thecode4-1,images/168-load-a-shape-file-into-r/thecode4-1.png,"# Basic plot of this shape file:
par(mar=c(0,0,0,0))
plot(my_spdf, col=""#f2f2f2"", bg=""skyblue"", lwd=0.25, border=0 )","par,c,plot",
168-load-a-shape-file-into-r,thecode5-1,images/168-load-a-shape-file-into-r/thecode5-1.png,"# 'fortify' the data to get a dataframe format required by ggplot2
library(broom)
spdf_fortified <- tidy(my_spdf, region = ""NAME"")

# Plot it
library(ggplot2)
ggplot() +
  geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill=""#69b3a2"", color=""white"") +
  theme_void() ","library,<-,tidy,+,ggplot,geom_polygon,aes,theme_void",geom_polygon
169-170-basic-manipulation-of-shapefiles,thecode4-1,images/169-170-basic-manipulation-of-shapefiles/thecode4-1.png,"# Keep only data concerning Africa
africa <- my_spdf[my_spdf@data$REGION==2 , ]

# Plot africa
par(mar=c(0,0,0,0))
plot(africa , xlim=c(-20,60) , ylim=c(-40,35), col=""steelblue"", lwd=0.5 )","<-,[,==,$,@,par,c,plot,-",
169-170-basic-manipulation-of-shapefiles,thecode6-1,images/169-170-basic-manipulation-of-shapefiles/thecode6-1.png,"# Simplification with rgeos
library(""rgeos"")
africaSimple <- gSimplify(africa, tol = 4, topologyPreserve = TRUE)

# Plot it
par(mar=c(0,0,0,0))
plot(africaSimple , xlim=c(-20,60) , ylim=c(-40,35), col=""#59b2a3"", lwd=0.5 )","library,<-,gSimplify,par,c,plot,-",
169-170-basic-manipulation-of-shapefiles,thecode7-1,images/169-170-basic-manipulation-of-shapefiles/thecode7-1.png,"# Load the rgeos library
library(rgeos)

# The gCentroid function computes the centroid of each region:
# gCentroid(africa, byid=TRUE)

# select big countries only
africaBig <- africa[which(africa@data$AREA>75000), ]

# Small manipulation to put it in a dataframe:
centers <- cbind.data.frame(data.frame(gCentroid(africaBig, byid=TRUE), id=africaBig@data$FIPS))

# Show it on the map?
par(mar=c(0,0,0,0))
plot(africa , xlim=c(-20,60) , ylim=c(-40,35), lwd=0.5 )
text(centers$x, centers$y, centers$id, cex=.9, col=""#69b3a2"")","library,<-,[,which,>,$,@,cbind.data.frame,data.frame,gCentroid,par,c,plot,-,text",text
175-choropleth-map-cartography-pkg,thecode-1,images/175-choropleth-map-cartography-pkg/thecode-1.png,"# Use the cartography library to do the choropleth map
library(cartography)

# Load data
data(nuts2006)

# Build a choropleth
choroLayer(spdf = nuts2.spdf, df = nuts2.df, var = ""pop2008"" , legend.pos = ""right"")
title(""Population in 2008"")","library,data,choroLayer,title",choroLayer
175-choropleth-map-cartography-pkg,thecode2-1,images/175-choropleth-map-cartography-pkg/thecode2-1.png,"# Download the shape file from the web and unzip it:
# download.file(""http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip"" , destfile=""world_shape_file.zip"")
# system(""unzip world_shape_file.zip"")

# Load it as a geospatial object in R
library(rgdal)
my_spdf <- readOGR( dsn= ""/Users/yan.holtz/Desktop/R-graph-gallery/world_shape_file/"" , layer=""TM_WORLD_BORDERS_SIMPL-0.3"", verbose=FALSE) 
africa <- my_spdf[my_spdf@data$REGION==2 , ]

africa@data$POP2005 <- as.numeric(africa@data$POP2005)

# Use the cartography library to do the choropleth map
library(cartography)
choroLayer(spdf = africa, df = africa@data, var = ""POP2005"")
title(""Number of people living in Africa in 2005"")","library,<-,readOGR,[,==,$,@,as.numeric,choroLayer,title",choroLayer
176-custom-choropleth-map-cartography-pkg,thecode-1,images/176-custom-choropleth-map-cartography-pkg/thecode-1.png,"# Cartography Library
library(cartography)
library(sp)

# Upload data attached with the package.
data(nuts2006)
 
# Now we have a spdf file (shape file) called nuts2.spdf with shape of european regions.
# We also have a dataframe with information concerning every region.Both object have a first column ""id"" that makes the link between them.
head(nuts2.df)
 
# Annual growth per region
nuts2.df$cagr <- 100 * (((nuts2.df$pop2008/nuts2.df$pop1999)^(1/9)) -  1)
 
# Build a color palette
cols <- carto.pal(pal1 = ""green.pal"", n1 = 2, pal2 = ""red.pal"", n2 = 4)
 
# plot backgroud shapes (sea and world)
plot(nuts0.spdf, border = NA, col = NA, bg = ""#A6CAE0"")
plot(world.spdf, col = ""#E3DEBF"", border = NA, add = TRUE)
 
# Add annual growth
choroLayer(spdf = nuts2.spdf, df = nuts2.df, var = ""cagr"", 
    breaks = c(-2.43, -1, 0, 0.5, 1, 2, 3.1), col = cols, 
    border = ""grey40"", lwd = 0.5, legend.pos = ""right"", 
    legend.title.txt = ""taux de croissance\nannuel moyen"", 
    legend.values.rnd = 2, add = TRUE)
 
# Add borders
plot(nuts0.spdf, border = ""grey20"", lwd = 0.75, add = TRUE)
 
# Add titles, legend ...
layoutLayer(title = ""Growth rate in Europe"", 
    author = ""cartography"", sources = ""Eurostat, 2008"", 
    frame = TRUE, col = NA, scale = NULL, coltitle = ""black"", 
    south = TRUE)","library,data,head,<-,$,*,(,-,^,/,carto.pal,plot,choroLayer,c,layoutLayer","choroLayer,layoutLayer"
177-map-with-proportional-symbols,thecode-1,images/177-map-with-proportional-symbols/thecode-1.png,"# Library
library(cartography)
library(sp)

# Upload data attached with the package.
data(nuts2006)

# Now we have a geospatial object called nuts2.spdf containing the shape of european regions. We can plot it with the plot function.
# summary(nuts2.spdf)

# We also have a dataframe with information concerning every region.
# head(nuts2.df)
# Both object have a first column ""id"" that makes the link between them.

# Plot Europe
plot(nuts0.spdf, border = NA, col = NA, bg = ""#A6CAE0"")
plot(world.spdf, col = ""#E3DEBF"", border = NA, add = TRUE)
plot(nuts0.spdf, col = ""#D1914D"", border = ""grey80"",  add = TRUE)

# Add circles proportional to the total population
propSymbolsLayer(spdf = nuts0.spdf, df = nuts0.df,
    var = ""pop2008"", symbols = ""circle"", col = ""#920000"",
    legend.pos = ""right"", legend.title.txt = ""Total\npopulation (2008)"",
    legend.style = ""c"")

# Add titles, legend...
layoutLayer(title = ""Countries Population in Europe"",
    author = ""cartography"", sources = ""Eurostat, 2008"",
    scale = NULL, south = TRUE)","library,data,plot,propSymbolsLayer,layoutLayer","propSymbolsLayer,layoutLayer"
183-choropleth-map-with-leaflet,thecode-1,images/183-choropleth-map-with-leaflet/thecode-1.png,"# load ggplot2
library(ggplot2)

# Distribution of the population per country?
world_spdf@data %>% 
  ggplot( aes(x=as.numeric(POP2005))) + 
    geom_histogram(bins=20, fill='#69b3a2', color='white') +
    xlab(""Population (M)"") + 
    theme_bw()","library,+,%>%,@,ggplot,aes,as.numeric,geom_histogram,xlab,theme_bw",geom_histogram
190-mirrored-histogram,unnamed-chunk-1-1,images/190-mirrored-histogram/unnamed-chunk-1-1.png,"#Create Data
x1 = rnorm(100)
x2 = rnorm(100)+rep(2,100)
par(mfrow=c(2,1))
 
#Make the plot
par(mar=c(0,5,3,3))
hist(x1 , main="""" , xlim=c(-2,5), ylab=""Frequency for x1"", xlab="""", ylim=c(0,25) , xaxt=""n"", las=1 , col=""slateblue1"", breaks=10)
par(mar=c(5,5,0,3))
hist(x2 , main="""" , xlim=c(-2,5), ylab=""Frequency for x2"", xlab=""Value of my variable"", ylim=c(25,0) , las=1 , col=""tomato3""  , breaks=10)","=,rnorm,+,rep,par,c,hist,-",hist
191-manage-date-data,thecode2-1,images/191-manage-date-data/thecode2-1.png,"# Create data
set.seed(124)
date <- paste(   ""2015/03/"" , sample(seq(1,31),6) , sep="""")
value <- sample(seq(1,100) , 6)
data <- data.frame(date,value)

# Date and time are recognized as factor:
#str(data)

# So ploting them works bad --> wrong order, date without value are not represented, 
plot(data$value~data$date, type=""b"")","set.seed,<-,paste,sample,seq,data.frame,plot,~,$",
191-manage-date-data,thecode3-1,images/191-manage-date-data/thecode3-1.png,"# Create data
set.seed(124)
date <- paste(   ""2015/03/"" , sample(seq(1,31),6) , sep="""")
value <- sample(seq(1,100) , 6)
data <- data.frame(date,value)

# Let's change the date to the ""date"" format:
data$date <- as.Date(data$date)
 
# So we can sort the table:
data <- data[order(data$date) , ]
 
# Easy to make it better now:
plot(data$value~data$date , type=""b"" , lwd=3 , col=rgb(0.1,0.7,0.1,0.8) , ylab=""value of ..."" , xlab=""date"" , bty=""l"" , pch=20 , cex=4)
abline(h=seq(0,100,10) , col=""grey"", lwd=0.8)
","set.seed,<-,paste,sample,seq,data.frame,$,as.Date,[,order,plot,~,rgb,abline",abline
192-ggplot-themes,thecode3a-1,images/192-ggplot-themes/thecode3a-1.png,"# library
library(ggplot2)
library(gridExtra)
 
# create data
set.seed(123)
var=rnorm(1000)
 
# Without theme
plot1 <- qplot(var , fill=I(rgb(0.1,0.2,0.4,0.6)) )
 
# With themes
plot2 = plot1+theme_bw()+annotate(""text"", x = -1.9, y = 75, label = ""bw()"" , col=""orange"" , size=4)
plot3 = plot1+theme_classic()+annotate(""text"", x = -1.9, y = 75, label = ""classic()"" , col=""orange"" , size=4)
plot4 = plot1+theme_gray()+annotate(""text"", x = -1.9, y = 75, label = ""gray()"" , col=""orange"" , size=4)
plot5 = plot1+theme_linedraw()+annotate(""text"", x = -1.9, y = 75, label = ""linedraw()"" , col=""orange"" , size=4)
plot6 = plot1+theme_dark()+annotate(""text"", x = -1.9, y = 75, label = ""dark()"" , col=""orange"" , size=4)
plot7 = plot1+theme_get()+annotate(""text"", x = -1.9, y = 75, label = ""get()"" , col=""orange"" , size=4)
plot8 = plot1+theme_minimal()+annotate(""text"", x = -1.9, y = 75, label = ""minimal()"" , col=""orange"" , size=4)
 
 
# Arrange and display the plots into a 2x1 grid
grid.arrange(plot1,plot2,plot3,plot4, ncol=2)","library,set.seed,=,rnorm,<-,qplot,I,rgb,+,theme_bw,annotate,-,theme_classic,theme_gray,theme_linedraw,theme_dark,theme_get,theme_minimal,grid.arrange",grid.arrange
192-ggplot-themes,thecode3b-1,images/192-ggplot-themes/thecode3b-1.png,"grid.arrange(plot5,plot6,plot7,plot8, ncol=2)",grid.arrange,grid.arrange
198-scatter-and-density-plot-ggplot2,thecode-1,images/198-scatter-and-density-plot-ggplot2/thecode-1.png,"# library
library(ggplot2) 

# data
sample_data <- data.frame(x_values = 1:100 + rnorm(100,sd=20), y_values = 1:100 + rnorm(100,sd=27)) 

#plot
ggplot(sample_data, aes(x_values, y_values)) +
  stat_density2d(geom=""tile"", aes(fill = ..density..), contour = FALSE) + 
  geom_point(colour = ""white"")","library,<-,data.frame,+,:,rnorm,ggplot,aes,stat_density2d,geom_point","stat_density2d,geom_point"
199-correlation-matrix-with-ggally,thecode-1,images/199-correlation-matrix-with-ggally/thecode-1.png,"# Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables 
library(GGally)
 
# Create data 
data <- data.frame( var1 = 1:100 + rnorm(100,sd=20), v2 = 1:100 + rnorm(100,sd=27), v3 = rep(1, 100) + rnorm(100, sd = 1)) 
data$v4 = data$var1 ** 2 
data$v5 = -(data$var1 ** 2) 
 
# Check correlations (as scatterplots), distribution and print corrleation coefficient 
ggpairs(data, title=""correlogram with ggpairs()"") 
","library,<-,data.frame,+,:,rnorm,rep,=,$,^,-,(,ggpairs",ggpairs
199-correlation-matrix-with-ggally,thecode2-1,images/199-correlation-matrix-with-ggally/thecode2-1.png,"# Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables 
library(GGally)
 
# Create data 
data <- data.frame( var1 = 1:100 + rnorm(100,sd=20), v2 = 1:100 + rnorm(100,sd=27), v3 = rep(1, 100) + rnorm(100, sd = 1)) 
data$v4 = data$var1 ** 2 
data$v5 = -(data$var1 ** 2) 
 
# Check correlation between variables
#cor(data) 
 
# Nice visualization of correlations
ggcorr(data, method = c(""everything"", ""pearson"")) ","library,<-,data.frame,+,:,rnorm,rep,=,$,^,-,(,ggcorr,c",ggcorr
199-correlation-matrix-with-ggally,thecode3-1,images/199-correlation-matrix-with-ggally/thecode3-1.png,"# Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables 
library(GGally)
 
# From the help page:
data(flea)
ggpairs(flea, columns = 2:4, ggplot2::aes(colour=species)) ","library,data,ggpairs,:,aes",ggpairs
199-correlation-matrix-with-ggally,thecode4-1,images/199-correlation-matrix-with-ggally/thecode4-1.png,"# Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables 
library(GGally)
 
# From the help page:
data(tips, package = ""reshape"")
ggpairs(
  tips[, c(1, 3, 4, 2)],
  upper = list(continuous = ""density"", combo = ""box_no_facet""),
  lower = list(continuous = ""points"", combo = ""dot_no_facet"")
)","library,data,ggpairs,[,c,list",ggpairs
2-two-histograms-with-melt-colors,unnamed-chunk-1-1,images/2-two-histograms-with-melt-colors/unnamed-chunk-1-1.png,"#Create data
Ixos=rnorm(4000 , 125 , 30)     
Primadur=rnorm(4000 , 200 , 30) 
 
# First distribution
hist(Ixos, breaks=30, xlim=c(0,300), col=rgb(1,0,0,0.5), xlab=""height"", 
     ylab=""nbr of plants"", main=""distribution of height of 2 durum wheat varieties"" )

# Second with add=T to plot on top
hist(Primadur, breaks=30, xlim=c(0,300), col=rgb(0,0,1,0.5), add=T)

# Add legend
legend(""topright"", legend=c(""Ixos"",""Primadur""), col=c(rgb(1,0,0,0.5), 
     rgb(0,0,1,0.5)), pt.cex=2, pch=15 )","=,rnorm,hist,c,rgb,legend",hist
2-two-histograms-with-melt-colors,unnamed-chunk-3-1,images/2-two-histograms-with-melt-colors/unnamed-chunk-3-1.png,"par(
  mfrow=c(1,2),
  mar=c(4,4,1,0)
)

hist(Ixos, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab=""height"" , ylab=""nbr of plants"" , main="""" )
hist(Primadur, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab=""height"" , ylab="""" , main="""")","par,c,hist,rgb",hist
200-change-color-in-lineplot-following-y-value,thecode-1,images/200-change-color-in-lineplot-following-y-value/thecode-1.png,"# library
library(plotrix)
 
#create color palette
library(RColorBrewer)
my_colors = brewer.pal(8, ""Set2"") 
 
# Create data
x<-seq(1,100)
y<-sin(x/5)+x/20
 
# Plot x and y
par(mar=c(4,4,2,2))
clplot(x, y, main="""", lwd=5, levels=c(1,2,3,4,5), col=my_colors, showcuts=T , bty=""n"")","library,=,brewer.pal,<-,seq,+,sin,/,par,c,clplot",clplot
201-levelplot-with-latticeextra,thecode-1,images/201-levelplot-with-latticeextra/thecode-1.png,"# library
library(latticeExtra) 
 
# create data
set.seed(1) 
data <- data.frame(x = rnorm(100), y = rnorm(100)) 
data$z <- with(data, x * y + rnorm(100, sd = 1)) 
 
# showing data points on the same color scale 
levelplot(z ~ x * y, data, 
          panel = panel.levelplot.points, cex = 1.2
    ) + 
    layer_(panel.2dsmoother(..., n = 200))","library,set.seed,<-,data.frame,rnorm,$,with,+,*,levelplot,~,layer_,panel.2dsmoother","levelplot,panel.2dsmoother"
202-barplot-for-likert-type-items,thecode-1,images/202-barplot-for-likert-type-items/thecode-1.png,"# library
library(likert) 
 
# Use a provided dataset
data(pisaitems) 
items28 <- pisaitems[, substr(names(pisaitems), 1, 5) == ""ST24Q""] 
 
# Build plot
p <- likert(items28) 
plot(p)","library,data,<-,[,==,substr,names,likert,plot",
208-basic-barplot,thecode-1,images/208-basic-barplot/thecode-1.png,"# create dummy data
data <- data.frame(
  name=letters[1:5],
  value=sample(seq(4,15),5)
)

# The most basic barplot you can do:
barplot(height=data$value, names=data$name)","<-,data.frame,[,:,sample,seq,barplot,$",barplot
209-the-options-of-barplot,thecode-1,images/209-the-options-of-barplot/thecode-1.png,"# create dummy data
data <- data.frame(
  name=letters[1:5],
  value=sample(seq(4,15),5)
)

# The most basic barplot you can do:
barplot(height=data$value, names=data$name)","<-,data.frame,[,:,sample,seq,barplot,$",barplot
209-the-options-of-barplot,thecode2-1,images/209-the-options-of-barplot/thecode2-1.png,"# create dummy data
data <- data.frame(
  name=letters[1:5],
  value=sample(seq(4,15),5)
)

# Uniform color
barplot(height=data$value, names=data$name, col=rgb(0.2,0.4,0.6,0.6) )

# Specific color for each bar? Use a well known palette
library(RColorBrewer)
coul <- brewer.pal(5, ""Set2"") 
barplot(height=data$value, names=data$name, col=coul )

# Change border color
barplot(height=data$value, names=data$name, border=""#69b3a2"", col=""white"" )","<-,data.frame,[,:,sample,seq,barplot,$,rgb,library,brewer.pal",barplot
209-the-options-of-barplot,thecode2-2,images/209-the-options-of-barplot/thecode2-2.png,,,
209-the-options-of-barplot,thecode4-1,images/209-the-options-of-barplot/thecode4-1.png,"# create dummy data
data <- data.frame(
  name=letters[1:5],
  value=sample(seq(4,15),5)
)

# Uniform color
barplot(height=data$value, names=data$name, 
        col=rgb(0.8,0.1,0.1,0.6),
        xlab=""categories"", 
        ylab=""values"", 
        main=""My title"", 
        ylim=c(0,40)
        )
","<-,data.frame,[,:,sample,seq,barplot,$,rgb,c",barplot
209-the-options-of-barplot,thecode5-1,images/209-the-options-of-barplot/thecode5-1.png,"# create dummy data
data <- data.frame(
  name=letters[1:5],
  value=sample(seq(4,15),5)
)

# Uniform color
barplot(height=data$value, names=data$name, 
        col=""#69b3a2"",
        horiz=T, las=1
        )
","<-,data.frame,[,:,sample,seq,barplot,$",barplot
209-the-options-of-barplot,thecode6-1,images/209-the-options-of-barplot/thecode6-1.png,"# create dummy data
data <- data.frame(
  name=letters[1:5],
  value=sample(seq(4,15),5)
)

# Control space:
barplot(height=data$value, names=data$name, col=rgb(0.2,0.4,0.6,0.6), space=c(0.1,0.2,3,1.5,0.3) )
 
# Control width:
barplot(height=data$value, names=data$name, col=rgb(0.2,0.4,0.6,0.6), width=c(0.1,0.2,3,1.5,0.3) )","<-,data.frame,[,:,sample,seq,barplot,$,rgb,c",barplot
209-the-options-of-barplot,thecode6-2,images/209-the-options-of-barplot/thecode6-2.png,,,
209-the-options-of-barplot,thecode7-1,images/209-the-options-of-barplot/thecode7-1.png,"# create dummy data
data <- data.frame(
  name=letters[1:5],
  value=sample(seq(4,15),5)
)

# barplot
barplot( height=data$value, names=data$name , density=c(5,10,20,30,7) , angle=c(0,45,90,11,36) , col=""brown""   )
","<-,data.frame,[,:,sample,seq,barplot,$,c",barplot
21-distribution-plot-using-ggplot2,unnamed-chunk-1-1,images/21-distribution-plot-using-ggplot2/unnamed-chunk-1-1.png,"# Libraries
library(ggplot2)
library(dplyr)

# Load dataset from github
data <- read.table(""https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv"", header=TRUE)

# Make the histogram
data %>%
  filter( price<300 ) %>%
  ggplot( aes(x=price)) +
    geom_density(fill=""#69b3a2"", color=""#e9ecef"", alpha=0.8)","library,<-,read.table,+,%>%,filter,<,ggplot,aes,geom_density",geom_density
21-distribution-plot-using-ggplot2,unnamed-chunk-3-1,images/21-distribution-plot-using-ggplot2/unnamed-chunk-3-1.png,"# Libraries
library(ggplot2)
library(dplyr)
library(hrbrthemes)

# Load dataset from github
data <- read.table(""https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv"", header=TRUE)

# Make the histogram
data %>%
  filter( price<300 ) %>%
  ggplot( aes(x=price)) +
    geom_density(fill=""#69b3a2"", color=""#e9ecef"", alpha=0.8) +
    ggtitle(""Night price distribution of Airbnb appartements"") +
    theme_ipsum()","library,<-,read.table,+,%>%,filter,<,ggplot,aes,geom_density,ggtitle,theme_ipsum",geom_density
210-custom-barplot-layout,thecode-1,images/210-custom-barplot-layout/thecode-1.png,"# create dummy data
data <- data.frame(
  name=letters[1:5],
  value=sample(seq(4,15),5)
)

# The most basic barplot you can do:
barplot(height=data$value, names=data$name, col=""#69b3a2"")","<-,data.frame,[,:,sample,seq,barplot,$",barplot
210-custom-barplot-layout,thecode2-1,images/210-custom-barplot-layout/thecode2-1.png,"# create dummy data
data <- data.frame(
  name=letters[1:5],
  value=sample(seq(4,15),5)
)

# The most basic barplot you can do:
barplot(height=data$value, names=data$name, col=""#69b3a2"", horiz=T , las=1)","<-,data.frame,[,:,sample,seq,barplot,$",barplot
210-custom-barplot-layout,thecode4-1,images/210-custom-barplot-layout/thecode4-1.png,"# create dummy data
data <- data.frame(
  name=letters[1:5],
  value=sample(seq(4,15),5)
)

# Uniform color
barplot(height=data$value, names.arg=c(""group1"",""group2"",""group3"",""group4"",""group5""), col=""#69b3a2"")
","<-,data.frame,[,:,sample,seq,barplot,$,c",barplot
210-custom-barplot-layout,thecode6-1,images/210-custom-barplot-layout/thecode6-1.png,"# create dummy data
data <- data.frame(
  name=letters[1:5],
  value=sample(seq(4,15),5)
)

# Customize labels (left)
barplot(height=data$value, names=data$name, 
        names.arg=c(""group1"",""group2"",""group3"",""group4"",""group5""), 
        font.axis=2, 
        col.axis=""orange"", 
        cex.axis=1.5 
        )

# Customize title (right)
barplot(height=data$value, names=data$name, 
        xlab=""category"", 
        font.lab=2, 
        col.lab=""orange"", 
        cex.lab=2  
        )","<-,data.frame,[,:,sample,seq,barplot,$,c",barplot
210-custom-barplot-layout,thecode6-2,images/210-custom-barplot-layout/thecode6-2.png,,,
210-custom-barplot-layout,thecode5-1,images/210-custom-barplot-layout/thecode5-1.png,"# create dummy data
data <- data.frame(
  name=letters[1:5],
  value=sample(seq(4,15),5)
)

# Increase margin size
par(mar=c(11,4,4,4))

# Uniform color
barplot(height=data$value,
        col=""#69b3a2"",
        names.arg=c(""very long group name 1"",""very long group name 2"",""very long group name 3"",""very long group name 4"",""very long group name 5""), 
        las=2 
)
","<-,data.frame,[,:,sample,seq,par,c,barplot,$",barplot
211-basic-grouped-or-stacked-barplot,thecode-1,images/211-basic-grouped-or-stacked-barplot/thecode-1.png,"# Create data
set.seed(112)
data <- matrix(sample(1:30,15) , nrow=3)
colnames(data) <- c(""A"",""B"",""C"",""D"",""E"")
rownames(data) <- c(""var1"",""var2"",""var3"")
 
# Grouped barplot
barplot(data, 
        col=colors()[c(23,89,12)] , 
        border=""white"", 
        font.axis=2, 
        beside=T, 
        legend=rownames(data), 
        xlab=""group"", 
        font.lab=2)","set.seed,<-,matrix,sample,:,colnames,c,rownames,barplot,[,colors",barplot
211-basic-grouped-or-stacked-barplot,thecode2-1,images/211-basic-grouped-or-stacked-barplot/thecode2-1.png,"# Create data
set.seed(112)
data <- matrix(sample(1:30,15) , nrow=3)
colnames(data) <- c(""A"",""B"",""C"",""D"",""E"")
rownames(data) <- c(""var1"",""var2"",""var3"")


# Get the stacked barplot
barplot(data, 
        col=colors()[c(23,89,12)] , 
        border=""white"", 
        space=0.04, 
        font.axis=2, 
        xlab=""group"")
","set.seed,<-,matrix,sample,:,colnames,c,rownames,barplot,[,colors",barplot
211-basic-grouped-or-stacked-barplot,thecode3-1,images/211-basic-grouped-or-stacked-barplot/thecode3-1.png,"# Create data
set.seed(1124)
data <- matrix(sample(1:30,15) , nrow=3)
colnames(data) <- c(""A"",""B"",""C"",""D"",""E"")
rownames(data) <- c(""var1"",""var2"",""var3"")
 
# create color palette:
library(RColorBrewer)
coul <- brewer.pal(3, ""Pastel2"") 
 
# Transform this data in %
data_percentage <- apply(data, 2, function(x){x*100/sum(x,na.rm=T)})
 
# Make a stacked barplot--> it will be in %!
barplot(data_percentage, col=coul , border=""white"", xlab=""group"")","set.seed,<-,matrix,sample,:,colnames,c,rownames,library,brewer.pal,apply,function,{,/,*,sum,barplot",barplot
215-the-heatmap-function,thecode-1,images/215-the-heatmap-function/thecode-1.png,"# The mtcars dataset:
data <- as.matrix(mtcars)

# Default Heatmap
heatmap(data)","<-,as.matrix,heatmap",heatmap
215-the-heatmap-function,thecode2-1,images/215-the-heatmap-function/thecode2-1.png,"# Use 'scale' to normalize
heatmap(data, scale=""column"")",heatmap,heatmap
215-the-heatmap-function,thecode3-1,images/215-the-heatmap-function/thecode3-1.png,"# No dendrogram nor reordering for neither column or row
heatmap(data, Colv = NA, Rowv = NA, scale=""column"")",heatmap,heatmap
215-the-heatmap-function,thecode4-1,images/215-the-heatmap-function/thecode4-1.png,"# 1: native palette from R
heatmap(data, scale=""column"", col = cm.colors(256))
heatmap(data, scale=""column"", col = terrain.colors(256))
 
# 2: Rcolorbrewer palette
library(RColorBrewer)
coul <- colorRampPalette(brewer.pal(8, ""PiYG""))(25)
heatmap(data, scale=""column"", col = coul)","heatmap,cm.colors,terrain.colors,library,<-,colorRampPalette,brewer.pal",heatmap
215-the-heatmap-function,thecode4-2,images/215-the-heatmap-function/thecode4-2.png,,,
215-the-heatmap-function,thecode5-1,images/215-the-heatmap-function/thecode5-1.png,"# Add classic arguments like main title and axis title
heatmap(data, Colv = NA, Rowv = NA, scale=""column"", col = coul, xlab=""variable"", ylab=""car"", main=""heatmap"")
 
# Custom x and y labels with cexRow and labRow (col respectively)
heatmap(data, scale=""column"", cexRow=1.5, labRow=paste(""new_"", rownames(data),sep=""""), col= colorRampPalette(brewer.pal(8, ""Blues""))(25))","heatmap,paste,rownames,colorRampPalette,brewer.pal",heatmap
215-the-heatmap-function,thecode5-2,images/215-the-heatmap-function/thecode5-2.png,,,
215-the-heatmap-function,thecode6-1,images/215-the-heatmap-function/thecode6-1.png,"# Example: grouping from the first letter:
my_group <- as.numeric(as.factor(substr(rownames(data), 1 , 1)))
colSide <- brewer.pal(9, ""Set1"")[my_group]
colMain <- colorRampPalette(brewer.pal(8, ""Blues""))(25)
heatmap(data, Colv = NA, Rowv = NA, scale=""column"" , RowSideColors=colSide, col=colMain   )","<-,as.numeric,as.factor,substr,rownames,[,brewer.pal,colorRampPalette,heatmap",heatmap
218-basic-barplots-with-ggplot2,thecode-1,images/218-basic-barplots-with-ggplot2/thecode-1.png,"# Load ggplot2
library(ggplot2)

# Create data
data <- data.frame(
  name=c(""A"",""B"",""C"",""D"",""E"") ,  
  value=c(3,12,5,18,45)
  )

# Barplot
ggplot(data, aes(x=name, y=value)) + 
  geom_bar(stat = ""identity"")","library,<-,data.frame,c,+,ggplot,aes,geom_bar",geom_bar
218-basic-barplots-with-ggplot2,thecode2-1,images/218-basic-barplots-with-ggplot2/thecode2-1.png,"# Libraries
library(ggplot2)

# 1: uniform color. Color is for the border, fill is for the inside
ggplot(mtcars, aes(x=as.factor(cyl) )) +
  geom_bar(color=""blue"", fill=rgb(0.1,0.4,0.5,0.7) )
 
# 2: Using Hue
ggplot(mtcars, aes(x=as.factor(cyl), fill=as.factor(cyl) )) + 
  geom_bar( ) +
  scale_fill_hue(c = 40) +
  theme(legend.position=""none"")
 
# 3: Using RColorBrewer
ggplot(mtcars, aes(x=as.factor(cyl), fill=as.factor(cyl) )) + 
  geom_bar( ) +
  scale_fill_brewer(palette = ""Set1"") +
  theme(legend.position=""none"")

 
# 4: Using greyscale:
ggplot(mtcars, aes(x=as.factor(cyl), fill=as.factor(cyl) )) + 
  geom_bar( ) +
  scale_fill_grey(start = 0.25, end = 0.75) +
  theme(legend.position=""none"")

 
# 5: Set manualy
ggplot(mtcars, aes(x=as.factor(cyl), fill=as.factor(cyl) )) +  
  geom_bar( ) +
  scale_fill_manual(values = c(""red"", ""green"", ""blue"") ) +
  theme(legend.position=""none"")","library,+,ggplot,aes,as.factor,geom_bar,rgb,scale_fill_hue,theme,scale_fill_brewer,scale_fill_grey,scale_fill_manual,c",geom_bar
218-basic-barplots-with-ggplot2,thecode2-2,images/218-basic-barplots-with-ggplot2/thecode2-2.png,,,
218-basic-barplots-with-ggplot2,thecode3-1,images/218-basic-barplots-with-ggplot2/thecode3-1.png,"# Load ggplot2
library(ggplot2)

# Create data
data <- data.frame(
  name=c(""A"",""B"",""C"",""D"",""E"") ,  
  value=c(3,12,5,18,45)
  )

# Barplot
ggplot(data, aes(x=name, y=value)) + 
  geom_bar(stat = ""identity"") +
  coord_flip()","library,<-,data.frame,c,+,ggplot,aes,geom_bar,coord_flip",geom_bar
218-basic-barplots-with-ggplot2,thecode4-1,images/218-basic-barplots-with-ggplot2/thecode4-1.png,"# Load ggplot2
library(ggplot2)

# Create data
data <- data.frame(
  name=c(""A"",""B"",""C"",""D"",""E"") ,  
  value=c(3,12,5,18,45)
  )

# Barplot
ggplot(data, aes(x=name, y=value)) + 
  geom_bar(stat = ""identity"", width=0.2) ","library,<-,data.frame,c,+,ggplot,aes,geom_bar",geom_bar
22-order-boxplot-labels-by-names,unnamed-chunk-1-1,images/22-order-boxplot-labels-by-names/unnamed-chunk-1-1.png,"#Creating data 
names <- c(rep(""A"", 20) , rep(""B"", 20) , rep(""C"", 20), rep(""D"", 20))
value <- c( sample(2:5, 20 , replace=T) , sample(6:10, 20 , replace=T), 
       sample(1:7, 20 , replace=T), sample(3:10, 20 , replace=T) )
data <- data.frame(names,value)
 
# Classic boxplot (A-B-C-D order)
# boxplot(data$value ~ data$names)
 
# I reorder the groups order : I change the order of the factor data$names
data$names <- factor(data$names , levels=c(""A"", ""D"", ""C"", ""B""))
 
#The plot is now ordered !
boxplot(data$value ~ data$names , col=rgb(0.3,0.5,0.4,0.6) , ylab=""value"" , 
    xlab=""names in desired order"")","<-,c,rep,sample,:,data.frame,$,factor,boxplot,~,rgb",boxplot
220-basic-ggplot2-histogram,unnamed-chunk-2-1,images/220-basic-ggplot2-histogram/unnamed-chunk-2-1.png,p,,
220-basic-ggplot2-histogram,unnamed-chunk-4-1,images/220-basic-ggplot2-histogram/unnamed-chunk-4-1.png,"p

data %>%
  filter( price<300 ) %>%
  ggplot( aes(x=price)) +
    geom_histogram( binwidth=15, fill=""#69b3a2"", color=""#e9ecef"", alpha=0.9) +
    ggtitle(""Bin size = 15"") +
    theme_ipsum() +
    theme(
      plot.title = element_text(size=15)
    )

data %>%
  filter( price<300 ) %>%
  ggplot( aes(x=price)) +
    geom_histogram( binwidth=30, fill=""#69b3a2"", color=""#e9ecef"", alpha=0.9) +
    ggtitle(""Bin size = 30"") +
    theme_ipsum() +
    theme(
      plot.title = element_text(size=15)
    )

data %>%
  filter( price<300 ) %>%
  ggplot( aes(x=price)) +
    geom_histogram( binwidth=100, fill=""#69b3a2"", color=""#e9ecef"", alpha=0.9) +
    ggtitle(""Bin size = 100"") +
    theme_ipsum() +
    theme(
      plot.title = element_text(size=15)
    )","+,%>%,filter,<,ggplot,aes,geom_histogram,ggtitle,theme_ipsum,theme,element_text",geom_histogram
223-faceting-with-ggplot2,thecode-1,images/223-faceting-with-ggplot2/thecode-1.png,"# Libraries
library(tidyverse)
library(hrbrthemes)
library(babynames)
library(viridis)

# Load dataset from github
data <- read.table(""https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv"", header=T)
data$date <- as.Date(data$date)

# Load dataset from github
don <- babynames %>% 
  filter(name %in% c(""Ashley"", ""Amanda"", ""Mary"", ""Deborah"",   ""Dorothy"", ""Betty"", ""Helen"", ""Jennifer"", ""Shirley"")) %>%
  filter(sex==""F"")

# Plot
don %>%
  ggplot( aes(x=year, y=n, group=name, fill=name)) +
    geom_area() +
    scale_fill_viridis(discrete = TRUE) +
    theme(legend.position=""none"") +
    ggtitle(""Popularity of American names in the previous 30 years"") +
    theme_ipsum() +
    theme(
      legend.position=""none"",
      panel.spacing = unit(0, ""lines""),
      strip.text.x = element_text(size = 8),
      plot.title = element_text(size=13)
    ) +
    facet_wrap(~name, scale=""free_y"")","library,<-,read.table,$,as.Date,%>%,filter,%in%,c,==,+,ggplot,aes,geom_area,scale_fill_viridis,theme,ggtitle,theme_ipsum,unit,element_text,facet_wrap,~","geom_area,facet_wrap"
223-faceting-with-ggplot2,thecode3a-1,images/223-faceting-with-ggplot2/thecode3a-1.png,"# library & datset
library(ggplot2)
head(mtcars)
 
# Split by columns (default)
ggplot( mtcars , aes(x=mpg, y=wt, color=as.factor(cyl) )) + 
  geom_point(size=3) +  
  facet_wrap(~cyl) +
  theme(legend.position=""none"")","library,head,+,ggplot,aes,as.factor,geom_point,facet_wrap,~,theme","geom_point,facet_wrap"
223-faceting-with-ggplot2,thecode3b-1,images/223-faceting-with-ggplot2/thecode3b-1.png,"# Split by row
ggplot( mtcars , aes(x=mpg, y=wt, color=as.factor(cyl)  )) + 
  geom_point(size=3) +  
  facet_wrap(~cyl , dir=""v"")  +
  theme(legend.position=""none"")","+,ggplot,aes,as.factor,geom_point,facet_wrap,~,theme","geom_point,facet_wrap"
223-faceting-with-ggplot2,thecode3c-1,images/223-faceting-with-ggplot2/thecode3c-1.png,"# Add label at the bottom
ggplot( mtcars , aes(x=mpg, y=wt, color=as.factor(cyl)  )) + 
  geom_point(size=3) +  
  facet_wrap(~cyl , strip.position=""bottom"") +
  theme(legend.position=""none"")","+,ggplot,aes,as.factor,geom_point,facet_wrap,~,theme","geom_point,facet_wrap"
223-faceting-with-ggplot2,thecode3d-1,images/223-faceting-with-ggplot2/thecode3d-1.png,"# Use same scales for all
ggplot( mtcars , aes(x=mpg, y=wt, color=as.factor(cyl)  )) + 
  geom_point(size=3) +  
  facet_wrap(~cyl , scales=""free"" ) +
  theme(legend.position=""none"")","+,ggplot,aes,as.factor,geom_point,facet_wrap,~,theme","geom_point,facet_wrap"
223-faceting-with-ggplot2,thecode5-1,images/223-faceting-with-ggplot2/thecode5-1.png,"# Faceted ggplot2 using facet_grid():
ggplot( mtcars , aes(x=mpg, y=wt )) + 
  geom_point() +
  facet_grid( cyl ~ gear)","+,ggplot,aes,geom_point,facet_grid,~","geom_point,facet_grid"
224-basic-circular-plot,thecode-1,images/224-basic-circular-plot/thecode-1.png,"# Upload library
library(circlize)
 
# Create data
data = data.frame(
    factor = sample(letters[1:8], 1000, replace = TRUE),
    x = rnorm(1000), 
    y = runif(1000)
    )
 
# Step1: Initialise the chart giving factor and x-axis.
circos.initialize( factors=data$factor, x=data$x )
 
# Step 2: Build the regions. 
circos.trackPlotRegion(factors = data$factor, y = data$y, panel.fun = function(x, y) {
    circos.axis()
    })
 
# Step 3: Add points
circos.trackPoints(data$factor, data$x, data$y, col = ""blue"", pch = 16, cex = 0.5) ","library,=,data.frame,sample,[,:,rnorm,runif,circos.initialize,$,circos.trackPlotRegion,function,{,circos.axis,circos.trackPoints",
225-circular-plot-custom-a-track,thecode-1,images/225-circular-plot-custom-a-track/thecode-1.png,"# Upload library
library(circlize)

# Create data
data = data.frame(
    factor = sample(letters[1:8], 1000, replace = TRUE),
    x = rnorm(1000),
    y = runif(1000)
    )

# Step1: Initialise the chart giving factor and x-axis.
circos.initialize( factors=data$factor, x=data$x )

# Step 2: Build the regions.
circos.trackPlotRegion(factors = data$factor, y = data$y, panel.fun = function(x, y) {
    circos.axis()
    })

# Step 3: Add points
circos.trackPoints(data$factor, data$x, data$y)","library,=,data.frame,sample,[,:,rnorm,runif,circos.initialize,$,circos.trackPlotRegion,function,{,circos.axis,circos.trackPoints",
225-circular-plot-custom-a-track,thecode2-1,images/225-circular-plot-custom-a-track/thecode2-1.png,"# Upload library
library(circlize)

# Create data
data = data.frame(
    factor = sample(letters[1:8], 1000, replace = TRUE),
    x = rnorm(1000),
    y = runif(1000)
    )

# General Customization:
par(
  mar = c(1, 1, 1, 1),           # Margin around chart
  bg = rgb(0.4,0.1,0.7,0.05)     # background color
) 
circos.par(""track.height"" = 0.6) # track hight, 0.6 = 60% of total height

# Step1: Initialise the chart giving factor and x-axis.
circos.initialize( factors=data$factor, x=data$x )

# Step2: Build regions. 
circos.trackPlotRegion(factors = data$factor, y = data$y, panel.fun = function(x, y) {
    circos.axis(
        h=""top"",                   # x axis on the inner or outer part of the track?
        labels=TRUE,               # show the labels of the axis?
        major.tick=TRUE,           # show ticks?
        labels.cex=0.5,            # labels size (higher=bigger)
        labels.font=1,             # labels font (1, 2, 3 , 4)
        direction=""outside"",       # ticks point to the outside or inside of the circle ?
        minor.ticks=4,             # Number of minor (=small) ticks
        major.tick.percentage=0.1, # The size of the ticks in percentage of the track height
        lwd=2                      # thickness of ticks and x axis.
        )
    })

# Step 3: Add points
circos.trackPoints(data$factor, data$x, data$y, col = ""#69b3a2"", pch = 16, cex = 0.5)","library,=,data.frame,sample,[,:,rnorm,runif,par,c,rgb,circos.par,circos.initialize,$,circos.trackPlotRegion,function,{,circos.axis,circos.trackPoints",
226-plot-types-for-circular-plot,thecode-1,images/226-plot-types-for-circular-plot/thecode-1.png,"# Upload library
library(circlize)
circos.par(""track.height"" = 0.4)

# Create data
data = data.frame(
    factor = sample(letters[1:8], 1000, replace = TRUE),
    x = rnorm(1000),
    y = runif(1000)
    )

# Step1: Initialise the chart giving factor and x-axis.
circos.initialize( factors=data$factor, x=data$x )

# Step 2: Build the regions.
circos.trackPlotRegion(factors = data$factor, y = data$y, panel.fun = function(x, y) {
    circos.axis()
    })

# Step 3: Add points
circos.trackPoints(data$factor, data$x, data$y, col=""#69b3a2"")","library,circos.par,=,data.frame,sample,[,:,rnorm,runif,circos.initialize,$,circos.trackPlotRegion,function,{,circos.axis,circos.trackPoints",
226-plot-types-for-circular-plot,thecode2-1,images/226-plot-types-for-circular-plot/thecode2-1.png,"# Upload library
library(circlize)
circos.par(""track.height"" = 0.4)

# Create data
data = data.frame(
    factor = sample(letters[1:8], 1000, replace = TRUE),
    x = rnorm(1000),
    y = runif(1000)
    )

# Step1: Initialise the chart giving factor and x-axis.
circos.initialize( factors=data$factor, x=data$x )

# Step 2: Build the regions.
circos.trackPlotRegion(factors = data$factor, y = data$y, panel.fun = function(x, y) {
    circos.axis()
    })

# Step 3: Add points
circos.trackLines(data$factor, data$x[order(data$x)], data$y[order(data$x)], col = rgb(0.1,0.5,0.8,0.3), lwd=2)
","library,circos.par,=,data.frame,sample,[,:,rnorm,runif,circos.initialize,$,circos.trackPlotRegion,function,{,circos.axis,circos.trackLines,order,rgb",
226-plot-types-for-circular-plot,thecode3-1,images/226-plot-types-for-circular-plot/thecode3-1.png,"# Upload library
library(circlize)
circos.par(""track.height"" = 0.4)

# Create data
data = data.frame(
    factor = sample(letters[1:8], 1000, replace = TRUE),
    x = rnorm(1000),
    y = runif(1000)
    )

# Step1: Initialise the chart giving factor and x-axis.
circos.initialize( factors=data$factor, x=data$x )

# Step 2: Build the regions.
circos.trackPlotRegion(factors = data$factor, y = data$y, panel.fun = function(x, y) {
    circos.axis()
    })

# Step 3: Add points
circos.trackLines(data$factor, data$x[order(data$x)], data$y[order(data$x)], col = rgb(0.1,0.5,0.8,0.3), lwd=2, type=""h"")","library,circos.par,=,data.frame,sample,[,:,rnorm,runif,circos.initialize,$,circos.trackPlotRegion,function,{,circos.axis,circos.trackLines,order,rgb",
226-plot-types-for-circular-plot,thecode4-1,images/226-plot-types-for-circular-plot/thecode4-1.png,"# Upload library
library(circlize)
circos.par(""track.height"" = 0.4)

# Create data
data = data.frame(
    factor = sample(letters[1:8], 1000, replace = TRUE),
    x = rnorm(1000),
    y = runif(1000)
    )

# Step1: Initialise the chart giving factor and x-axis.
circos.initialize( factors=data$factor, x=data$x )

circos.trackHist(data$factor, data$x, bg.col = ""white"", col = ""#69b3a2"")","library,circos.par,=,data.frame,sample,[,:,rnorm,runif,circos.initialize,$,circos.trackHist",
227-add-several-tracks,thecode-1,images/227-add-several-tracks/thecode-1.png,"#library
library(circlize)
circos.clear()

#Create data
data = data.frame(
    factor = sample(letters[1:8], 1000, replace = TRUE),
    x = rnorm(1000), 
    y = runif(1000)
    )
 
#Initialize the plot.
par(mar = c(1, 1, 1, 1) ) 
circos.initialize(factors = data$factor, x = data$x )
 

# Build the regions of track #1 
circos.trackPlotRegion(factors = data$factor, y=data$y, panel.fun = function(x, y) {
    circos.axis(labels.cex=0.5, labels.font=1, lwd=0.8)
    })
# --> Add a scatterplot on it:
circos.trackPoints(data$factor, data$x, data$y, col = rgb(0.1,0.5,0.8,0.3), pch=20)
 
 
# Build the regions of track #2:
circlize::circos.trackPlotRegion(factors = data$factor, y=data$y, panel.fun = function(x, y) {
    circos.axis(labels=FALSE, major.tick=FALSE)
    })
# --> Add a scatterplot on it
circos.trackPoints(data$factor, data$x, data$y, col = rgb(0.9,0.5,0.8,0.3), pch=20, cex=2)
 
 
# Add track #3 --> don't forget you can custom the height of tracks!
circos.par(""track.height"" = 0.4)
circos.trackPlotRegion(factors = data$factor, y=data$y, panel.fun = function(x, y) {
    circos.axis(labels=FALSE, major.tick=FALSE)
    })
circos.trackLines(data$factor, data$x, data$y, col = rgb(0.9,0.5,0.1,0.3), pch=20, cex=2, type=""h"")
# and continue as long as needed!","library,circos.clear,=,data.frame,sample,[,:,rnorm,runif,par,c,circos.initialize,$,circos.trackPlotRegion,function,{,circos.axis,circos.trackPoints,rgb,circos.par,circos.trackLines",
228-add-links-between-regions,thecode-1,images/228-add-links-between-regions/thecode-1.png,"# library
library(circlize)
 
# Create data
set.seed(123)
data = data.frame(
    factor = sample(letters[1:8], 1000, replace = TRUE),
    x = rnorm(1000), 
    y = runif(1000)
    )
 
# Initialize the plot.
par(mar = c(1, 1, 1, 1) ) 
circos.initialize(factors = data$factor, x = data$x )
 
# Build the regions of track #1
circos.trackPlotRegion(factors = data$factor, y=data$y , bg.col = rgb(0.1,0.1,seq(0,1,0.1),0.4) , bg.border = NA)
 
# Add a link between a point and another
circos.link(""a"", 0, ""b"", 0, h = 0.4)
 
# Add a link between a point and a zone
circos.link(""e"", 0, ""g"", c(-1,1), col = ""green"", lwd = 2, lty = 2, border=""black"" )
 
# Add a link between a zone and another
circos.link(""c"", c(-0.5, 0.5), ""d"", c(-0.5,0.5), col = ""red"", border = ""blue"", h = 0.2)","library,set.seed,=,data.frame,sample,[,:,rnorm,runif,par,c,circos.initialize,$,circos.trackPlotRegion,rgb,seq,circos.link,-",
229-several-circular-plots-in-a-figure,thecode-1,images/229-several-circular-plots-in-a-figure/thecode-1.png,"# library
library(circlize)
# Arrange the layout
layout(matrix(1:9, 3, 3)) 
 
# A loop to create 9 circular plots
for(i in 1:9) {
    par(mar = c(0.5, 0.5, 0.5, 0.5), bg=rgb(1,1,1,0.1) )
    factors = 1:8
    circos.par(cell.padding = c(0, 0, 0, 0)) 
    circos.initialize(factors, xlim = c(0, 1)) 
    circos.trackPlotRegion(ylim = c(0, 1), track.height = 0.05, bg.col = rand_color(8), bg.border = NA ) 
 
    # add links
    for(i in 1:20) {
        se = sample(1:8, 2)
        circos.link(se[1], runif(2), se[2], runif(2), col = rand_color(1, transparency = 0.4)) 
        
    }
    circos.clear()
}","library,layout,matrix,:,for,{,par,c,rgb,=,circos.par,circos.initialize,circos.trackPlotRegion,rand_color,sample,circos.link,[,runif,circos.clear",
23-add-colors-to-specific-groups-of-a-boxplot,unnamed-chunk-1-1,images/23-add-colors-to-specific-groups-of-a-boxplot/unnamed-chunk-1-1.png,"#Create data
names <- c(rep(""Maestro"", 20) , rep(""Presto"", 20) , 
      rep(""Nerak"", 20), rep(""Eskimo"", 20), rep(""Nairobi"", 20), rep(""Artiko"", 20))
value <- c(  sample(3:10, 20 , replace=T) , sample(2:5, 20 , replace=T) , 
      sample(6:10, 20 , replace=T), sample(6:10, 20 , replace=T) , 
      sample(1:7, 20 , replace=T), sample(3:10, 20 , replace=T) )
data <- data.frame(names,value)

# Prepare a vector of colors with specific color for Nairobi and Eskimo
myColors <- ifelse(levels(data$names)==""Nairobi"" , rgb(0.1,0.1,0.7,0.5) , 
              ifelse(levels(data$names)==""Eskimo"", rgb(0.8,0.1,0.3,0.6),
              ""grey90"" ) )

# Build the plot
boxplot(data$value ~ data$names , 
    col=myColors , 
    ylab=""disease"" , xlab=""- variety -"")
 
# Add a legend
legend(""bottomleft"", legend = c(""Positiv control"",""Negativ control"") , 
    col = c(rgb(0.1,0.1,0.7,0.5) , rgb(0.8,0.1,0.3,0.6)) , bty = ""n"", pch=20 , pt.cex = 3, cex = 1, horiz = FALSE, inset = c(0.03, 0.1))
","<-,c,rep,sample,:,data.frame,ifelse,==,levels,$,rgb,boxplot,~,legend",boxplot
230-draw-part-of-the-circular-plot-only,thecode-1,images/230-draw-part-of-the-circular-plot-only/thecode-1.png,"# library
library(circlize)
 
# Create data
factors <- letters[1:4]
x1 <- runif(100)
y1 <- runif(100)
 
# general parameter of the plot. 
# With canvas.xlim and canvas.ylim we kind of ""zoom on a part of the plot:
par(mar = c(1, 2, 0.1, 0.1) )
circos.par(""track.height"" = 0.7, ""canvas.xlim"" = c(0, 1), ""canvas.ylim"" = c(0, 1), ""gap.degree"" = 0, ""clock.wise"" = FALSE)
 
# Make the usual plot, but with no border
circos.initialize(factors = factors, xlim = c(0, 1)) 
circos.trackPlotRegion(factors = factors, ylim = c(0, 1), bg.border = NA ) 
 
# Finally we plot only the firs sector, so let's change its border to ""black"" to see it
circos.updatePlotRegion(sector.index = ""a"", bg.border = ""grey"" , bg.lwd=0.2)
 
# Now we can add a plot in this section! You can repeat these steps to add several regions
circos.lines(x1, y1, pch = 16, cex = 0.5, type=""h"" , col=""#69b3a2"" , lwd=3)
 
# Add axis
circos.axis(h=""bottom"" , labels.cex=0.4, direction = ""inside"" )
 
#clear
circos.clear()
","library,<-,[,:,runif,par,c,circos.par,circos.initialize,circos.trackPlotRegion,circos.updatePlotRegion,circos.lines,circos.axis,circos.clear",
233-add-annotations-on-ggplot2-chart,thecodeA-1,images/233-add-annotations-on-ggplot2-chart/thecodeA-1.png,"# library
library(ggplot2)

# basic graph
p <- ggplot(mtcars, aes(x = wt, y = mpg)) + 
  geom_point()
 
# a data frame with all the annotation info
annotation <- data.frame(
   x = c(2,4.5),
   y = c(20,25),
   label = c(""label 1"", ""label 2"")
)

# Add text
p + geom_text(data=annotation, aes( x=x, y=y, label=label),                 , 
           color=""orange"", 
           size=7 , angle=45, fontface=""bold"" )

# Note: possible to shorten with annotate:
# p +
#  annotate(""text"", x = c(2,4.5), y = c(20,25), 
#           label = c(""label 1"", ""label 2"") , color=""orange"", 
#           size=7 , angle=45, fontface=""bold"")
","library,<-,+,ggplot,aes,geom_point,data.frame,c,geom_text","geom_point,geom_text"
233-add-annotations-on-ggplot2-chart,thecodeB-1,images/233-add-annotations-on-ggplot2-chart/thecodeB-1.png,"# Right chart: using labels
p + geom_label(data=annotation, aes( x=x, y=y, label=label),                 , 
           color=""orange"", 
           size=7 , angle=45, fontface=""bold"" )","+,geom_label,aes",geom_label
233-add-annotations-on-ggplot2-chart,thecode1A-1,images/233-add-annotations-on-ggplot2-chart/thecode1A-1.png,"# Add rectangles
p + annotate(""rect"", xmin=c(2,4), xmax=c(3,5), ymin=c(20,10) , ymax=c(30,20), alpha=0.2, color=""blue"", fill=""blue"")","+,annotate,c",
233-add-annotations-on-ggplot2-chart,thecode1B-1,images/233-add-annotations-on-ggplot2-chart/thecode1B-1.png,"# Add segments
p + annotate(""segment"", x = 1, xend = 3, y = 25, yend = 15, colour = ""purple"", size=3, alpha=0.6)","+,annotate",
233-add-annotations-on-ggplot2-chart,thecode1C-1,images/233-add-annotations-on-ggplot2-chart/thecode1C-1.png,"# Add arrow
p + annotate(""segment"", x = 2, xend = 4, y = 15, yend = 25, colour = ""pink"", size=3, alpha=0.6, arrow=arrow())","+,annotate,arrow",arrow
233-add-annotations-on-ggplot2-chart,thecode2-1,images/233-add-annotations-on-ggplot2-chart/thecode2-1.png,"p + 
  # horizontal
  geom_hline(yintercept=25, color=""orange"", size=1) + 
  # vertical
  geom_vline(xintercept=3, color=""orange"", size=1)","+,geom_hline,geom_vline","geom_hline,geom_vline"
233-add-annotations-on-ggplot2-chart,thecode3-1,images/233-add-annotations-on-ggplot2-chart/thecode3-1.png,"# Add point and range
p + annotate(""pointrange"", x = 3.5, y = 20, ymin = 12, ymax = 28,colour = ""orange"", size = 1.5, alpha=0.4)","+,annotate",
234-a-very-basic-treemap,thecode-1,images/234-a-very-basic-treemap/thecode-1.png,"# library
library(treemap)
 
# Create data
group <- c(""group-1"",""group-2"",""group-3"")
value <- c(13,5,22)
data <- data.frame(group,value)
 
# treemap
treemap(data,
            index=""group"",
            vSize=""value"",
            type=""index""
            )","library,<-,c,data.frame,treemap",treemap
235-treemap-with-subgroups,thecode-1,images/235-treemap-with-subgroups/thecode-1.png,"# library
library(treemap)
 
# Build Dataset
group <- c(rep(""group-1"",4),rep(""group-2"",2),rep(""group-3"",3))
subgroup <- paste(""subgroup"" , c(1,2,3,4,1,2,1,2,3), sep=""-"")
value <- c(13,5,22,12,11,7,3,1,23)
data <- data.frame(group,subgroup,value)
 
# treemap
treemap(data,
            index=c(""group"",""subgroup""),
            vSize=""value"",
            type=""index""
            ) ","library,<-,c,rep,paste,data.frame,treemap",treemap
236-custom-your-treemap,thecode-1,images/236-custom-your-treemap/thecode-1.png,"# library
library(treemap)
 
# Create data
group <- c(rep(""group-1"",4),rep(""group-2"",2),rep(""group-3"",3))
subgroup <- paste(""subgroup"" , c(1,2,3,4,1,2,1,2,3), sep=""-"")
value <- c(13,5,22,12,11,7,3,1,23)
data <- data.frame(group,subgroup,value)
 
# Custom labels:
treemap(data, index=c(""group"",""subgroup""),     vSize=""value"", type=""index"",
 
    fontsize.labels=c(15,12),                # size of labels. Give the size per level of aggregation: size for group, size for subgroup, sub-subgroups...
    fontcolor.labels=c(""white"",""orange""),    # Color of labels
    fontface.labels=c(2,1),                  # Font of labels: 1,2,3,4 for normal, bold, italic, bold-italic...
    bg.labels=c(""transparent""),              # Background color of labels
    align.labels=list(
        c(""center"", ""center""), 
        c(""right"", ""bottom"")
        ),                                   # Where to place labels in the rectangle?
    overlap.labels=0.5,                      # number between 0 and 1 that determines the tolerance of the overlap between labels. 0 means that labels of lower levels are not printed if higher level labels overlap, 1  means that labels are always printed. In-between values, for instance the default value .5, means that lower level labels are printed if other labels do not overlap with more than .5  times their area size.
    inflate.labels=F,                        # If true, labels are bigger when rectangle is bigger.
 
)","library,<-,c,rep,paste,data.frame,treemap,list",treemap
236-custom-your-treemap,thecode2-1,images/236-custom-your-treemap/thecode2-1.png,"# Custom borders:
treemap(data, index=c(""group"",""subgroup""), vSize=""value"", type=""index"",
 
    border.col=c(""black"",""white""),             # Color of borders of groups, of subgroups, of subsubgroups ....
    border.lwds=c(7,2)                         # Width of colors
        
    )","treemap,c",treemap
236-custom-your-treemap,thecode3-1,images/236-custom-your-treemap/thecode3-1.png,"# General features:
treemap(data, index=c(""group"",""subgroup""), vSize=""value"", 
 
    type=""index"",                            # How you color the treemap. type help(treemap) for more info
    palette = ""Set1"",                        # Select your color palette from the RColorBrewer presets or make your own.
    title=""My Treemap"",                      # Customize your title
    fontsize.title=12,                       # Size of the title
 
) ","treemap,c",treemap
238-custom-layout-axis-ggplot2,thecode-1,images/238-custom-layout-axis-ggplot2/thecode-1.png,"# Load ggplot2
library(ggplot2)

# Very basic chart
basic <- ggplot( mtcars , aes(x=mpg, y=wt)) + 
  geom_point()
basic","library,<-,+,ggplot,aes,geom_point",geom_point
238-custom-layout-axis-ggplot2,thecode2-1,images/238-custom-layout-axis-ggplot2/thecode2-1.png,"basic+
    xlab(""mpg value"") + 
    xlim(0,50)","+,xlab,xlim",
238-custom-layout-axis-ggplot2,thecode3a-1,images/238-custom-layout-axis-ggplot2/thecode3a-1.png,"# Left -> both axis are modified
basic + theme(axis.title = element_text( angle = 90, color=""red"", size=15, face=3)) # face = title location","+,theme,element_text",
238-custom-layout-axis-ggplot2,thecode3b-1,images/238-custom-layout-axis-ggplot2/thecode3b-1.png,"# Right -> only the x axis is modified
basic + theme(axis.title.x = element_text( angle = 90, color=""red"", size=15, face=3))","+,theme,element_text",
238-custom-layout-axis-ggplot2,thecode4-1,images/238-custom-layout-axis-ggplot2/thecode4-1.png,"basic + 
  theme(axis.text = element_text( 
    angle = 90, 
    color=""blue"", 
    size=15, 
    face=3)
  )","+,theme,element_text",
238-custom-layout-axis-ggplot2,thecode5a-1,images/238-custom-layout-axis-ggplot2/thecode5a-1.png,"# chart 1: ticks
basic + theme(
   axis.ticks = element_line(size = 2, color=""red"") , 
   axis.ticks.length = unit(.5, ""cm"")
)","+,theme,element_line,unit",
238-custom-layout-axis-ggplot2,thecode5b-1,images/238-custom-layout-axis-ggplot2/thecode5b-1.png,"# chart 2: axis lines
basic + theme(axis.line = element_line(size = 3, colour = ""green"", linetype=2))","+,theme,element_line",
238-custom-layout-axis-ggplot2,thecode5c-1,images/238-custom-layout-axis-ggplot2/thecode5c-1.png,"# chart 3: combination
ggplot( mtcars , aes(x=mpg, y=wt)) + geom_point() +
    theme(
        axis.title = element_text( color=""red"", size=15, face=2),
        axis.line = element_line(size = 3, colour = ""green"", linetype=2),
        axis.text = element_text( angle = 90, color=""blue"", size=15, face=2)
        )","+,ggplot,aes,geom_point,theme,element_text,element_line",geom_point
239-custom-layout-legend-ggplot2,thecode-1,images/239-custom-layout-legend-ggplot2/thecode-1.png,"# Load ggplot2
library(ggplot2)

# Very basic chart
basic <- ggplot(mtcars, aes(wt, mpg, colour = factor(cyl), shape = factor(vs) )) +
       geom_point()
basic","library,<-,+,ggplot,aes,factor,geom_point",geom_point
239-custom-layout-legend-ggplot2,thecode2-1,images/239-custom-layout-legend-ggplot2/thecode2-1.png,"basic+
  labs(
         colour = ""name1"",
         shape = ""name2""
        )","+,labs",
239-custom-layout-legend-ggplot2,thecode3a-1,images/239-custom-layout-legend-ggplot2/thecode3a-1.png,"# Left -> get rid of one part of the legend
basic + guides(shape=FALSE)","+,guides",
239-custom-layout-legend-ggplot2,thecode3b-1,images/239-custom-layout-legend-ggplot2/thecode3b-1.png,"# Right -> only the x axis is modified
basic + theme(legend.position = ""none"")","+,theme",
239-custom-layout-legend-ggplot2,thecode4a-1,images/239-custom-layout-legend-ggplot2/thecode4a-1.png,"# Left -> legend around the plot
basic + theme(legend.position = ""bottom"")","+,theme",
239-custom-layout-legend-ggplot2,thecode4b-1,images/239-custom-layout-legend-ggplot2/thecode4b-1.png,"# Right -> inside the plot area
basic + theme(
    legend.position = c(.95, .95),
    legend.justification = c(""right"", ""top""),
    legend.box.just = ""right"",
    legend.margin = margin(6, 6, 6, 6)
    )","+,theme,c,margin",
239-custom-layout-legend-ggplot2,thecode5a-1,images/239-custom-layout-legend-ggplot2/thecode5a-1.png,"# custom box around legend
basic + theme(
    legend.box.background = element_rect(color=""red"", size=2),
    legend.box.margin = margin(116, 6, 6, 6)
)","+,theme,element_rect,margin",
239-custom-layout-legend-ggplot2,thecode5b-1,images/239-custom-layout-legend-ggplot2/thecode5b-1.png,"# custom the key
basic + theme(legend.key = element_rect(fill = ""white"", colour = ""black""))","+,theme,element_rect",
239-custom-layout-legend-ggplot2,thecode5c-1,images/239-custom-layout-legend-ggplot2/thecode5c-1.png,"# custom the text
basic + theme(legend.text = element_text(size = 8, colour = ""red""))","+,theme,element_text",
239-custom-layout-legend-ggplot2,thecode5d-1,images/239-custom-layout-legend-ggplot2/thecode5d-1.png,"# custom the title
basic + theme(legend.title = element_text(face = ""bold""))","+,theme,element_text",
24-boxplot-with-variable-width,unnamed-chunk-1-1,images/24-boxplot-with-variable-width/unnamed-chunk-1-1.png,"# Dummy data
names <- c(rep(""A"", 20) , rep(""B"", 8) , rep(""C"", 30), rep(""D"", 80))
value <- c( sample(2:5, 20 , replace=T) , sample(4:10, 8 , replace=T), 
       sample(1:7, 30 , replace=T), sample(3:8, 80 , replace=T) )
data <- data.frame(names,value)
 
# Calculate proportion of each level
proportion <- table(data$names)/nrow(data)
 
#Draw the boxplot, with the width proportionnal to the occurence !
boxplot(data$value ~ data$names , width=proportion , col=c(""orange"" , ""seagreen""))","<-,c,rep,sample,:,data.frame,/,table,$,nrow,boxplot,~",boxplot
240-custom-layout-background-ggplot2,thecode-1,images/240-custom-layout-background-ggplot2/thecode-1.png,"# Load ggplot2
library(ggplot2)

# Very basic chart
basic <- ggplot( mtcars , aes(x=mpg, y=wt)) +
  geom_point()
basic","library,<-,+,ggplot,aes,geom_point",geom_point
240-custom-layout-background-ggplot2,thecode2-1,images/240-custom-layout-background-ggplot2/thecode2-1.png,"basic + theme(
    plot.background = element_rect(fill = ""green""), 
    panel.background = element_rect(fill = ""red"", colour=""blue"")
    )","+,theme,element_rect",
240-custom-layout-background-ggplot2,thecode3a-1,images/240-custom-layout-background-ggplot2/thecode3a-1.png,"# Modify for both axis
basic + theme(
    panel.grid.major = element_line(colour = ""red"", linetype = ""dotted""),
    panel.grid.minor = element_line(colour = ""blue"", size = 2)
    )","+,theme,element_line",
240-custom-layout-background-ggplot2,thecode3b-1,images/240-custom-layout-background-ggplot2/thecode3b-1.png,"# Modify y axis only (remove)
basic + theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank()
)","+,theme,element_blank",
241-custom-layout-strip-ggplot2,thecodeA-1,images/241-custom-layout-strip-ggplot2/thecodeA-1.png,"
library(ggplot2)
 
# basic chart
basic=ggplot(mtcars, aes(wt, mpg)) +
    geom_point() +
    facet_wrap(~ cyl)
basic
 ","library,=,+,ggplot,aes,geom_point,facet_wrap,~","geom_point,facet_wrap"
241-custom-layout-strip-ggplot2,thecodeB-1,images/241-custom-layout-strip-ggplot2/thecodeB-1.png,"
# Change background
basic + theme(strip.background = element_rect(colour = ""red"", fill = alpha(""blue"",0.2) ))
","+,theme,element_rect,alpha",
241-custom-layout-strip-ggplot2,thecodeC-1,images/241-custom-layout-strip-ggplot2/thecodeC-1.png,"
# Change the text 
basic + theme(strip.text.x = element_text(colour = ""red"", face = ""bold"", size=10, angle=30))
 
","+,theme,element_text",
241-custom-layout-strip-ggplot2,thecodeD-1,images/241-custom-layout-strip-ggplot2/thecodeD-1.png,"
# Change the space between parts:
basic + theme(panel.spacing = unit(4, ""lines""))","+,theme,unit",
247-network-chart-layouts,thecode8-1,images/247-network-chart-layouts/thecode8-1.png,"# library
library(igraph)
 
# Create data
data <- matrix(sample(0:1, 400, replace=TRUE, prob=c(0.8,0.2)), nrow=20)
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
 
# When ploting, we can use different layouts:
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(network, layout=layout.sphere, main=""sphere"")
plot(network, layout=layout.circle, main=""circle"")
plot(network, layout=layout.random, main=""random"")
plot(network, layout=layout.fruchterman.reingold, main=""fruchterman.reingold"")
 
# See the complete list with
# help(layout)","library,<-,matrix,sample,:,c,graph_from_adjacency_matrix,par,plot",
248-igraph-plotting-parameters,thecode1-1,images/248-igraph-plotting-parameters/thecode1-1.png,"# Library
library(igraph)

# Create data
set.seed(1)
data <- matrix(sample(0:1, 100, replace=TRUE, prob=c(0.8,0.2)), nc=10)
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )

# Default network
par(mar=c(0,0,0,0))
plot(network)","library,set.seed,<-,matrix,sample,:,c,graph_from_adjacency_matrix,par,plot",
248-igraph-plotting-parameters,thecode2-1,images/248-igraph-plotting-parameters/thecode2-1.png,"plot(network,
    vertex.color = rgb(0.8,0.2,0.2,0.9),           # Node color
    vertex.frame.color = ""Forestgreen"",            # Node border color
    vertex.shape=c(""circle"",""square""),             # One of “none”, “circle”, “square”, “csquare”, “rectangle” “crectangle”, “vrectangle”, “pie”, “raster”, or “sphere”
    vertex.size=c(15:24),                          # Size of the node (default is 15)
    vertex.size2=NA,                               # The second size of the node (e.g. for a rectangle)
    )","plot,rgb,c,:",
248-igraph-plotting-parameters,thecode3-1,images/248-igraph-plotting-parameters/thecode3-1.png,"plot(network,
    vertex.label=LETTERS[1:10],                    # Character vector used to label the nodes
    vertex.label.color=c(""red"",""blue""),
    vertex.label.family=""Times"",                   # Font family of the label (e.g.“Times”, “Helvetica”)
    vertex.label.font=c(1,2,3,4),                  # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
    vertex.label.cex=c(0.5,1,1.5),                 # Font size (multiplication factor, device-dependent)
    vertex.label.dist=0,                           # Distance between the label and the vertex
    vertex.label.degree=0 ,                        # The position of the label in relation to the vertex (use pi)
    )","plot,[,:,c",
248-igraph-plotting-parameters,thecode4-1,images/248-igraph-plotting-parameters/thecode4-1.png,"plot(network,
    edge.color=rep(c(""red"",""pink""),5),           # Edge color
    edge.width=seq(1,10),                        # Edge width, defaults to 1
    edge.arrow.size=1,                           # Arrow size, defaults to 1
    edge.arrow.width=1,                          # Arrow width, defaults to 1
    edge.lty=c(""solid"")                           # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
    #edge.curved=c(rep(0,5), rep(1,5))            # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
    )","plot,rep,c,seq",
248-igraph-plotting-parameters,thecode5-1,images/248-igraph-plotting-parameters/thecode5-1.png,"par(bg=""black"")

plot(network, 
    
    # === vertex
    vertex.color = rgb(0.8,0.4,0.3,0.8),          # Node color
    vertex.frame.color = ""white"",                 # Node border color
    vertex.shape=""circle"",                        # One of “none”, “circle”, “square”, “csquare”, “rectangle” “crectangle”, “vrectangle”, “pie”, “raster”, or “sphere”
    vertex.size=14,                               # Size of the node (default is 15)
    vertex.size2=NA,                              # The second size of the node (e.g. for a rectangle)
    
    # === vertex label
    vertex.label=LETTERS[1:10],                   # Character vector used to label the nodes
    vertex.label.color=""white"",
    vertex.label.family=""Times"",                  # Font family of the label (e.g.“Times”, “Helvetica”)
    vertex.label.font=2,                          # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
    vertex.label.cex=1,                           # Font size (multiplication factor, device-dependent)
    vertex.label.dist=0,                          # Distance between the label and the vertex
    vertex.label.degree=0 ,                       # The position of the label in relation to the vertex (use pi)
    
    # === Edge
    edge.color=""white"",                           # Edge color
    edge.width=4,                                 # Edge width, defaults to 1
    edge.arrow.size=1,                            # Arrow size, defaults to 1
    edge.arrow.width=1,                           # Arrow width, defaults to 1
    edge.lty=""solid"",                             # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
    edge.curved=0.3    ,                          # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
    )","par,plot,rgb,[,:",
249-igraph-network-map-a-color,thecode8-1,images/249-igraph-network-map-a-color/thecode8-1.png,"# library
library(igraph)
 
# create data:
links <- data.frame(
    source=c(""A"",""A"", ""A"", ""A"", ""A"",""J"", ""B"", ""B"", ""C"", ""C"", ""D"",""I""),
    target=c(""B"",""B"", ""C"", ""D"", ""J"",""A"",""E"", ""F"", ""G"", ""H"", ""I"",""I""),
    importance=(sample(1:4, 12, replace=T))
    )
nodes <- data.frame(
    name=LETTERS[1:10],
    carac=c( rep(""young"",3),rep(""adult"",2), rep(""old"",5))
    )
 
# Turn it into igraph object
network <- graph_from_data_frame(d=links, vertices=nodes, directed=F) 
 
# Make a palette of 3 colors
library(RColorBrewer)
coul  <- brewer.pal(3, ""Set1"") 
 
# Create a vector of color
my_color <- coul[as.numeric(as.factor(V(network)$carac))]
 
# Make the plot
plot(network, vertex.color=my_color)
 
# Add a legend
legend(""bottomleft"", legend=levels(as.factor(V(network)$carac))  , col = coul , bty = ""n"", pch=20 , pt.cex = 3, cex = 1.5, text.col=coul , horiz = FALSE, inset = c(0.1, 0.1))
","library,<-,data.frame,c,(,sample,:,[,rep,graph_from_data_frame,brewer.pal,as.numeric,as.factor,$,V,plot,legend,levels",
249-igraph-network-map-a-color,thecode1-1,images/249-igraph-network-map-a-color/thecode1-1.png,"# Check
#E(network)$importance

# Plot
plot(network, vertex.color=my_color, edge.width=E(network)$importance*2 )
legend(""bottomleft"", legend=levels(as.factor(V(network)$carac))  , col = coul , bty = ""n"", pch=20 , pt.cex = 3, cex = 1.5, text.col=coul , horiz = FALSE, inset = c(0.1, 0.1))","plot,*,$,E,legend,levels,as.factor,V,c",
25-histogram-without-border,unnamed-chunk-1-1,images/25-histogram-without-border/unnamed-chunk-1-1.png,"# Create data 
my_variable=c(rnorm(1000 , 0 , 2) , rnorm(1000 , 9 , 2))
 
# Draw the histogram with border=F
hist(my_variable , breaks=40 , col=rgb(0.2,0.8,0.5,0.5) , border=F , main="""")","=,c,rnorm,hist,rgb",hist
250-correlation-network-with-igraph,thecode2-1,images/250-correlation-network-with-igraph/thecode2-1.png,"# Keep only high correlations
mat[mat<0.995] <- 0
 
# Make an Igraph object from this matrix:
network <- graph_from_adjacency_matrix( mat, weighted=T, mode=""undirected"", diag=F)

# Basic chart
plot(network)","<-,[,<,graph_from_adjacency_matrix,plot",
250-correlation-network-with-igraph,thecode3-1,images/250-correlation-network-with-igraph/thecode3-1.png,"# color palette
library(RColorBrewer)
coul <- brewer.pal(nlevels(as.factor(mtcars$cyl)), ""Set2"")

# Map the color to cylinders
my_color <- coul[as.numeric(as.factor(mtcars$cyl))]

# plot
par(bg=""grey13"", mar=c(0,0,0,0))
set.seed(4)
plot(network, 
    vertex.size=12,
    vertex.color=my_color, 
    vertex.label.cex=0.7,
    vertex.label.color=""white"",
    vertex.frame.color=""transparent""
    )

# title and legend
text(0,0,""mtcars network"",col=""white"", cex=1.5)
legend(x=-0.2, y=-0.12, 
       legend=paste( levels(as.factor(mtcars$cyl)), "" cylinders"", sep=""""), 
       col = coul , 
       bty = ""n"", pch=20 , pt.cex = 2, cex = 1,
       text.col=""white"" , horiz = F)","library,<-,brewer.pal,nlevels,as.factor,$,[,as.numeric,par,c,set.seed,plot,text,legend,-,paste,levels",text
250-correlation-network-with-igraph,thecode4-1,images/250-correlation-network-with-igraph/thecode4-1.png,"plot(network,
    edge.color=rep(c(""red"",""pink""),5),           # Edge color
    edge.width=seq(1,10),                        # Edge width, defaults to 1
    edge.arrow.size=1,                           # Arrow size, defaults to 1
    edge.arrow.width=1,                          # Arrow width, defaults to 1
    edge.lty=c(""solid"")                           # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
    #edge.curved=c(rep(0,5), rep(1,5))            # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
    )","plot,rep,c,seq",
250-correlation-network-with-igraph,thecode5-1,images/250-correlation-network-with-igraph/thecode5-1.png,"par(bg=""black"")

plot(network,

    # === vertex
    vertex.color = rgb(0.8,0.4,0.3,0.8),          # Node color
    vertex.frame.color = ""white"",                 # Node border color
    vertex.shape=""circle"",                        # One of “none”, “circle”, “square”, “csquare”, “rectangle” “crectangle”, “vrectangle”, “pie”, “raster”, or “sphere”
    vertex.size=14,                               # Size of the node (default is 15)
    vertex.size2=NA,                              # The second size of the node (e.g. for a rectangle)

    # === vertex label
    vertex.label=LETTERS[1:10],                   # Character vector used to label the nodes
    vertex.label.color=""white"",
    vertex.label.family=""Times"",                  # Font family of the label (e.g.“Times”, “Helvetica”)
    vertex.label.font=2,                          # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol
    vertex.label.cex=1,                           # Font size (multiplication factor, device-dependent)
    vertex.label.dist=0,                          # Distance between the label and the vertex
    vertex.label.degree=0 ,                       # The position of the label in relation to the vertex (use pi)

    # === Edge
    edge.color=""white"",                           # Edge color
    edge.width=4,                                 # Edge width, defaults to 1
    edge.arrow.size=1,                            # Arrow size, defaults to 1
    edge.arrow.width=1,                           # Arrow width, defaults to 1
    edge.lty=""solid"",                             # Line type, could be 0 or “blank”, 1 or “solid”, 2 or “dashed”, 3 or “dotted”, 4 or “dotdash”, 5 or “longdash”, 6 or “twodash”
    edge.curved=0.3    ,                          # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5)
    )","par,plot,rgb,[,:",
251-network-with-node-size-based-on-edges-number,thecode2-1,images/251-network-with-node-size-based-on-edges-number/thecode2-1.png,"# library
library(igraph)
 
# create data:
links=data.frame(
    source=c(""A"",""A"", ""A"", ""A"", ""A"",""J"", ""B"", ""B"", ""C"", ""C"", ""D"",""I""),
    target=c(""B"",""B"", ""C"", ""D"", ""J"",""A"",""E"", ""F"", ""G"", ""H"", ""I"",""I"")
    )
 
# Turn it into igraph object
network <- graph_from_data_frame(d=links, directed=F) 
 
# Count the number of degree for each node:
deg <- degree(network, mode=""all"")
 
# Plot
plot(network, vertex.size=deg*6, vertex.color=rgb(0.1,0.7,0.8,0.5) )","library,=,data.frame,c,<-,graph_from_data_frame,degree,plot,*,rgb",
257-input-formats-for-network-charts,thecode2-1,images/257-input-formats-for-network-charts/thecode2-1.png,"#library
library(igraph)

# Create data
set.seed(10)
data <- matrix(sample(0:2, 25, replace=TRUE), nrow=5)
colnames(data) = rownames(data) = LETTERS[1:5]
 
# build the graph object
network <- graph_from_adjacency_matrix(data)
 
# plot it
plot(network)","library,set.seed,<-,matrix,sample,:,=,colnames,rownames,[,graph_from_adjacency_matrix,plot",
257-input-formats-for-network-charts,thecode3-1,images/257-input-formats-for-network-charts/thecode3-1.png,"# lib
library(igraph)

# data
set.seed(1)
data <- matrix(sample(0:2, 15, replace=TRUE), nrow=3)
colnames(data) <- letters[1:5]
rownames(data) <- LETTERS[1:3]
 
# create the network object
network <- graph_from_incidence_matrix(data)
 
# plot it
plot(network)","library,set.seed,<-,matrix,sample,:,colnames,[,rownames,graph_from_incidence_matrix,plot",
257-input-formats-for-network-charts,thecode4-1,images/257-input-formats-for-network-charts/thecode4-1.png,"# create data:
links <- data.frame(
    source=c(""A"",""A"", ""A"", ""A"", ""A"",""F"", ""B""),
    target=c(""B"",""B"", ""C"", ""D"", ""F"",""A"",""E"")
    )

# create the network object
network <- graph_from_data_frame(d=links, directed=F) 

# plot it
plot(network)","<-,data.frame,c,graph_from_data_frame,plot",
257-input-formats-for-network-charts,thecode5-1,images/257-input-formats-for-network-charts/thecode5-1.png,"# create data:
network <- graph_from_literal( A-B-C-D, E-A-E-A, D-C-A, D-A-D-C )

# plot it
plot(network)","<-,graph_from_literal,-,plot",
26-add-text-over-a-boxplot,unnamed-chunk-1-1,images/26-add-text-over-a-boxplot/unnamed-chunk-1-1.png,"# Dummy data
names <- c(rep(""A"", 20) , rep(""B"", 8) , rep(""C"", 30), rep(""D"", 80))
value <- c( sample(2:5, 20 , replace=T) , sample(4:10, 8 , replace=T), 
       sample(1:7, 30 , replace=T), sample(3:8, 80 , replace=T) )
data <- data.frame(names,value)
 
# Draw the boxplot. Note result is also stored in a object called boundaries
boundaries <- boxplot(data$value ~ data$names , col=""#69b3a2"" , ylim=c(1,11))
# Now you can type boundaries$stats to get the boundaries of the boxes

# Add sample size on top
nbGroup <- nlevels(data$names)
text( 
  x=c(1:nbGroup), 
  y=boundaries$stats[nrow(boundaries$stats),] + 0.5, 
  paste(""n = "",table(data$names),sep="""")  
)","<-,c,rep,sample,:,data.frame,boxplot,~,$,nlevels,text,+,[,nrow,paste,table","boxplot,text"
261-multiple-graphs-on-same-page,thecodeA-1,images/261-multiple-graphs-on-same-page/thecodeA-1.png,"# libraries
library(ggplot2)
library(gridExtra)
 
# Make 3 simple graphics:
g1 <- ggplot(mtcars, aes(x=qsec)) + geom_density(fill=""slateblue"")
g2 <- ggplot(mtcars, aes(x=drat, y=qsec, color=cyl)) + geom_point(size=5) + theme(legend.position=""none"")
g3 <- ggplot(mtcars, aes(x=factor(cyl), y=qsec, fill=cyl)) + geom_boxplot() + theme(legend.position=""none"")
g4 <- ggplot(mtcars , aes(x=factor(cyl), fill=factor(cyl))) +  geom_bar()
 
# Plots
grid.arrange(g2, arrangeGrob(g3, g4, ncol=2), nrow = 2)","library,<-,+,ggplot,aes,geom_density,geom_point,theme,factor,geom_boxplot,geom_bar,grid.arrange,arrangeGrob","geom_density,geom_point,geom_boxplot,geom_bar,grid.arrange"
261-multiple-graphs-on-same-page,thecodeB-1,images/261-multiple-graphs-on-same-page/thecodeB-1.png,"
grid.arrange(g1, g2, g3, nrow = 3)
",grid.arrange,grid.arrange
261-multiple-graphs-on-same-page,thecodeC-1,images/261-multiple-graphs-on-same-page/thecodeC-1.png,"
grid.arrange(g2, arrangeGrob(g3, g4, ncol=2), nrow = 1)

","grid.arrange,arrangeGrob",grid.arrange
261-multiple-graphs-on-same-page,thecodeD-1,images/261-multiple-graphs-on-same-page/thecodeD-1.png,"grid.arrange(g2, arrangeGrob(g3, g4, nrow=2), nrow = 1)","grid.arrange,arrangeGrob",grid.arrange
262-basic-boxplot-with-ggplot2,unnamed-chunk-1-1,images/262-basic-boxplot-with-ggplot2/unnamed-chunk-1-1.png,"# Load ggplot2
library(ggplot2)
 
# The mtcars dataset is natively available
# head(mtcars)
 
# A really basic boxplot.
ggplot(mtcars, aes(x=as.factor(cyl), y=mpg)) + 
    geom_boxplot(fill=""slateblue"", alpha=0.2) + 
    xlab(""cyl"")","library,+,ggplot,aes,as.factor,geom_boxplot,xlab",geom_boxplot
263-ggplot2-boxplot-parameters,unnamed-chunk-1-1,images/263-ggplot2-boxplot-parameters/unnamed-chunk-1-1.png,"# Load ggplot2
library(ggplot2)
 
# The mpg dataset is natively available
#head(mpg)
 
# geom_boxplot proposes several arguments to custom appearance
ggplot(mpg, aes(x=class, y=hwy)) + 
    geom_boxplot(
        
        # custom boxes
        color=""blue"",
        fill=""blue"",
        alpha=0.2,
        
        # Notch?
        notch=TRUE,
        notchwidth = 0.8,
        
        # custom outliers
        outlier.colour=""red"",
        outlier.fill=""red"",
        outlier.size=3
    
    ) +
    xlab("""")","library,+,ggplot,aes,geom_boxplot,xlab",geom_boxplot
264-control-ggplot2-boxplot-colors,unnamed-chunk-1-1,images/264-control-ggplot2-boxplot-colors/unnamed-chunk-1-1.png,"# library
library(ggplot2)

# The mtcars dataset is natively available in R
#head(mpg)
 
# Top Left: Set a unique color with fill, colour, and alpha
ggplot(mpg, aes(x=class, y=hwy)) + 
    geom_boxplot(color=""red"", fill=""orange"", alpha=0.2) +
    xlab("""") + 
    theme(plot.margin=unit(c(2,2,2,2),""cm""))
 
# Top Right: Set a different color for each group with default color palette
ggplot(mpg, aes(x=class, y=hwy, fill=class)) + 
    geom_boxplot() +
    theme(legend.position=""none"") +
    xlab("""") + 
    theme(plot.margin=unit(c(2,2,2,2),""cm""))

# Bottom Left: Use a palette from colorBrewer
ggplot(mpg, aes(x=class, y=hwy, fill=class)) + 
    geom_boxplot() +
    theme(legend.position=""none"") +
    scale_fill_brewer(palette=""Set3"") +
    xlab("""") + 
    theme(plot.margin=unit(c(2,2,2,2),""cm""))
 
# Bottom Right
library(viridis)
ggplot(mpg, aes(x=class, y=hwy, fill=class)) + 
    geom_boxplot(alpha=0.9) +
    theme(legend.position=""none"") +
    scale_fill_viridis(discrete=TRUE) +
    xlab("""") + 
    theme(plot.margin=unit(c(2,2,2,2),""cm""))","library,+,ggplot,aes,geom_boxplot,xlab,theme,unit,c,scale_fill_brewer,scale_fill_viridis",geom_boxplot
264-control-ggplot2-boxplot-colors,unnamed-chunk-3-1,images/264-control-ggplot2-boxplot-colors/unnamed-chunk-3-1.png,"# Libraries
library(ggplot2)
library(dplyr)
library(hrbrthemes)

# Work with the natively available mpg dataset
mpg %>% 
  
  # Add a column called 'type': do we want to highlight the group or not?
  mutate( type=ifelse(class==""subcompact"",""Highlighted"",""Normal"")) %>%
  
  # Build the boxplot. In the 'fill' argument, give this column
  ggplot( aes(x=class, y=hwy, fill=type, alpha=type)) + 
    geom_boxplot() +
    scale_fill_manual(values=c(""#69b3a2"", ""grey"")) +
    scale_alpha_manual(values=c(1,0.1)) +
    theme_ipsum() +
    theme(legend.position = ""none"")  +
    xlab("""")
","library,+,%>%,mutate,ifelse,==,ggplot,aes,geom_boxplot,scale_fill_manual,c,scale_alpha_manual,theme_ipsum,theme,xlab",geom_boxplot
265-grouped-boxplot-with-ggplot2,unnamed-chunk-1-1,images/265-grouped-boxplot-with-ggplot2/unnamed-chunk-1-1.png,"# library
library(ggplot2)
 
# create a data frame
variety=rep(LETTERS[1:7], each=40)
treatment=rep(c(""high"",""low""),each=20)
note=seq(1:280)+sample(1:150, 280, replace=T)
data=data.frame(variety, treatment ,  note)
 
# grouped boxplot
ggplot(data, aes(x=variety, y=note, fill=treatment)) + 
    geom_boxplot()
","library,=,rep,[,:,c,+,seq,sample,data.frame,ggplot,aes,geom_boxplot",geom_boxplot
265-grouped-boxplot-with-ggplot2,unnamed-chunk-4-1,images/265-grouped-boxplot-with-ggplot2/unnamed-chunk-4-1.png,"p1
p2",,
266-ggplot2-boxplot-with-variable-width,unnamed-chunk-1-1,images/266-ggplot2-boxplot-with-variable-width/unnamed-chunk-1-1.png,"# library
library(ggplot2)
 
# create data
names <- c(rep(""A"", 20) , rep(""B"", 5) , rep(""C"", 30), rep(""D"", 100))
value <- c( sample(2:5, 20 , replace=T) , sample(4:10, 5 , replace=T), sample(1:7, 30 , replace=T), sample(3:8, 100 , replace=T) )
data <- data.frame(names,value)
 
# prepare a special xlab with the number of obs for each group
my_xlab <- paste(levels(data$names),""\n(N="",table(data$names),"")"",sep="""")
 
# plot
ggplot(data, aes(x=names, y=value, fill=names)) +
    geom_boxplot(varwidth = TRUE, alpha=0.2) +
    theme(legend.position=""none"") +
    scale_x_discrete(labels=my_xlab)","library,<-,c,rep,sample,:,data.frame,paste,levels,$,table,+,ggplot,aes,geom_boxplot,theme,scale_x_discrete",geom_boxplot
267-reorder-a-variable-in-ggplot2,unnamed-chunk-2-1,images/267-reorder-a-variable-in-ggplot2/unnamed-chunk-2-1.png,"# load the library
library(forcats)

# Reorder following the value of another column:
data %>%
  mutate(name = fct_reorder(name, val)) %>%
  ggplot( aes(x=name, y=val)) +
    geom_bar(stat=""identity"", fill=""#f68060"", alpha=.6, width=.4) +
    coord_flip() +
    xlab("""") +
    theme_bw()
 
# Reverse side
data %>%
  mutate(name = fct_reorder(name, desc(val))) %>%
  ggplot( aes(x=name, y=val)) +
    geom_bar(stat=""identity"", fill=""#f68060"", alpha=.6, width=.4) +
    coord_flip() +
    xlab("""") +
    theme_bw()","library,+,%>%,mutate,fct_reorder,ggplot,aes,geom_bar,coord_flip,xlab,theme_bw,desc",geom_bar
267-reorder-a-variable-in-ggplot2,unnamed-chunk-3-1,images/267-reorder-a-variable-in-ggplot2/unnamed-chunk-3-1.png,"# Using median
mpg %>%
  mutate(class = fct_reorder(class, hwy, .fun='median')) %>%
  ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) + 
    geom_boxplot() +
    xlab(""class"") +
    theme(legend.position=""none"") +
    xlab("""")
 
# Using number of observation per group
mpg %>%
  mutate(class = fct_reorder(class, hwy, .fun='length' )) %>%
  ggplot( aes(x=class, y=hwy, fill=class)) + 
    geom_boxplot() +
    xlab(""class"") +
    theme(legend.position=""none"") +
    xlab("""") +
    xlab("""")","+,%>%,mutate,fct_reorder,ggplot,aes,reorder,geom_boxplot,xlab,theme",geom_boxplot
267-reorder-a-variable-in-ggplot2,unnamed-chunk-5-1,images/267-reorder-a-variable-in-ggplot2/unnamed-chunk-5-1.png,p,,
267-reorder-a-variable-in-ggplot2,unnamed-chunk-6-1,images/267-reorder-a-variable-in-ggplot2/unnamed-chunk-6-1.png,"data %>%
  arrange(val) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
  mutate(name=factor(name, levels=name)) %>%   # This trick update the factor levels
  ggplot( aes(x=name, y=val)) +
    geom_segment( aes(xend=name, yend=0)) +
    geom_point( size=4, color=""orange"") +
    coord_flip() +
    theme_bw() +
    xlab("""")
 
data %>%
  arrange(val) %>%
  mutate(name = factor(name, levels=c(""north"", ""north-east"", ""east"", ""south-east"", ""south"", ""south-west"", ""west"", ""north-west""))) %>%
  ggplot( aes(x=name, y=val)) +
    geom_segment( aes(xend=name, yend=0)) +
    geom_point( size=4, color=""orange"") +
    theme_bw() +
    xlab("""")","+,%>%,arrange,mutate,factor,ggplot,aes,geom_segment,geom_point,coord_flip,theme_bw,xlab,c","geom_segment,geom_point"
267-reorder-a-variable-in-ggplot2,unnamed-chunk-8-1,images/267-reorder-a-variable-in-ggplot2/unnamed-chunk-8-1.png,p,,
268-ggplot2-boxplot-from-continuous-variable,unnamed-chunk-2-1,images/268-ggplot2-boxplot-from-continuous-variable/unnamed-chunk-2-1.png,p,,
269-ggplot2-boxplot-with-average-value,unnamed-chunk-1-1,images/269-ggplot2-boxplot-with-average-value/unnamed-chunk-1-1.png,"# Library
library(ggplot2)
 
# create data
names=c(rep(""A"", 20) , rep(""B"", 8) , rep(""C"", 30), rep(""D"", 80))
value=c( sample(2:5, 20 , replace=T) , sample(4:10, 8 , replace=T), sample(1:7, 30 , replace=T), sample(3:8, 80 , replace=T) )
data=data.frame(names,value)
 
# plot
ggplot(data, aes(x=names, y=value, fill=names)) +
    geom_boxplot(alpha=0.7) +
    stat_summary(fun.y=mean, geom=""point"", shape=20, size=14, color=""red"", fill=""red"") +
    theme(legend.position=""none"") +
    scale_fill_brewer(palette=""Set1"")","library,=,c,rep,sample,:,data.frame,+,ggplot,aes,geom_boxplot,stat_summary,theme,scale_fill_brewer","geom_boxplot,stat_summary"
27-levelplot-with-lattice,thecode-1,images/27-levelplot-with-lattice/thecode-1.png,"# Load the lattice package
library(""lattice"")
 
# Dummy data
x <- seq(1,10, length.out=20)
y <- seq(1,10, length.out=20)
data <- expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 5)

## Try it out
levelplot(Z ~ X*Y, data=data  ,xlab=""X"",
          main="""")","library,<-,seq,expand.grid,$,runif,levelplot,~,*",levelplot
27-levelplot-with-lattice,thecode3-1,images/27-levelplot-with-lattice/thecode3-1.png,"# Load the library
library(""lattice"")
 
# Dummy data
data <- matrix(runif(100, 0, 5) , 10 , 10)
colnames(data) <- letters[c(1:10)]
rownames(data) <- paste( rep(""row"",10) , c(1:10) , sep="" "")
 
# plot it flipping the axis
levelplot(data)","library,<-,matrix,runif,colnames,[,c,:,rownames,paste,rep,levelplot",levelplot
27-levelplot-with-lattice,thecode2-1,images/27-levelplot-with-lattice/thecode2-1.png,"# Load the library
library(""lattice"")
 
# Dummy data
data <- matrix(runif(100, 0, 5) , 10 , 10)
colnames(data) <- letters[c(1:10)]
rownames(data) <- paste( rep(""row"",10) , c(1:10) , sep="" "")
 
# plot it flipping the axis
levelplot( t(data[c(nrow(data):1) , ]),
           col.regions=heat.colors(100))","library,<-,matrix,runif,colnames,[,c,:,rownames,paste,rep,levelplot,t,nrow,heat.colors",levelplot
27-levelplot-with-lattice,thecode4-1,images/27-levelplot-with-lattice/thecode4-1.png,"# Lattice package
require(lattice)

# The volcano dataset is provided, it looks like that:
#head(volcano)

# 1: native palette from R
levelplot(volcano, col.regions = terrain.colors(100)) # try cm.colors() or terrain.colors()

# 2: Rcolorbrewer palette
library(RColorBrewer)
coul <- colorRampPalette(brewer.pal(8, ""PiYG""))(25)
levelplot(volcano, col.regions = coul) # try cm.colors() or terrain.colors()

# 3: Viridis
library(viridisLite)
coul <- viridis(100)
levelplot(volcano, col.regions = coul) 
#levelplot(volcano, col.regions = magma(100)) ","require,levelplot,terrain.colors,library,<-,colorRampPalette,brewer.pal,viridis",levelplot
27-levelplot-with-lattice,unnamed-chunk-1-1,images/27-levelplot-with-lattice/unnamed-chunk-1-1.png,"levelplot(volcano, col.regions = magma(100)) ","levelplot,magma",levelplot
27-levelplot-with-lattice,thecode4-2,images/27-levelplot-with-lattice/thecode4-2.png,,,
272-basic-scatterplot-with-ggplot2,unnamed-chunk-1-1,images/272-basic-scatterplot-with-ggplot2/unnamed-chunk-1-1.png,"# library
library(ggplot2)
 
# The iris dataset is provided natively by R
#head(iris)
 
# basic scatterplot
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + 
    geom_point()","library,+,ggplot,aes,geom_point",geom_point
273-custom-your-scatterplot-ggplot2,unnamed-chunk-1-1,images/273-custom-your-scatterplot-ggplot2/unnamed-chunk-1-1.png,"# library
library(ggplot2)
 
# Iris dataset is natively provided by R
#head(iris)
 
# use options!
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + 
    geom_point(
        color=""orange"",
        fill=""#69b3a2"",
        shape=21,
        alpha=0.5,
        size=6,
        stroke = 2
        )","library,+,ggplot,aes,geom_point",geom_point
273-custom-your-scatterplot-ggplot2,unnamed-chunk-3-1,images/273-custom-your-scatterplot-ggplot2/unnamed-chunk-3-1.png,"# library
library(ggplot2)
library(hrbrthemes)

# Iris dataset is natively provided by R
#head(iris)
 
# use options!
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + 
    geom_point(
        color=""black"",
        fill=""#69b3a2"",
        shape=22,
        alpha=0.5,
        size=6,
        stroke = 1
        ) +
    theme_ipsum()","library,+,ggplot,aes,geom_point,theme_ipsum",geom_point
274-map-a-variable-to-ggplot2-scatterplot,thecode-1,images/274-map-a-variable-to-ggplot2-scatterplot/thecode-1.png,"# load ggplot2
library(ggplot2)
library(hrbrthemes)

# mtcars dataset is natively available in R
# head(mtcars)
 
# A basic scatterplot with color depending on Species
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + 
    geom_point(size=6) +
    theme_ipsum()","library,+,ggplot,aes,geom_point,theme_ipsum",geom_point
274-map-a-variable-to-ggplot2-scatterplot,unnamed-chunk-2-1,images/274-map-a-variable-to-ggplot2-scatterplot/unnamed-chunk-2-1.png,"# Transparency
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, alpha=Species)) + 
    geom_point(size=6, color=""#69b3a2"") +
    ggtitle(""Transparency"") +
    theme_ipsum()

# Shape
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, shape=Species)) + 
    geom_point(size=6, color=""#69b3a2"") +
    ggtitle(""Shape"") +
    theme_ipsum()

# Size
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, size=Species)) + 
    geom_point(color=""#69b3a2"") +
    ggtitle(""Size"") +
    theme_ipsum()","+,ggplot,aes,geom_point,ggtitle,theme_ipsum",geom_point
274-map-a-variable-to-ggplot2-scatterplot,thecode3-1,images/274-map-a-variable-to-ggplot2-scatterplot/thecode3-1.png,"# load ggplot2
library(ggplot2)
library(hrbrthemes)

# A basic scatterplot with color depending on Species
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, shape=Species, alpha=Species, size=Species, color=Species)) + 
    geom_point() +
    theme_ipsum()","library,+,ggplot,aes,geom_point,theme_ipsum",geom_point
275-add-text-labels-with-ggplot2,thecode-1,images/275-add-text-labels-with-ggplot2/thecode-1.png,"# library
library(ggplot2)
 
# Keep 30 first rows in the mtcars natively available dataset
data=head(mtcars, 30)
 
# 1/ add text with geom_text, use nudge to nudge the text
ggplot(data, aes(x=wt, y=mpg)) +
  geom_point() + # Show dots
  geom_text(
    label=rownames(data), 
    nudge_x = 0.25, nudge_y = 0.25, 
    check_overlap = T
  )","library,=,head,+,ggplot,aes,geom_point,geom_text,rownames","geom_point,geom_text"
275-add-text-labels-with-ggplot2,thecode2-1,images/275-add-text-labels-with-ggplot2/thecode2-1.png,"# library
library(ggplot2)
 
# Keep 30 first rows in the mtcars natively available dataset
data=head(mtcars, 30)
 
# 1/ add text with geom_text, use nudge to nudge the text
ggplot(data, aes(x=wt, y=mpg)) +
  geom_point() + # Show dots
  geom_label(
    label=rownames(data), 
    nudge_x = 0.25, nudge_y = 0.25, 
    check_overlap = T
  )","library,=,head,+,ggplot,aes,geom_point,geom_label,rownames","geom_point,geom_label"
275-add-text-labels-with-ggplot2,thecode3-1,images/275-add-text-labels-with-ggplot2/thecode3-1.png,"# library
library(ggplot2)
 
# Keep 30 first rows in the mtcars natively available dataset
data=head(mtcars, 30)
 
# Add one annotation
ggplot(data, aes(x=wt, y=mpg)) +
  geom_point() + # Show dots
  geom_label(
    label=""Look at this!"", 
    x=4.1,
    y=20,
    label.padding = unit(0.55, ""lines""), # Rectangle size around label
    label.size = 0.35,
    color = ""black"",
    fill=""#69b3a2""
  )","library,=,head,+,ggplot,aes,geom_point,geom_label,unit","geom_point,geom_label"
275-add-text-labels-with-ggplot2,thecode4-1,images/275-add-text-labels-with-ggplot2/thecode4-1.png,"# library
library(ggplot2)
library(dplyr)
library(tibble)

# Keep 30 first rows in the mtcars natively available dataset
data=head(mtcars, 30)

# Change data rownames as a real column called 'carName'
data <- data %>%
  rownames_to_column(var=""carName"")
  
# Plot
ggplot(data, aes(x=wt, y=mpg)) +
  geom_point() + 
  geom_label( 
    data=data %>% filter(mpg>20 & wt>3), # Filter data first
    aes(label=carName)
  )","library,=,head,<-,%>%,rownames_to_column,+,ggplot,aes,geom_point,geom_label,filter,&,>","geom_point,geom_label"
276-scatterplot-with-rug-ggplot2,thecode-1,images/276-scatterplot-with-rug-ggplot2/thecode-1.png,"# library
library(ggplot2)

# Iris dataset
head(iris)

# plot
ggplot(data=iris, aes(x=Sepal.Length, Petal.Length)) +
  geom_point() +
  geom_rug(col=""steelblue"",alpha=0.1, size=1.5)","library,head,+,ggplot,aes,geom_point,geom_rug","geom_point,geom_rug"
277-marginal-histogram-for-ggplot2,unnamed-chunk-1-1,images/277-marginal-histogram-for-ggplot2/unnamed-chunk-1-1.png,p1,,
277-marginal-histogram-for-ggplot2,unnamed-chunk-2-1,images/277-marginal-histogram-for-ggplot2/unnamed-chunk-2-1.png,p2,,
277-marginal-histogram-for-ggplot2,unnamed-chunk-3-1,images/277-marginal-histogram-for-ggplot2/unnamed-chunk-3-1.png,p3,,
277-marginal-histogram-for-ggplot2,unnamed-chunk-4-1,images/277-marginal-histogram-for-ggplot2/unnamed-chunk-4-1.png,p1,,
277-marginal-histogram-for-ggplot2,unnamed-chunk-5-1,images/277-marginal-histogram-for-ggplot2/unnamed-chunk-5-1.png,p2,,
277-marginal-histogram-for-ggplot2,unnamed-chunk-6-1,images/277-marginal-histogram-for-ggplot2/unnamed-chunk-6-1.png,p3,,
278-the-maps-library,thecode-1,images/278-the-maps-library/thecode-1.png,"# Load library
library(maps)

# Check all available geospatial objects:
# help(package='maps')

# Map of the world:
map('world',col=""grey"", fill=TRUE, bg=""white"", lwd=0.05, mar=rep(0,4),border=0, ylim=c(-80,80) )","library,map,rep,c,-",
278-the-maps-library,thecode2-1,images/278-the-maps-library/thecode2-1.png,"# Load library
library(mapdata)

# Check all available geospatial objects:
# help(package='mapdata')

# Map of Japan:
map('japan',col=""black"", lwd=1, mar=rep(0,4) )","library,map,rep",
278-the-maps-library,thecode3-1,images/278-the-maps-library/thecode3-1.png,"# Load library
library(oz)

# Check all available geospatial objects:
# help(package='oz')

# Map of Australia
par(mar=rep(0,4))
oz( states=TRUE, col=""#69b3a2"")","library,par,rep,oz",
279-plotting-time-series-with-ggplot2,thecode-1,images/279-plotting-time-series-with-ggplot2/thecode-1.png,"# Libraries
library(ggplot2)
library(dplyr)

# Dummy data
data <- data.frame(
  day = as.Date(""2017-06-14"") - 0:364,
  value = runif(365) + seq(-140, 224)^2 / 10000
)

# Most basic bubble plot
p <- ggplot(data, aes(x=day, y=value)) +
  geom_line() + 
  xlab("""")
p","library,<-,data.frame,-,as.Date,:,+,runif,/,^,seq,ggplot,aes,geom_line,xlab",geom_line
279-plotting-time-series-with-ggplot2,thecode2-1,images/279-plotting-time-series-with-ggplot2/thecode2-1.png,"# Libraries
library(ggplot2)
library(dplyr)
library(hrbrthemes)

# Dummy data
data <- data.frame(
  day = as.Date(""2017-06-14"") - 0:364,
  value = runif(365) - seq(-140, 224)^2 / 10000
)

# Most basic bubble plot
p <- ggplot(data, aes(x=day, y=value)) +
  geom_line( color=""#69b3a2"") + 
  xlab("""") +
  theme_ipsum() +
  theme(axis.text.x=element_text(angle=60, hjust=1)) 

p","library,<-,data.frame,-,as.Date,:,runif,/,^,seq,+,ggplot,aes,geom_line,xlab,theme_ipsum,theme,element_text",geom_line
279-plotting-time-series-with-ggplot2,thecode3-1,images/279-plotting-time-series-with-ggplot2/thecode3-1.png,"# Libraries
library(ggplot2)
library(dplyr)
library(hrbrthemes)

# Dummy data
data <- data.frame(
  day = as.Date(""2017-06-14"") - 0:364,
  value = runif(365) + seq(-140, 224)^2 / 10000
)

# Most basic bubble plot
p <- ggplot(data, aes(x=day, y=value)) +
  geom_line( color=""steelblue"") + 
  geom_point() +
  xlab("""") +
  theme_ipsum() +
  theme(axis.text.x=element_text(angle=60, hjust=1)) +
  scale_x_date(limit=c(as.Date(""2017-01-01""),as.Date(""2017-02-11""))) +
  ylim(0,1.5)

p","library,<-,data.frame,-,as.Date,:,+,runif,/,^,seq,ggplot,aes,geom_line,geom_point,xlab,theme_ipsum,theme,element_text,scale_x_date,c,ylim","geom_line,geom_point"
283-the-hourly-heatmap,thecode-1,images/283-the-hourly-heatmap/thecode-1.png,"library(ggplot2)
library(dplyr) # easier data wrangling 
library(viridis) # colour blind friendly palette, works in B&W also
library(Interpol.T) #  will generate a large dataset on initial load
library(lubridate) # for easy date manipulation
library(ggExtra) # because remembering ggplot theme options is beyond me
library(tidyr) 
 
 
data <- data(Trentino_hourly_T,package = ""Interpol.T"")
 
names(h_d_t)[1:5]<- c(""stationid"",""date"",""hour"",""temp"",""flag"")
df <- tbl_df(h_d_t) %>%
  filter(stationid ==""T0001"")
 
df <- df %>% mutate(year = year(date),
                  month = month(date, label=TRUE),
                  day = day(date))
  
df$date<-ymd(df$date) # not necessary for plot but 
#useful if you want to do further work with the data
 
#cleanup
rm(list=c(""h_d_t"",""mo_bias"",""Tn"",""Tx"",
          ""Th_int_list"",""calibration_l"",
          ""calibration_shape"",""Tm_list""))
 
 
#create plotting df
df <-df %>% select(stationid,day,hour,month,year,temp)%>%
        fill(temp) #optional - see note below
 
# Re: use of fill
# This code is for demonstrating a visualisation technique
# There are 5 missing hourly values in the dataframe.
 
# see the original plot here (from my ggplot demo earlier this year) to see the white spaces where the missing values occcur:
# https://github.com/johnmackintosh/ggplotdemo/blob/master/temp8.png 
 
# I used 'fill' from  tidyr to take the prior value for each missing value and replace the NA
# This is a quick fix for the blog post only - _do not_ do this with your real world data
 
# Should really use either use replace_NA or complete(with fill)in tidyr 
# OR 
# Look into more specialist way of replacing these missing values -e.g. imputation.
 
 
 
statno <-unique(df$stationid)
 
 
 
######## Plotting starts here#####################
p <-ggplot(df,aes(day,hour,fill=temp))+
  geom_tile(color= ""white"",size=0.1) + 
  scale_fill_viridis(name=""Hrly Temps C"",option =""C"")
p <-p + facet_grid(year~month)
p <-p + scale_y_continuous(trans = ""reverse"", breaks = unique(df$hour))
p <-p + scale_x_continuous(breaks =c(1,10,20,31))
p <-p + theme_minimal(base_size = 8)
p <-p + labs(title= paste(""Hourly Temps - Station"",statno), x=""Day"", y=""Hour Commencing"")
p <-p + theme(legend.position = ""bottom"")+
  theme(plot.title=element_text(size = 14))+
  theme(axis.text.y=element_text(size=6)) +
  theme(strip.background = element_rect(colour=""white""))+
  theme(plot.title=element_text(hjust=0))+
  theme(axis.ticks=element_blank())+
  theme(axis.text=element_text(size=7))+
  theme(legend.title=element_text(size=8))+
  theme(legend.text=element_text(size=6))+
  removeGrid()#ggExtra
 
# you will want to expand your plot screen before this bit!
p #awesomeness","library,<-,data,[,names,:,c,%>%,tbl_df,filter,==,mutate,year,month,day,$,ymd,rm,select,fill,unique,+,ggplot,aes,geom_tile,scale_fill_viridis,facet_grid,~,scale_y_continuous,scale_x_continuous,theme_minimal,labs,paste,theme,element_text,element_rect,element_blank,removeGrid","geom_tile,facet_grid"
285-waffer-map,thecode-1,images/285-waffer-map/thecode-1.png,"# load data
madeUp=read.table(""https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/madeUp.csv"", sep="","", header=T)
 
# load libraries
library(tidyverse)
 
# Prepare data 
theData <- madeUp %>% 
 group_by(X.Axis, Y.Axis, Group) %>% 
 dplyr::summarize(statistic=mean(randVals, na.rm = TRUE))
 
# plot
ggplot(theData, aes(X.Axis, Y.Axis)) +
	
	coord_cartesian(xlim = c(0,20), ylim = c(0,20)) +
	scale_x_continuous(breaks = seq(0,20)) +
	scale_y_continuous(breaks = seq(0,20))+
	
	geom_tile(aes(fill=statistic))+
	guides(fill=guide_legend(title='Legend'))+
	
	theme(
		panel.background = element_rect(fill= 'white', color = 'white'),
		panel.grid.major = element_line(color='#E0E0E0'),
		panel.grid.minor = element_line(color='#E0E0E0')
		)+
		
	ggtitle('Wafer Map')+
	facet_wrap(~Group)+
	scale_fill_gradientn(colors = rainbow(100))","=,read.table,library,<-,%>%,group_by,summarize,mean,+,ggplot,aes,coord_cartesian,c,scale_x_continuous,seq,scale_y_continuous,geom_tile,guides,guide_legend,theme,element_rect,element_line,ggtitle,facet_wrap,~,scale_fill_gradientn,rainbow","geom_tile,facet_wrap"
289-control-ggplot2-title,thecode-1,images/289-control-ggplot2-title/thecode-1.png,"# library & data
library(ggplot2)
data <- data.frame(x=rnorm(100))
 
# Basic plot with title
ggplot( data=data, aes(x=x)) + 
  geom_histogram(fill=""skyblue"", alpha=0.5) +
  ggtitle(""A blue Histogram"") +
  theme_minimal()","library,<-,data.frame,rnorm,+,ggplot,aes,geom_histogram,ggtitle,theme_minimal",geom_histogram
289-control-ggplot2-title,thecode2-1,images/289-control-ggplot2-title/thecode2-1.png,"# title on several lines
ggplot( data=data, aes(x=x)) + 
  geom_histogram(fill=""skyblue"", alpha=0.5) +
  ggtitle(""A blue \nHistogram"") +
  theme_minimal() ","+,ggplot,aes,geom_histogram,ggtitle,theme_minimal",geom_histogram
289-control-ggplot2-title,thecode3a-1,images/289-control-ggplot2-title/thecode3a-1.png,"# Custom title appearance
ggplot( data=data, aes(x=x)) + 
  geom_histogram(fill=""skyblue"", alpha=0.5) +
  ggtitle(""A blue Histogram"") +
  theme_minimal() +
  theme(
    plot.title=element_text(family='', face='bold', colour='purple', size=26)
  )
 ","+,ggplot,aes,geom_histogram,ggtitle,theme_minimal,theme,element_text",geom_histogram
289-control-ggplot2-title,thecode3b-1,images/289-control-ggplot2-title/thecode3b-1.png,"# Adjust the position of title
ggplot( data=data, aes(x=x)) + 
  geom_histogram(fill=""skyblue"", alpha=0.8) +
  ggtitle(""With title on the right"") +
  theme_minimal() +
  theme(
    plot.title=element_text( hjust=1, vjust=0.5, face='bold')
  )","+,ggplot,aes,geom_histogram,ggtitle,theme_minimal,theme,element_text",geom_histogram
289-control-ggplot2-title,thecode5-1,images/289-control-ggplot2-title/thecode5-1.png,"# Custom a few word of the title only:
my_title <- expression(paste(""A "", italic(bold(""blue"")), "" histogram""))
ggplot( data=data, aes(x=x)) + 
  geom_histogram(fill=""skyblue"", alpha=0.8) +
  ggtitle(my_title) +
  theme_minimal()","<-,expression,paste,italic,bold,+,ggplot,aes,geom_histogram,ggtitle,theme_minimal",geom_histogram
29-basic-dendrogram,thecode8-1,images/29-basic-dendrogram/thecode8-1.png,"# Dataset 
data <- matrix( sample(seq(1,2000),200), ncol = 10 )
rownames(data) <- paste0(""sample_"" , seq(1,20))
colnames(data) <- paste0(""variable"",seq(1,10))

# Euclidean distance
dist <- dist(data[ , c(4:8)] , diag=TRUE)

# Hierarchical Clustering with hclust
hc <- hclust(dist)

# Plot the result
plot(hc)","<-,matrix,sample,seq,rownames,paste0,colnames,dist,[,c,:,hclust,plot",
29-basic-dendrogram,thecode-1,images/29-basic-dendrogram/thecode-1.png,"# store the dedrogram in an object
dhc <- as.dendrogram(hc)

# set the margin
par(mar=c(4,4,2,2))

# Plot the Second group
plot(dhc[[2]] , main= ""zoom on a part of the dendrogram"")","<-,as.dendrogram,par,c,plot,[[",
294-basic-ridgeline-plot,unnamed-chunk-1-1,images/294-basic-ridgeline-plot/unnamed-chunk-1-1.png,"# library
library(ggridges)
library(ggplot2)
 
# Diamonds dataset is provided by R natively
#head(diamonds)
 
# basic example
ggplot(diamonds, aes(x = price, y = cut, fill = cut)) +
  geom_density_ridges() +
  theme_ridges() + 
  theme(legend.position = ""none"")","library,+,ggplot,aes,geom_density_ridges,theme_ridges,theme",geom_density_ridges
294-basic-ridgeline-plot,unnamed-chunk-3-1,images/294-basic-ridgeline-plot/unnamed-chunk-3-1.png,"# library
library(ggridges)
library(ggplot2)
library(dplyr)
library(tidyr)
library(forcats)

# Load dataset from github
data <- read.table(""https://raw.githubusercontent.com/zonination/perceptions/master/probly.csv"", header=TRUE, sep="","")
data <- data %>% 
  gather(key=""text"", value=""value"") %>%
  mutate(text = gsub(""\\."", "" "",text)) %>%
  mutate(value = round(as.numeric(value),0)) %>%
  filter(text %in% c(""Almost Certainly"",""Very Good Chance"",""We Believe"",""Likely"",""About Even"", ""Little Chance"", ""Chances Are Slight"", ""Almost No Chance""))

# Plot
data %>%
  mutate(text = fct_reorder(text, value)) %>%
  ggplot( aes(y=text, x=value,  fill=text)) +
    geom_density_ridges(alpha=0.6, stat=""binline"", bins=20) +
    theme_ridges() +
    theme(
      legend.position=""none"",
      panel.spacing = unit(0.1, ""lines""),
      strip.text.x = element_text(size = 8)
    ) +
    xlab("""") +
    ylab(""Assigned Probability (%)"")","library,<-,read.table,%>%,gather,mutate,gsub,round,as.numeric,filter,%in%,c,+,fct_reorder,ggplot,aes,geom_density_ridges,theme_ridges,theme,unit,element_text,xlab,ylab",geom_density_ridges
294-basic-ridgeline-plot,unnamed-chunk-5-1,images/294-basic-ridgeline-plot/unnamed-chunk-5-1.png,"# library
library(ggridges)
library(ggplot2)
library(viridis)
library(hrbrthemes)

# Plot
ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) +
  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
  scale_fill_viridis(name = ""Temp. [F]"", option = ""C"") +
  labs(title = 'Temperatures in Lincoln NE in 2016') +
  theme_ipsum() +
    theme(
      legend.position=""none"",
      panel.spacing = unit(0.1, ""lines""),
      strip.text.x = element_text(size = 8)
    )","library,+,ggplot,aes,geom_density_ridges_gradient,scale_fill_viridis,labs,theme_ipsum,theme,unit,element_text",geom_density_ridges_gradient
295-basic-circular-barplot,thecode-1,images/295-basic-circular-barplot/thecode-1.png,"# Libraries
library(tidyverse)
 
# Create dataset
data <- data.frame(
  id=seq(1,60),
  individual=paste( ""Mister "", seq(1,60), sep=""""),
  value=sample( seq(10,100), 60, replace=T)
)
 
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
  
  # This add the bars with a blue color
  geom_bar(stat=""identity"", fill=alpha(""blue"", 0.3)) +
  
  # Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
  ylim(-100,120) +
  
  # Custom the theme: no axis title and no cartesian grid
  theme_minimal() +
  theme(
    axis.text = element_blank(),
    axis.title = element_blank(),
    panel.grid = element_blank(),
    plot.margin = unit(rep(-2,4), ""cm"")     # This remove unnecessary margin around plot
  ) +
  
  # This makes the coordinate polar instead of cartesian.
  coord_polar(start = 0)
p","library,<-,data.frame,seq,paste,sample,+,ggplot,aes,as.factor,geom_bar,alpha,ylim,-,theme_minimal,theme,element_blank,unit,rep,coord_polar","geom_bar,coord_polar"
296-add-labels-to-circular-barplot,thecode-1,images/296-add-labels-to-circular-barplot/thecode-1.png,"# Libraries
library(tidyverse)
 
# Create dataset
data <- data.frame(
  id=seq(1,60),
  individual=paste( ""Mister "", seq(1,60), sep=""""),
  value=sample( seq(10,100), 60, replace=T)
)
 
# ----- This section prepare a dataframe for labels ---- #
# Get the name and the y position of each label
label_data <- data
 
# calculate the ANGLE of the labels
number_of_bar <- nrow(label_data)
angle <-  90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
 
# calculate the alignment of labels: right or left
# If I am on the left part of the plot, my labels have currently an angle < -90
label_data$hjust<-ifelse( angle < -90, 1, 0)
 
# flip angle BY to make them readable
label_data$angle<-ifelse(angle < -90, angle+180, angle)
# ----- ------------------------------------------- ---- #
 
 
# Start the plot
p <- ggplot(data, aes(x=as.factor(id), y=value)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
  
  # This add the bars with a blue color
  geom_bar(stat=""identity"", fill=alpha(""skyblue"", 0.7)) +
  
  # Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
  ylim(-100,120) +
  
  # Custom the theme: no axis title and no cartesian grid
  theme_minimal() +
  theme(
    axis.text = element_blank(),
    axis.title = element_blank(),
    panel.grid = element_blank(),
    plot.margin = unit(rep(-1,4), ""cm"")      # Adjust the margin to make in sort labels are not truncated!
  ) +
  
  # This makes the coordinate polar instead of cartesian.
  coord_polar(start = 0) +
  
  # Add the labels, using the label_data dataframe that we have created before
  geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color=""black"", fontface=""bold"",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) 
 
p","library,<-,data.frame,seq,paste,sample,nrow,-,/,*,(,$,ifelse,<,+,ggplot,aes,as.factor,geom_bar,alpha,ylim,theme_minimal,theme,element_blank,unit,rep,coord_polar,geom_text","geom_bar,coord_polar,geom_text"
297-circular-barplot-with-groups,thecode-1,images/297-circular-barplot-with-groups/thecode-1.png,"# library
library(tidyverse)
 
# Create dataset
data <- data.frame(
  individual=paste( ""Mister "", seq(1,60), sep=""""),
  value=sample( seq(10,100), 60, replace=T)
)
 
# Set a number of 'empty bar'
empty_bar <- 10
 
# Add lines to the initial dataset
to_add <- matrix(NA, empty_bar, ncol(data))
colnames(to_add) <- colnames(data)
data <- rbind(data, to_add)
data$id <- seq(1, nrow(data))
 
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
 
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
  geom_bar(stat=""identity"", fill=alpha(""green"", 0.3)) +
  ylim(-100,120) +
  theme_minimal() +
  theme(
    axis.text = element_blank(),
    axis.title = element_blank(),
    panel.grid = element_blank(),
    plot.margin = unit(rep(-1,4), ""cm"") 
  ) +
  coord_polar(start = 0) + 
  geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color=""black"", fontface=""bold"",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) 
 
p","library,<-,data.frame,paste,seq,sample,matrix,ncol,colnames,rbind,$,nrow,-,/,*,(,ifelse,<,+,ggplot,aes,as.factor,geom_bar,alpha,ylim,theme_minimal,theme,element_blank,unit,rep,coord_polar,geom_text","geom_bar,coord_polar,geom_text"
297-circular-barplot-with-groups,thecode2-1,images/297-circular-barplot-with-groups/thecode2-1.png,"# library
library(tidyverse)
 
# Create dataset
data <- data.frame(
  individual=paste( ""Mister "", seq(1,60), sep=""""),
  group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
  value=sample( seq(10,100), 60, replace=T)
)
 
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 4
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
 
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
 
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
  geom_bar(stat=""identity"", alpha=0.5) +
  ylim(-100,120) +
  theme_minimal() +
  theme(
    legend.position = ""none"",
    axis.text = element_blank(),
    axis.title = element_blank(),
    panel.grid = element_blank(),
    plot.margin = unit(rep(-1,4), ""cm"") 
  ) +
  coord_polar() + 
  geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color=""black"", fontface=""bold"",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) 
 
p","library,<-,data.frame,paste,seq,c,rep,sample,matrix,*,nlevels,$,ncol,colnames,levels,rbind,%>%,arrange,nrow,-,/,(,ifelse,<,+,ggplot,aes,as.factor,geom_bar,ylim,theme_minimal,theme,element_blank,unit,coord_polar,geom_text","geom_bar,coord_polar,geom_text"
297-circular-barplot-with-groups,unnamed-chunk-1-1,images/297-circular-barplot-with-groups/unnamed-chunk-1-1.png,"# library
library(tidyverse)
 
# Create dataset
data <- data.frame(
  individual=paste( ""Mister "", seq(1,60), sep=""""),
  group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
  value=sample( seq(10,100), 60, replace=T)
)

# Order data:
data = data %>% arrange(group, value)

# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 4
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
 
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
 
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
  geom_bar(stat=""identity"", alpha=0.5) +
  ylim(-100,120) +
  theme_minimal() +
  theme(
    legend.position = ""none"",
    axis.text = element_blank(),
    axis.title = element_blank(),
    panel.grid = element_blank(),
    plot.margin = unit(rep(-1,4), ""cm"") 
  ) +
  coord_polar() + 
  geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color=""black"", fontface=""bold"",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) 
 
p","library,<-,data.frame,paste,seq,c,rep,sample,=,%>%,arrange,matrix,*,nlevels,$,ncol,colnames,levels,rbind,nrow,-,/,(,ifelse,<,+,ggplot,aes,as.factor,geom_bar,ylim,theme_minimal,theme,element_blank,unit,coord_polar,geom_text","geom_bar,coord_polar,geom_text"
297-circular-barplot-with-groups,thecode4-1,images/297-circular-barplot-with-groups/thecode4-1.png,"
# library
library(tidyverse)
 
# Create dataset
data <- data.frame(
  individual=paste( ""Mister "", seq(1,60), sep=""""),
  group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
  value=sample( seq(10,100), 60, replace=T)
)
 
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
 
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
 
# prepare a data frame for base lines
base_data <- data %>% 
  group_by(group) %>% 
  summarize(start=min(id), end=max(id) - empty_bar) %>% 
  rowwise() %>% 
  mutate(title=mean(c(start, end)))
 
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
 
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
  
  geom_bar(aes(x=as.factor(id), y=value, fill=group), stat=""identity"", alpha=0.5) +
  
  # Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
  geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = ""grey"", alpha=1, size=0.3 , inherit.aes = FALSE ) +
  geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = ""grey"", alpha=1, size=0.3 , inherit.aes = FALSE ) +
  geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = ""grey"", alpha=1, size=0.3 , inherit.aes = FALSE ) +
  geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = ""grey"", alpha=1, size=0.3 , inherit.aes = FALSE ) +
  
  # Add text showing the value of each 100/75/50/25 lines
  annotate(""text"", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c(""20"", ""40"", ""60"", ""80"") , color=""grey"", size=3 , angle=0, fontface=""bold"", hjust=1) +
  
  geom_bar(aes(x=as.factor(id), y=value, fill=group), stat=""identity"", alpha=0.5) +
  ylim(-100,120) +
  theme_minimal() +
  theme(
    legend.position = ""none"",
    axis.text = element_blank(),
    axis.title = element_blank(),
    panel.grid = element_blank(),
    plot.margin = unit(rep(-1,4), ""cm"") 
  ) +
  coord_polar() + 
  geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color=""black"", fontface=""bold"",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
  
  # Add base line information
  geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = ""black"", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
  geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = ""black"", alpha=0.8, size=4, fontface=""bold"", inherit.aes = FALSE)
 
p
","library,<-,data.frame,paste,seq,c,rep,sample,matrix,*,nlevels,$,ncol,colnames,levels,rbind,%>%,arrange,nrow,-,/,(,ifelse,<,+,group_by,summarize,min,max,rowwise,mutate,mean,[,:,ggplot,aes,as.factor,geom_bar,geom_segment,annotate,ylim,theme_minimal,theme,element_blank,unit,coord_polar,geom_text","geom_bar,geom_segment,coord_polar,geom_text"
2d-density-plot-with-ggplot2,thecode-1,images/2d-density-plot-with-ggplot2/thecode-1.png,"# Library
library(tidyverse)
 
# Data
a <- data.frame( x=rnorm(20000, 10, 1.9), y=rnorm(20000, 10, 1.2) )
b <- data.frame( x=rnorm(20000, 14.5, 1.9), y=rnorm(20000, 14.5, 1.9) )
c <- data.frame( x=rnorm(20000, 9.5, 1.9), y=rnorm(20000, 15.5, 1.9) )
data <- rbind(a,b,c)
 
 
# Basic scatterplot
ggplot(data, aes(x=x, y=y) ) +
  geom_point()","library,<-,data.frame,rnorm,rbind,+,ggplot,aes,geom_point",geom_point
2d-density-plot-with-ggplot2,thecode2-1,images/2d-density-plot-with-ggplot2/thecode2-1.png,"# 2d histogram with default option
ggplot(data, aes(x=x, y=y) ) +
  geom_bin2d() +
  theme_bw()
 
# Bin size control + color palette
ggplot(data, aes(x=x, y=y) ) +
  geom_bin2d(bins = 70) +
  scale_fill_continuous(type = ""viridis"") +
  theme_bw()","+,ggplot,aes,geom_bin2d,theme_bw,scale_fill_continuous",geom_bin2d
2d-density-plot-with-ggplot2,thecode2-2,images/2d-density-plot-with-ggplot2/thecode2-2.png,,,
2d-density-plot-with-ggplot2,thecode3-1,images/2d-density-plot-with-ggplot2/thecode3-1.png,"# Hexbin chart with default option
ggplot(data, aes(x=x, y=y) ) +
  geom_hex() +
  theme_bw()
 
# Bin size control + color palette
ggplot(data, aes(x=x, y=y) ) +
  geom_hex(bins = 70) +
  scale_fill_continuous(type = ""viridis"") +
  theme_bw()","+,ggplot,aes,geom_hex,theme_bw,scale_fill_continuous",
2d-density-plot-with-ggplot2,thecode3-2,images/2d-density-plot-with-ggplot2/thecode3-2.png,,,
2d-density-plot-with-ggplot2,thecode4-1,images/2d-density-plot-with-ggplot2/thecode4-1.png,"# Show the contour only
ggplot(data, aes(x=x, y=y) ) +
  geom_density_2d()
 
# Show the area only
ggplot(data, aes(x=x, y=y) ) +
  stat_density_2d(aes(fill = ..level..), geom = ""polygon"")
 
# Area + contour
ggplot(data, aes(x=x, y=y) ) +
  stat_density_2d(aes(fill = ..level..), geom = ""polygon"", colour=""white"")
 
# Using raster
ggplot(data, aes(x=x, y=y) ) +
  stat_density_2d(aes(fill = ..density..), geom = ""raster"", contour = FALSE) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  theme(
    legend.position='none'
  )","+,ggplot,aes,geom_density_2d,stat_density_2d,scale_x_continuous,c,scale_y_continuous,theme",
2d-density-plot-with-ggplot2,thecode4-2,images/2d-density-plot-with-ggplot2/thecode4-2.png,,,
2d-density-plot-with-ggplot2,thecode5-1,images/2d-density-plot-with-ggplot2/thecode5-1.png,"# Call the palette with a number
ggplot(data, aes(x=x, y=y) ) +
  stat_density_2d(aes(fill = ..density..), geom = ""raster"", contour = FALSE) +
  scale_fill_distiller(palette=4, direction=-1) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  theme(
    legend.position='none'
  )
 
# The direction argument allows to reverse the palette
ggplot(data, aes(x=x, y=y) ) +
  stat_density_2d(aes(fill = ..density..), geom = ""raster"", contour = FALSE) +
  scale_fill_distiller(palette=4, direction=1) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  theme(
    legend.position='none'
  )
 
# You can also call the palette using a name.
ggplot(data, aes(x=x, y=y) ) +
  stat_density_2d(aes(fill = ..density..), geom = ""raster"", contour = FALSE) +
  scale_fill_distiller(palette= ""Spectral"", direction=1) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  theme(
    legend.position='none'
  )","+,ggplot,aes,stat_density_2d,scale_fill_distiller,-,scale_x_continuous,c,scale_y_continuous,theme",
2d-density-plot-with-ggplot2,thecode5-2,images/2d-density-plot-with-ggplot2/thecode5-2.png,,,
300-basic-lollipop-plot,thecode-1,images/300-basic-lollipop-plot/thecode-1.png,"# Libraries
library(ggplot2)

# Create data
data <- data.frame(x=seq(1,30), y=abs(rnorm(30)))
 
# Plot
ggplot(data, aes(x=x, y=y)) +
  geom_point() + 
  geom_segment( aes(x=x, xend=x, y=0, yend=y))","library,<-,data.frame,seq,abs,rnorm,+,ggplot,aes,geom_point,geom_segment","geom_point,geom_segment"
300-basic-lollipop-plot,thecode2-1,images/300-basic-lollipop-plot/thecode2-1.png,"# Libraries
library(ggplot2)

# Create data
data <- data.frame(
  x=LETTERS[1:26], 
  y=abs(rnorm(26))
)
 
# Plot
ggplot(data, aes(x=x, y=y)) +
  geom_point() + 
  geom_segment( aes(x=x, xend=x, y=0, yend=y))","library,<-,data.frame,[,:,abs,rnorm,+,ggplot,aes,geom_point,geom_segment","geom_point,geom_segment"
301-custom-lollipop-chart,thecode-1,images/301-custom-lollipop-chart/thecode-1.png,"# Library
library(tidyverse)
 
# Create data
data <- data.frame(
  x=LETTERS[1:26],
  y=abs(rnorm(26))
)
 
# plot
ggplot(data, aes(x=x, y=y)) +
  geom_segment( aes(x=x, xend=x, y=0, yend=y)) +
  geom_point( size=5, color=""red"", fill=alpha(""orange"", 0.3), alpha=0.7, shape=21, stroke=2) ","library,<-,data.frame,[,:,abs,rnorm,+,ggplot,aes,geom_segment,geom_point,alpha","geom_segment,geom_point"
301-custom-lollipop-chart,thecode2-1,images/301-custom-lollipop-chart/thecode2-1.png,"# Libraries
library(ggplot2)

# Create data
data <- data.frame(
  x=LETTERS[1:26],
  y=abs(rnorm(26))
)

# Plot
ggplot(data, aes(x=x, y=y)) +
  geom_segment( aes(x=x, xend=x, y=0, yend=y) , size=1, color=""blue"", linetype=""dotdash"" ) +
  geom_point()","library,<-,data.frame,[,:,abs,rnorm,+,ggplot,aes,geom_segment,geom_point","geom_segment,geom_point"
301-custom-lollipop-chart,thecode3-1,images/301-custom-lollipop-chart/thecode3-1.png,"# Libraries
library(ggplot2)

# Create data
data <- data.frame(
  x=LETTERS[1:26],
  y=abs(rnorm(26))
)

# Plot
ggplot(data, aes(x=x, y=y)) +
  geom_segment( aes(x=x, xend=x, y=0, yend=y), color=""grey"") +
  geom_point( color=""orange"", size=4) +
  theme_light() +
  theme(
    panel.grid.major.x = element_blank(),
    panel.border = element_blank(),
    axis.ticks.x = element_blank()
  ) +
  xlab("""") +
  ylab(""Value of Y"")","library,<-,data.frame,[,:,abs,rnorm,+,ggplot,aes,geom_segment,geom_point,theme_light,theme,element_blank,xlab,ylab","geom_segment,geom_point"
301-custom-lollipop-chart,thecode4-1,images/301-custom-lollipop-chart/thecode4-1.png,"# Libraries
library(ggplot2)

# Create data
data <- data.frame(
  x=LETTERS[1:26],
  y=abs(rnorm(26))
)

# Horizontal version
ggplot(data, aes(x=x, y=y)) +
  geom_segment( aes(x=x, xend=x, y=0, yend=y), color=""skyblue"") +
  geom_point( color=""blue"", size=4, alpha=0.6) +
  theme_light() +
  coord_flip() +
  theme(
    panel.grid.major.y = element_blank(),
    panel.border = element_blank(),
    axis.ticks.y = element_blank()
  )","library,<-,data.frame,[,:,abs,rnorm,+,ggplot,aes,geom_segment,geom_point,theme_light,coord_flip,theme,element_blank","geom_segment,geom_point"
301-custom-lollipop-chart,thecode5-1,images/301-custom-lollipop-chart/thecode5-1.png,"# Libraries
library(ggplot2)

# Create data
data <- data.frame(
  x=LETTERS[1:26],
  y=abs(rnorm(26))
)

# Change baseline
ggplot(data, aes(x=x, y=y)) +
  geom_segment( aes(x=x, xend=x, y=1, yend=y), color=""grey"") +
  geom_point( color=""orange"", size=4) +
  theme_light() +
  theme(
    panel.grid.major.x = element_blank(),
    panel.border = element_blank(),
    axis.ticks.x = element_blank()
  ) +
  xlab("""") +
  ylab(""Value of Y"")
","library,<-,data.frame,[,:,abs,rnorm,+,ggplot,aes,geom_segment,geom_point,theme_light,theme,element_blank,xlab,ylab","geom_segment,geom_point"
302-lollipop-chart-with-conditional-color,thecode-1,images/302-lollipop-chart-with-conditional-color/thecode-1.png,"# library
library(ggplot2)
library(dplyr)

# Create data (this takes more sense with a numerical X axis)
x <- seq(0, 2*pi, length.out=100)
data <- data.frame(
  x=x, 
  y=sin(x) + rnorm(100, sd=0.2)
)
 
# Add a column with your condition for the color
data <- data %>% 
  mutate(mycolor = ifelse(y>0, ""type1"", ""type2""))
 
# plot
ggplot(data, aes(x=x, y=y)) +
  geom_segment( aes(x=x, xend=x, y=0, yend=y, color=mycolor), size=1.3, alpha=0.9) +
  theme_light() +
  theme(
    legend.position = ""none"",
    panel.border = element_blank(),
  ) +
  xlab("""") +
  ylab(""Value of Y"")","library,<-,seq,*,data.frame,+,sin,rnorm,%>%,mutate,ifelse,>,ggplot,aes,geom_segment,theme_light,theme,element_blank,xlab,ylab",geom_segment
303-lollipop-plot-with-2-values,thecode-1,images/303-lollipop-plot-with-2-values/thecode-1.png,"# Library
library(ggplot2)
library(dplyr)
library(hrbrthemes)

# Create data
value1 <- abs(rnorm(26))*2
data <- data.frame(
  x=LETTERS[1:26], 
  value1=value1, 
  value2=value1+1+rnorm(26, sd=1) 
)
 
# Reorder data using average? Learn more about reordering in chart #267
data <- data %>% 
  rowwise() %>% 
  mutate( mymean = mean(c(value1,value2) )) %>% 
  arrange(mymean) %>% 
  mutate(x=factor(x, x))
 
# Plot
ggplot(data) +
  geom_segment( aes(x=x, xend=x, y=value1, yend=value2), color=""grey"") +
  geom_point( aes(x=x, y=value1), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
  geom_point( aes(x=x, y=value2), color=rgb(0.7,0.2,0.1,0.5), size=3 ) +
  coord_flip()+
  theme_ipsum() +
  theme(
    legend.position = ""none"",
  ) +
  xlab("""") +
  ylab(""Value of Y"")","library,<-,*,abs,rnorm,data.frame,[,:,+,%>%,rowwise,mutate,mean,c,arrange,factor,ggplot,geom_segment,aes,geom_point,rgb,coord_flip,theme_ipsum,theme,xlab,ylab","geom_segment,geom_point"
304-highlight-a-group-in-lollipop,thecode-1,images/304-highlight-a-group-in-lollipop/thecode-1.png,"# Library
library(ggplot2)
library(dplyr)
library(hrbrthemes)

# Create data
set.seed(1000)
data <- data.frame(
  x=LETTERS[1:26], 
  y=abs(rnorm(26))
)
 
# Reorder the data
data <- data %>%
  arrange(y) %>%
  mutate(x=factor(x,x))
  
# Plot
p <- ggplot(data, aes(x=x, y=y)) +
  geom_segment(
    aes(x=x, xend=x, y=0, yend=y), 
    color=ifelse(data$x %in% c(""A"",""D""), ""orange"", ""grey""), 
    size=ifelse(data$x %in% c(""A"",""D""), 1.3, 0.7)
  ) +
  geom_point(
    color=ifelse(data$x %in% c(""A"",""D""), ""orange"", ""grey""), 
    size=ifelse(data$x %in% c(""A"",""D""), 5, 2)
  ) +
  theme_ipsum() +
  coord_flip() +
  theme(
    legend.position=""none""
  ) +
  xlab("""") +
  ylab(""Value of Y"") +
  ggtitle(""How did groups A and D perform?"")

# Add annotation
p + annotate(""text"", x=grep(""D"", data$x), y=data$y[which(data$x==""D"")]*1.2, 
           label=""Group D is very impressive"", 
           color=""orange"", size=4 , angle=0, fontface=""bold"", hjust=0) + 
  
    annotate(""text"", x = grep(""A"", data$x), y = data$y[which(data$x==""A"")]*1.2, 
           label = paste(""Group A is not too bad\n (val="",data$y[which(data$x==""A"")] %>% round(2),"")"",sep="""" ) , 
           color=""orange"", size=4 , angle=0, fontface=""bold"", hjust=0) 
  
","library,set.seed,<-,data.frame,[,:,abs,rnorm,%>%,arrange,mutate,factor,+,ggplot,aes,geom_segment,ifelse,%in%,$,c,geom_point,theme_ipsum,coord_flip,theme,xlab,ylab,ggtitle,annotate,grep,*,which,==,paste,round","geom_segment,geom_point"
305-basic-circle-packing-with-one-level,thecode-1,images/305-basic-circle-packing-with-one-level/thecode-1.png,"# Libraries
library(packcircles)
library(ggplot2)
 
# Create data
data <- data.frame(group=paste(""Group"", letters[1:20]), value=sample(seq(1,100),20)) 
 
# Generate the layout. This function return a dataframe with one line per bubble. 
# It gives its center (x and y) and its radius, proportional of the value
packing <- circleProgressiveLayout(data$value, sizetype='area')
 
# We can add these packing information to the initial data frame
data <- cbind(data, packing)
 
# Check that radius is proportional to value. We don't want a linear relationship, since it is the AREA that must be proportionnal to the value
# plot(data$radius, data$value)
 
# The next step is to go from one center + a radius to the coordinates of a circle that
# is drawn by a multitude of straight lines.
dat.gg <- circleLayoutVertices(packing, npoints=50)
 
# Make the plot
ggplot() + 
  
  # Make the bubbles
  geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = ""black"", alpha = 0.6) +
  
  # Add text in the center of each bubble + control its size
  geom_text(data = data, aes(x, y, size=value, label = group)) +
  scale_size_continuous(range = c(1,4)) +
  
  # General theme:
  theme_void() + 
  theme(legend.position=""none"") +
  coord_equal()","library,<-,data.frame,paste,[,:,sample,seq,circleProgressiveLayout,$,cbind,circleLayoutVertices,+,ggplot,geom_polygon,aes,as.factor,geom_text,scale_size_continuous,c,theme_void,theme,coord_equal","circleProgressiveLayout,circleLayoutVertices,geom_polygon,geom_text"
306-custom-circle-packing-with-one-level,thecode-1,images/306-custom-circle-packing-with-one-level/thecode-1.png,"# libraries
library(packcircles)
library(ggplot2)
library(viridis)
 
# Create data
data <- data.frame(group=paste(""Group"", letters[1:20]), value=sample(seq(1,100),20)) 
 
# Generate the layout. sizetype can be area or radius, following your preference on what to be proportional to value.
packing <- circleProgressiveLayout(data$value, sizetype='area')
data <- cbind(data, packing)
dat.gg <- circleLayoutVertices(packing, npoints=50)
 
# Basic color customization
ggplot() + 
  geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = ""black"", alpha = 0.6) +
  scale_fill_manual(values = magma(nrow(data))) +
  geom_text(data = data, aes(x, y, size=value, label = group)) +
  scale_size_continuous(range = c(1,4)) +
  theme_void() + 
  theme(legend.position=""none"") +
  coord_equal()
 ","library,<-,data.frame,paste,[,:,sample,seq,circleProgressiveLayout,$,cbind,circleLayoutVertices,+,ggplot,geom_polygon,aes,as.factor,scale_fill_manual,magma,nrow,geom_text,scale_size_continuous,c,theme_void,theme,coord_equal","circleProgressiveLayout,circleLayoutVertices,geom_polygon,geom_text"
306-custom-circle-packing-with-one-level,thecode2-1,images/306-custom-circle-packing-with-one-level/thecode2-1.png,"# First I need to add the 'value' of each group to dat.gg.
# Here I repeat each value 51 times since I create my polygons with 50 lines
dat.gg$value <- rep(data$value, each=51)

# Plot
ggplot() + 
  
  # Make the bubbles
  geom_polygon(data = dat.gg, aes(x, y, group = id, fill=value), colour = ""black"", alpha = 0.6) +
  scale_fill_distiller(palette = ""BuPu"", direction = 1 ) +
 
  # Add text in the center of each bubble + control its size
  geom_text(data = data, aes(x, y, size=value, label = group)) +
  scale_size_continuous(range = c(1,4)) +
 
  # General theme:
  theme_void()  + 
  theme(legend.position=""none"") + 
  coord_equal()
 ","<-,$,rep,+,ggplot,geom_polygon,aes,scale_fill_distiller,geom_text,scale_size_continuous,c,theme_void,theme,coord_equal","geom_polygon,geom_text"
306-custom-circle-packing-with-one-level,thecode3-1,images/306-custom-circle-packing-with-one-level/thecode3-1.png,"ggplot() + 
  
  # Make the bubbles
  geom_polygon(data = dat.gg, aes(x, y, group = id, fill=value), colour = ""grey"", alpha = 0.6, size=.5) +
  scale_fill_distiller(palette = ""Spectral"", direction = 1 ) +
  
  # Add text in the center of each bubble + control its size
  geom_label(data = data, aes(x, y, size=value, label = group)) +
  scale_size_continuous(range = c(1,4)) +
  
  # General theme:
  theme_void()  + 
  theme(
    legend.position=""none"",
    plot.background = element_rect(fill=""black""),
    plot.title = element_text(color=""white"") 
  ) + 
  coord_equal() +
  ggtitle(""A custom circle packing with\nblack background"")","+,ggplot,geom_polygon,aes,scale_fill_distiller,geom_label,scale_size_continuous,c,theme_void,theme,element_rect,element_text,coord_equal,ggtitle","geom_polygon,geom_label"
307-add-space-in-circle-packing,thecode-1,images/307-add-space-in-circle-packing/thecode-1.png,"# libraries
library(packcircles)
library(ggplot2)
library(viridis)

# Create data
data <- data.frame(group=paste(""Group"", letters[1:20]), value=sample(seq(1,100),20)) 

# Generate the layout
packing <- circleProgressiveLayout(data$value, sizetype='area')
packing$radius <- 0.95*packing$radius
data <- cbind(data, packing)
dat.gg <- circleLayoutVertices(packing, npoints=50)

# Plot 
ggplot() + 
  geom_polygon(data = dat.gg, aes(x, y, group = id, fill=id), colour = ""black"", alpha = 0.6) +
  scale_fill_viridis() +
  geom_text(data = data, aes(x, y, size=value, label = group), color=""black"") +
  theme_void() + 
  theme(legend.position=""none"")+ 
  coord_equal()","library,<-,data.frame,paste,[,:,sample,seq,circleProgressiveLayout,$,*,cbind,circleLayoutVertices,+,ggplot,geom_polygon,aes,scale_fill_viridis,geom_text,theme_void,theme,coord_equal","circleProgressiveLayout,circleLayoutVertices,geom_polygon,geom_text"
31-custom-colors-in-dendrogram,thecode8-1,images/31-custom-colors-in-dendrogram/thecode8-1.png,"# Build dataset (just copy and paste, this is NOT interesting)
sample <- paste(rep(""sample_"",24) , seq(1,24) , sep="""")
specie <- c(rep(""dicoccoides"" , 8) , rep(""dicoccum"" , 8) , rep(""durum"" , 8))
treatment <- rep(c(rep(""High"",4 ) , rep(""Low"",4)),3)
data <- data.frame(sample,specie,treatment)
for (i in seq(1:5)){
  gene=sample(c(1:40) , 24 )
  data=cbind(data , gene)
  colnames(data)[ncol(data)]=paste(""gene_"",i,sep="""")
 }
data[data$treatment==""High"" , c(4:8)]=data[data$treatment==""High"" , c(4:8)]+100
data[data$specie==""durum"" , c(4:8)]=data[data$specie==""durum"" , c(4:8)]-30
rownames(data) <- data[,1]    

# Have a look to the dataset
# head(data)

# Compute Euclidean distance between samples
dist=dist(data[ , c(4:8)] , diag=TRUE)

# Perfor clustering with hclust
hc <- hclust(dist)
dhc <- as.dendrogram(hc)

# Actually, each leaf of the tree has several attributes, like the color, the shape.. Have a look to it: 
specific_leaf <- dhc[[1]][[1]][[1]]
# specific_leaf
# attributes(specific_leaf)

#So if I Want to color each leaf of the Tree, I have to change the attribute of each leaf. This can be done using the dendrapply function. So I create a function that # # add 3 attributes to the leaf : one for the color (“lab.col”) ,one for the font “lab.font” and one for the size (“lab.cex”).
i=0
colLab<<-function(n){
    if(is.leaf(n)){
        
        #I take the current attributes
        a=attributes(n)
        
        #I deduce the line in the original data, and so the treatment and the specie.
        ligne=match(attributes(n)$label,data[,1])
        treatment=data[ligne,3];
            if(treatment==""Low""){col_treatment=""blue""};if(treatment==""High""){col_treatment=""red""}
        specie=data[ligne,2];
            if(specie==""dicoccoides""){col_specie=""red""};if(specie==""dicoccum""){col_specie=""Darkgreen""};if(specie==""durum""){col_specie=""blue""}
        
        #Modification of leaf attribute
        attr(n,""nodePar"")<-c(a$nodePar,list(cex=1.5,lab.cex=1,pch=20,col=col_treatment,lab.col=col_specie,lab.font=1,lab.cex=1))
        }
    return(n)
}

# Finally I just have to apply this to my dendrogram
dL <- dendrapply(dhc, colLab)
 
# And the plot
plot(dL , main=""structure of the population"")
legend(""topright"", 
     legend = c(""High Nitrogen"" , ""Low Nitrogen"" , ""Durum"" , ""Dicoccoides"" , ""Dicoccum""), 
     col = c(""red"", ""blue"" , ""blue"" , ""red"" , ""Darkgreen""), 
     pch = c(20,20,4,4,4), bty = ""n"",  pt.cex = 1.5, cex = 0.8 , 
     text.col = ""black"", horiz = FALSE, inset = c(0, 0.1))","<-,paste,rep,seq,c,data.frame,for,:,{,=,sample,cbind,[,colnames,ncol,==,$,+,-,rownames,dist,hclust,as.dendrogram,[[,<<-,function,if,is.leaf,attributes,match,attr,list,return,dendrapply,plot,legend",
311-add-labels-to-hierarchical-edge-bundling,thecode2-1,images/311-add-labels-to-hierarchical-edge-bundling/thecode2-1.png,"# Create a graph object
mygraph <- igraph::graph_from_data_frame( edges, vertices=vertices )
 
# The connection object must refer to the ids of the leaves:
from  <-  match( connect$from, vertices$name)
to  <-  match( connect$to, vertices$name)
 
# Basic usual argument
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) + 
  geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) +
  geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour=""skyblue"", width=0.9) +
  geom_node_text(aes(x = x*1.1, y=y*1.1, filter = leaf, label=name, angle = angle, hjust=hjust), size=1.5, alpha=1) +
  theme_void() +
  theme(
    legend.position=""none"",
    plot.margin=unit(c(0,0,0,0),""cm""),
  ) +
  expand_limits(x = c(-1.2, 1.2), y = c(-1.2, 1.2))","<-,graph_from_data_frame,match,$,+,ggraph,geom_node_point,aes,*,geom_conn_bundle,get_con,geom_node_text,theme_void,theme,unit,c,expand_limits,-","ggraph,geom_node_point,geom_conn_bundle,get_con,geom_node_text"
311-add-labels-to-hierarchical-edge-bundling,unnamed-chunk-2-1,images/311-add-labels-to-hierarchical-edge-bundling/unnamed-chunk-2-1.png,"ggraph(mygraph, layout = 'dendrogram', circular = TRUE) + 
  geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, width=0.9, aes(colour=..index..)) +
  scale_edge_colour_distiller(palette = ""RdPu"") +
  
  geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) +
  
  geom_node_point(aes(filter = leaf, x = x*1.07, y=y*1.07, colour=group, size=value, alpha=0.2)) +
  scale_colour_manual(values= rep( brewer.pal(9,""Paired"") , 30)) +
  scale_size_continuous( range = c(0.1,10) ) +
  
  theme_void() +
  theme(
    legend.position=""none"",
    plot.margin=unit(c(0,0,0,0),""cm""),
  ) +
  expand_limits(x = c(-1.3, 1.3), y = c(-1.3, 1.3))","+,ggraph,geom_conn_bundle,get_con,aes,scale_edge_colour_distiller,geom_node_text,*,geom_node_point,scale_colour_manual,rep,brewer.pal,scale_size_continuous,c,theme_void,theme,unit,expand_limits,-","ggraph,geom_conn_bundle,get_con,geom_node_text,geom_node_point"
313-basic-circle-packing-with-several-levels,thecode2-1,images/313-basic-circle-packing-with-several-levels/thecode2-1.png,"# Libraries
library(ggraph)
library(igraph)
library(tidyverse)
 
# We need a data frame giving a hierarchical structure. Let's consider the flare dataset:
edges <- flare$edges
 
# Usually we associate another dataset that give information about each node of the dataset:
vertices <- flare$vertices
 
# Then we have to make a 'graph' object using the igraph library:
mygraph <- graph_from_data_frame( edges, vertices=vertices )
 
# Make the plot
ggraph(mygraph, layout = 'circlepack') + 
  geom_node_circle() +
  theme_void()","library,<-,$,graph_from_data_frame,+,ggraph,geom_node_circle,theme_void","ggraph,geom_node_circle"
313-basic-circle-packing-with-several-levels,thecode3a-1,images/313-basic-circle-packing-with-several-levels/thecode3a-1.png,"ggraph(mygraph, layout='dendrogram', circular=TRUE) + 
  geom_edge_diagonal() +
  theme_void() +
  theme(legend.position=""none"")","+,ggraph,geom_edge_diagonal,theme_void,theme","ggraph,geom_edge_diagonal"
313-basic-circle-packing-with-several-levels,thecode3b-1,images/313-basic-circle-packing-with-several-levels/thecode3b-1.png,"ggraph(mygraph, layout='dendrogram', circular=FALSE) + 
  geom_edge_diagonal() +
  theme_void() +
  theme(legend.position=""none"")","+,ggraph,geom_edge_diagonal,theme_void,theme","ggraph,geom_edge_diagonal"
313-basic-circle-packing-with-several-levels,thecode3c-1,images/313-basic-circle-packing-with-several-levels/thecode3c-1.png,"ggraph(mygraph, 'treemap', weight = size) + 
  geom_node_tile(aes(fill = depth), size = 0.25) +
  theme_void() +
  theme(legend.position=""none"")
","+,ggraph,geom_node_tile,aes,theme_void,theme","ggraph,geom_node_tile"
313-basic-circle-packing-with-several-levels,thecode3d-1,images/313-basic-circle-packing-with-several-levels/thecode3d-1.png,"ggraph(mygraph, 'partition', circular = TRUE) + 
  geom_node_arc_bar(aes(fill = depth), size = 0.25) +
  theme_void() +
  theme(legend.position=""none"")","+,ggraph,geom_node_arc_bar,aes,theme_void,theme","ggraph,geom_node_arc_bar"
313-basic-circle-packing-with-several-levels,thecode3e-1,images/313-basic-circle-packing-with-several-levels/thecode3e-1.png,"ggraph(mygraph) + 
  geom_edge_link() + 
  geom_node_point() +
  theme_void() +
  theme(legend.position=""none"")","+,ggraph,geom_edge_link,geom_node_point,theme_void,theme","ggraph,geom_edge_link,geom_node_point"
314-custom-circle-packing-with-several-levels,thecode2-1,images/314-custom-circle-packing-with-several-levels/thecode2-1.png,"# Libraries
library(ggraph)
library(igraph)
library(tidyverse)
library(viridis)
 
# We need a data frame giving a hierarchical structure. Let's consider the flare dataset:
edges <- flare$edges
vertices <- flare$vertices
mygraph <- graph_from_data_frame( edges, vertices=vertices )
 
# Control the size of each circle: (use the size column of the vertices data frame)
ggraph(mygraph, layout = 'circlepack', weight=size) + 
  geom_node_circle() +
  theme_void()","library,<-,$,graph_from_data_frame,+,ggraph,geom_node_circle,theme_void","ggraph,geom_node_circle"
314-custom-circle-packing-with-several-levels,thecode3a-1,images/314-custom-circle-packing-with-several-levels/thecode3a-1.png,"# Left: color depends of depth
p <- ggraph(mygraph, layout = 'circlepack', weight=size) + 
  geom_node_circle(aes(fill = depth)) +
  theme_void() + 
  theme(legend.position=""FALSE"")
p","<-,+,ggraph,geom_node_circle,aes,theme_void,theme","ggraph,geom_node_circle"
314-custom-circle-packing-with-several-levels,thecode3b-1,images/314-custom-circle-packing-with-several-levels/thecode3b-1.png,"# Adjust color palette: viridis
p + scale_fill_viridis()","+,scale_fill_viridis",
314-custom-circle-packing-with-several-levels,thecode3c-1,images/314-custom-circle-packing-with-several-levels/thecode3c-1.png,"# Adjust color palette: colorBrewer
p + scale_fill_distiller(palette = ""RdPu"") ","+,scale_fill_distiller",
314-custom-circle-packing-with-several-levels,thecode4a-1,images/314-custom-circle-packing-with-several-levels/thecode4a-1.png,"# Create a subset of the dataset (I remove 1 level)
edges <- flare$edges %>% 
  filter(to %in% from) %>% 
  droplevels()
vertices <- flare$vertices %>% 
  filter(name %in% c(edges$from, edges$to)) %>% 
  droplevels()
vertices$size <- runif(nrow(vertices))
 
# Rebuild the graph object
mygraph <- graph_from_data_frame( edges, vertices=vertices )
 
# left
ggraph(mygraph, layout = 'circlepack', weight=size ) + 
  geom_node_circle(aes(fill = depth)) +
  geom_node_text( aes(label=shortName, filter=leaf, fill=depth, size=size)) +
  theme_void() + 
  theme(legend.position=""FALSE"") + 
  scale_fill_viridis()","<-,%>%,$,filter,%in%,droplevels,c,runif,nrow,graph_from_data_frame,+,ggraph,geom_node_circle,aes,geom_node_text,theme_void,theme,scale_fill_viridis","ggraph,geom_node_circle,geom_node_text"
314-custom-circle-packing-with-several-levels,thecode4b-1,images/314-custom-circle-packing-with-several-levels/thecode4b-1.png,"# Right 
ggraph(mygraph, layout = 'circlepack', weight=size ) + 
  geom_node_circle(aes(fill = depth)) +
  geom_node_label( aes(label=shortName, filter=leaf, size=size)) +
  theme_void() + 
  theme(legend.position=""FALSE"") + 
  scale_fill_viridis()","+,ggraph,geom_node_circle,aes,geom_node_label,theme_void,theme,scale_fill_viridis","ggraph,geom_node_circle,geom_node_label"
315-hide-first-level-in-circle-packing,thecode3a-1,images/315-hide-first-level-in-circle-packing/thecode3a-1.png,"# Libraries
library(ggraph)
library(igraph)
library(tidyverse)
library(viridis)
 
# We need a data frame giving a hierarchical structure. Let's consider the flare dataset:
edges=flare$edges
vertices = flare$vertices
mygraph <- graph_from_data_frame( edges, vertices=vertices )
 
# Hide the first level (right)
ggraph(mygraph, layout = 'circlepack', weight=size) + 
  geom_node_circle(aes(fill = as.factor(depth), color = as.factor(depth) )) +
  scale_fill_manual(values=c(""0"" = ""white"", ""1"" = viridis(4)[1], ""2"" = viridis(4)[2], ""3"" = viridis(4)[3], ""4""=viridis(4)[4])) +
  scale_color_manual( values=c(""0"" = ""white"", ""1"" = ""black"", ""2"" = ""black"", ""3"" = ""black"", ""4""=""black"") ) +
  theme_void() + 
  theme(legend.position=""FALSE"") 
 ","library,=,$,<-,graph_from_data_frame,+,ggraph,geom_node_circle,aes,as.factor,scale_fill_manual,c,[,viridis,scale_color_manual,theme_void,theme","ggraph,geom_node_circle"
315-hide-first-level-in-circle-packing,thecode3b-1,images/315-hide-first-level-in-circle-packing/thecode3b-1.png,"# Second one: hide 2 first levels
ggraph(mygraph, layout = 'circlepack', weight=size) + 
  geom_node_circle(aes(fill = as.factor(depth), color = as.factor(depth) )) +
  scale_fill_manual(values=c(""0"" = ""white"", ""1"" = ""white"", ""2"" = magma(4)[2], ""3"" = magma(4)[3], ""4""=magma(4)[4])) +
  scale_color_manual( values=c(""0"" = ""white"", ""1"" = ""white"", ""2"" = ""black"", ""3"" = ""black"", ""4""=""black"") ) +
  theme_void() + 
  theme(legend.position=""FALSE"")","+,ggraph,geom_node_circle,aes,as.factor,scale_fill_manual,c,[,magma,scale_color_manual,theme_void,theme","ggraph,geom_node_circle"
315-hide-first-level-in-circle-packing,thecode2-1,images/315-hide-first-level-in-circle-packing/thecode2-1.png,"# Add the data.tree library
library(data.tree)

# Rebuild the data
edges <-flare$edges
vertices <- flare$vertices

# Transform it in a 'tree' format
tree <- FromDataFrameNetwork(edges)

# Then I can easily get the level of each node, and add it to the initial data frame:
mylevels <- data.frame( name=tree$Get('name'), level=tree$Get(""level"") )
vertices <- vertices %>% 
  left_join(., mylevels, by=c(""name""=""name""))

# Now we can add label for level1 and 2 only for example:
vertices <- vertices %>% 
  mutate(new_label=ifelse(level==2, shortName, NA))
mygraph <- graph_from_data_frame( edges, vertices=vertices )

# Make the graph
ggraph(mygraph, layout = 'circlepack', weight=size) + 
  geom_node_circle(aes(fill = as.factor(depth), color = as.factor(depth) )) +
  scale_fill_manual(values=c(""0"" = ""white"", ""1"" = viridis(4)[1], ""2"" = viridis(4)[2], ""3"" = viridis(4)[3], ""4""=viridis(4)[4])) +
  scale_color_manual( values=c(""0"" = ""white"", ""1"" = ""black"", ""2"" = ""black"", ""3"" = ""black"", ""4""=""black"") ) +
  geom_node_label( aes(label=new_label), size=4) +
  theme_void() + 
  theme(legend.position=""FALSE"", plot.margin = unit(rep(0,4), ""cm""))","library,<-,$,FromDataFrameNetwork,data.frame,%>%,left_join,c,mutate,ifelse,==,graph_from_data_frame,+,ggraph,geom_node_circle,aes,as.factor,scale_fill_manual,[,viridis,scale_color_manual,geom_node_label,theme_void,theme,unit,rep","ggraph,geom_node_circle,geom_node_label"
320-the-basis-of-bubble-plot,thecode-1,images/320-the-basis-of-bubble-plot/thecode-1.png,"# Libraries
library(ggplot2)
library(dplyr)

# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year==""2007"") %>% dplyr::select(-year)

# Most basic bubble plot
ggplot(data, aes(x=gdpPercap, y=lifeExp, size = pop)) +
    geom_point(alpha=0.7)","library,<-,%>%,filter,==,select,-,+,ggplot,aes,geom_point",geom_point
320-the-basis-of-bubble-plot,thecode2-1,images/320-the-basis-of-bubble-plot/thecode2-1.png,"# Libraries
library(ggplot2)
library(dplyr)

# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year==""2007"") %>% dplyr::select(-year)

# Most basic bubble plot
data %>%
  arrange(desc(pop)) %>%
  mutate(country = factor(country, country)) %>%
  ggplot(aes(x=gdpPercap, y=lifeExp, size = pop)) +
    geom_point(alpha=0.5) +
    scale_size(range = c(.1, 24), name=""Population (M)"")","library,<-,%>%,filter,==,select,-,+,arrange,desc,mutate,factor,ggplot,aes,geom_point,scale_size,c",geom_point
320-the-basis-of-bubble-plot,thecode3-1,images/320-the-basis-of-bubble-plot/thecode3-1.png,"# Libraries
library(ggplot2)
library(dplyr)

# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year==""2007"") %>% dplyr::select(-year)

# Most basic bubble plot
data %>%
  arrange(desc(pop)) %>%
  mutate(country = factor(country, country)) %>%
  ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, color=continent)) +
    geom_point(alpha=0.5) +
    scale_size(range = c(.1, 24), name=""Population (M)"")","library,<-,%>%,filter,==,select,-,+,arrange,desc,mutate,factor,ggplot,aes,geom_point,scale_size,c",geom_point
320-the-basis-of-bubble-plot,thecode4-1,images/320-the-basis-of-bubble-plot/thecode4-1.png,"# Libraries
library(ggplot2)
library(dplyr)
library(hrbrthemes)
library(viridis)

# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year==""2007"") %>% dplyr::select(-year)

# Most basic bubble plot
data %>%
  arrange(desc(pop)) %>%
  mutate(country = factor(country, country)) %>%
  ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, fill=continent)) +
    geom_point(alpha=0.5, shape=21, color=""black"") +
    scale_size(range = c(.1, 24), name=""Population (M)"") +
    scale_fill_viridis(discrete=TRUE, guide=FALSE, option=""A"") +
    theme_ipsum() +
    theme(legend.position=""bottom"") +
    ylab(""Life Expectancy"") +
    xlab(""Gdp per Capita"") +
    theme(legend.position = ""none"")","library,<-,%>%,filter,==,select,-,+,arrange,desc,mutate,factor,ggplot,aes,geom_point,scale_size,c,scale_fill_viridis,theme_ipsum,theme,ylab,xlab",geom_point
325-background-map-from-geojson-format-in-r,thecode4-1,images/325-background-map-from-geojson-format-in-r/thecode4-1.png,"# Select only the region #6
spdf@data$mystate = substr( spdf@data$code, 1, 2)
spdf_region_6 = spdf[ spdf@data$mystate == ""06"" , ]

# plot the selected are with sp
library(sp)
par(mar=c(0,0,0,0))
plot(spdf_region_6, col=""grey"")","=,$,@,substr,[,==,library,par,c,plot",
325-background-map-from-geojson-format-in-r,thecode5-1,images/325-background-map-from-geojson-format-in-r/thecode5-1.png,"# 'fortify' the data to get a dataframe format required by ggplot2
library(broom)
spdf_fortified <- tidy(spdf_region_6)

# Plot it
library(ggplot2)
ggplot() +
  geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill=""#69b3a2"", color=""white"") +
  theme_void() +
  coord_map()","library,<-,tidy,+,ggplot,geom_polygon,aes,theme_void,coord_map",geom_polygon
327-chloropleth-map-from-geojson-with-ggplot2,thecode10-1,images/327-chloropleth-map-from-geojson-with-ggplot2/thecode10-1.png,"#plot(spdf)

# I need to fortify the data AND keep trace of the commune code! (Takes ~2 minutes)
library(broom)
spdf_fortified <- tidy(spdf, region = ""code"")

# Now I can plot this shape easily as described before:
library(ggplot2)
ggplot() +
  geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill=""white"", color=""grey"") +
  theme_void() +
  coord_map()","library,<-,tidy,+,ggplot,geom_polygon,aes,theme_void,coord_map",geom_polygon
327-chloropleth-map-from-geojson-with-ggplot2,thecode2-1,images/327-chloropleth-map-from-geojson-with-ggplot2/thecode2-1.png,"# read data
data <- read.table(""https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/data_on_french_states.csv"", header=T, sep="";"")
head(data)

# Distribution of the number of restaurant?
library(dplyr)
data %>%
  ggplot( aes(x=nb_equip)) +
    geom_histogram(bins=20, fill='skyblue', color='#69b3a2') + scale_x_log10()","<-,read.table,head,library,+,%>%,ggplot,aes,geom_histogram,scale_x_log10",geom_histogram
327-chloropleth-map-from-geojson-with-ggplot2,thecode3-1,images/327-chloropleth-map-from-geojson-with-ggplot2/thecode3-1.png,"ggplot() +
  geom_polygon(data = spdf_fortified, aes(fill = nb_equip, x = long, y = lat, group = group)) +
  theme_void() +
  coord_map()","+,ggplot,geom_polygon,aes,theme_void,coord_map",geom_polygon
327-chloropleth-map-from-geojson-with-ggplot2,thecode9-1,images/327-chloropleth-map-from-geojson-with-ggplot2/thecode9-1.png,"library(viridis)
p <- ggplot() +
  geom_polygon(data = spdf_fortified, aes(fill = nb_equip, x = long, y = lat, group = group) , size=0, alpha=0.9) +
  theme_void() +
  scale_fill_viridis(trans = ""log"", breaks=c(1,5,10,20,50,100), name=""Number of restaurant"", guide = guide_legend( keyheight = unit(3, units = ""mm""), keywidth=unit(12, units = ""mm""), label.position = ""bottom"", title.position = 'top', nrow=1) ) +
  labs(
    title = ""South of France Restaurant concentration"",
    subtitle = ""Number of restaurant per city district"",
    caption = ""Data: INSEE | Creation: Yan Holtz | r-graph-gallery.com""
  ) +
  theme(
    text = element_text(color = ""#22211d""),
    plot.background = element_rect(fill = ""#f5f5f2"", color = NA),
    panel.background = element_rect(fill = ""#f5f5f2"", color = NA),
    legend.background = element_rect(fill = ""#f5f5f2"", color = NA),

    plot.title = element_text(size= 22, hjust=0.01, color = ""#4e4d47"", margin = margin(b = -0.1, t = 0.4, l = 2, unit = ""cm"")),
    plot.subtitle = element_text(size= 17, hjust=0.01, color = ""#4e4d47"", margin = margin(b = -0.1, t = 0.43, l = 2, unit = ""cm"")),
    plot.caption = element_text( size=12, color = ""#4e4d47"", margin = margin(b = 0.3, r=-99, unit = ""cm"") ),

    legend.position = c(0.7, 0.09)
  ) +
  coord_map()
p","library,<-,+,ggplot,geom_polygon,aes,theme_void,scale_fill_viridis,c,guide_legend,unit,labs,theme,element_text,element_rect,margin,-,coord_map",geom_polygon
328-hexbin-map-of-the-usa,thecode-1,images/328-hexbin-map-of-the-usa/thecode-1.png,"# library
library(tidyverse)
library(geojsonio)
library(RColorBrewer)
library(rgdal)

# Download the Hexagones boundaries at geojson format here: https://team.carto.com/u/andrew/tables/andrew.us_states_hexgrid/public/map.

# Load this file. (Note: I stored in a folder called DATA)
spdf <- geojson_read(""DATA/us_states_hexgrid.geojson.json"",  what = ""sp"")

# Bit of reformating
spdf@data = spdf@data %>%
  mutate(google_name = gsub("" \\(United States\\)"", """", google_name))

# Show it
plot(spdf)","library,<-,geojson_read,=,@,%>%,mutate,gsub,plot",
328-hexbin-map-of-the-usa,thecode2-1,images/328-hexbin-map-of-the-usa/thecode2-1.png,"
# I need to 'fortify' the data to be able to show it with ggplot2 (we need a data frame format)
library(broom)
spdf@data = spdf@data %>% mutate(google_name = gsub("" \\(United States\\)"", """", google_name))
spdf_fortified <- tidy(spdf, region = ""google_name"")

# Calculate the centroid of each hexagon to add the label:
library(rgeos)
centers <- cbind.data.frame(data.frame(gCentroid(spdf, byid=TRUE), id=spdf@data$iso3166_2))
 
# Now I can plot this shape easily as described before:
ggplot() +
  geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill=""skyblue"", color=""white"") +
  geom_text(data=centers, aes(x=x, y=y, label=id)) +
  theme_void() +
  coord_map()","library,=,@,%>%,mutate,gsub,<-,tidy,cbind.data.frame,data.frame,gCentroid,$,+,ggplot,geom_polygon,aes,geom_text,theme_void,coord_map","geom_polygon,geom_text"
328-hexbin-map-of-the-usa,thecode3-1,images/328-hexbin-map-of-the-usa/thecode3-1.png,"# Load mariage data
data <- read.table(""https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/State_mariage_rate.csv"", header=T, sep="","", na.strings=""---"")
 
# Distribution of the marriage rate?
data %>% 
  ggplot( aes(x=y_2015)) + 
    geom_histogram(bins=20, fill='#69b3a2', color='white') + 
    scale_x_continuous(breaks = seq(1,30))","<-,read.table,+,%>%,ggplot,aes,geom_histogram,scale_x_continuous,seq",geom_histogram
328-hexbin-map-of-the-usa,thecode4-1,images/328-hexbin-map-of-the-usa/thecode4-1.png,"# Merge geospatial and numerical information
spdf_fortified <- spdf_fortified %>%
  left_join(. , data, by=c(""id""=""state"")) 
 
# Make a first chloropleth map
ggplot() +
  geom_polygon(data = spdf_fortified, aes(fill =  y_2015, x = long, y = lat, group = group)) +
  scale_fill_gradient(trans = ""log"") +
  theme_void() +
  coord_map()","<-,%>%,left_join,c,+,ggplot,geom_polygon,aes,scale_fill_gradient,theme_void,coord_map",geom_polygon
328-hexbin-map-of-the-usa,thecode5-1,images/328-hexbin-map-of-the-usa/thecode5-1.png,"# Prepare binning
spdf_fortified$bin <- cut( spdf_fortified$y_2015 , breaks=c(seq(5,10), Inf), labels=c(""5-6"", ""6-7"", ""7-8"", ""8-9"", ""9-10"", ""10+"" ), include.lowest = TRUE )
 
# Prepare a color scale coming from the viridis color palette
library(viridis)
my_palette <- rev(magma(8))[c(-1,-8)]
 
# plot
ggplot() +
  geom_polygon(data = spdf_fortified, aes(fill = bin, x = long, y = lat, group = group) , size=0, alpha=0.9) +
  geom_text(data=centers, aes(x=x, y=y, label=id), color=""white"", size=3, alpha=0.6) +
  theme_void() +
  scale_fill_manual( 
    values=my_palette, 
    name=""Wedding per 1000 people in 2015"", 
    guide = guide_legend( keyheight = unit(3, units = ""mm""), keywidth=unit(12, units = ""mm""), label.position = ""bottom"", title.position = 'top', nrow=1) 
  ) +
  ggtitle( ""A map of marriage rates, state by state"" ) +
  theme(
    legend.position = c(0.5, 0.9),
    text = element_text(color = ""#22211d""),
    plot.background = element_rect(fill = ""#f5f5f2"", color = NA), 
    panel.background = element_rect(fill = ""#f5f5f2"", color = NA), 
    legend.background = element_rect(fill = ""#f5f5f2"", color = NA),
    plot.title = element_text(size= 22, hjust=0.5, color = ""#4e4d47"", margin = margin(b = -0.1, t = 0.4, l = 2, unit = ""cm"")),
  )","<-,$,cut,c,seq,library,[,rev,magma,-,+,ggplot,geom_polygon,aes,geom_text,theme_void,scale_fill_manual,guide_legend,unit,ggtitle,theme,element_text,element_rect,margin","geom_polygon,geom_text"
329-hexbin-map-for-distribution,thecode-1,images/329-hexbin-map-for-distribution/thecode-1.png,"# Libraries
library(tidyverse)
library(viridis)
library(hrbrthemes)
library(mapdata)

# Load dataset from github
data <- read.table(""https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/17_ListGPSCoordinates.csv"", sep="","", header=T)

# Get the world polygon
world <- map_data(""world"")

# plot
ggplot(data, aes(x=homelon, y=homelat)) + 
    geom_polygon(data = world, aes(x=long, y = lat, group = group), fill=""grey"", alpha=0.3) +
    geom_bin2d(bins=100) +
    ggplot2::annotate(""text"", x = 175, y = 80, label=""Where people tweet about #Surf"", colour = ""black"", size=4, alpha=1, hjust=1) +
    ggplot2::annotate(""segment"", x = 100, xend = 175, y = 73, yend = 73, colour = ""black"", size=0.2, alpha=1) +
    theme_void() +
    ylim(-70, 80) +
    scale_fill_viridis(
      trans = ""log"", 
      breaks = c(1,7,54,403,3000),
      name=""Tweet # recorded in 8 months"", 
      guide = guide_legend( keyheight = unit(2.5, units = ""mm""), keywidth=unit(10, units = ""mm""), label.position = ""bottom"", title.position = 'top', nrow=1) 
    )  +
    ggtitle( """" ) +
    theme(
      legend.position = c(0.8, 0.09),
      legend.title=element_text(color=""black"", size=8),
      text = element_text(color = ""#22211d""),
      plot.title = element_text(size= 13, hjust=0.1, color = ""#4e4d47"", margin = margin(b = -0.1, t = 0.4, l = 2, unit = ""cm"")),
    ) ","library,<-,read.table,map_data,+,ggplot,aes,geom_polygon,geom_bin2d,annotate,theme_void,ylim,-,scale_fill_viridis,c,guide_legend,unit,ggtitle,theme,element_text,margin","geom_polygon,geom_bin2d"
329-hexbin-map-for-distribution,thecode2-1,images/329-hexbin-map-for-distribution/thecode2-1.png,"# Libraries
library(tidyverse)
library(viridis)
library(hrbrthemes)
library(mapdata)

# Load dataset from github
data <- read.table(""https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/17_ListGPSCoordinates.csv"", sep="","", header=T)

# plot
data %>%
  filter(homecontinent=='Europe') %>%
  ggplot( aes(x=homelon, y=homelat)) + 
    geom_hex(bins=59) +
    ggplot2::annotate(""text"", x = -27, y = 72, label=""Where people tweet about #Surf"", colour = ""black"", size=5, alpha=1, hjust=0) +
    ggplot2::annotate(""segment"", x = -27, xend = 10, y = 70, yend = 70, colour = ""black"", size=0.2, alpha=1) +
    theme_void() +
    xlim(-30, 70) +
    ylim(24, 72) +
    scale_fill_viridis(
      option=""B"",
      trans = ""log"", 
      breaks = c(1,7,54,403,3000),
      name=""Tweet # recorded in 8 months"", 
      guide = guide_legend( keyheight = unit(2.5, units = ""mm""), keywidth=unit(10, units = ""mm""), label.position = ""bottom"", title.position = 'top', nrow=1) 
    )  +
    ggtitle( """" ) +
    theme(
      legend.position = c(0.8, 0.09),
      legend.title=element_text(color=""black"", size=8),
      text = element_text(color = ""#22211d""),
      plot.background = element_rect(fill = ""#f5f5f2"", color = NA), 
      panel.background = element_rect(fill = ""#f5f5f2"", color = NA), 
      legend.background = element_rect(fill = ""#f5f5f2"", color = NA),
      plot.title = element_text(size= 13, hjust=0.1, color = ""#4e4d47"", margin = margin(b = -0.1, t = 0.4, l = 2, unit = ""cm"")),
    ) 
","library,<-,read.table,+,%>%,filter,==,ggplot,aes,geom_hex,annotate,-,theme_void,xlim,ylim,scale_fill_viridis,c,guide_legend,unit,ggtitle,theme,element_text,element_rect,margin",
331-basic-cartogram,thecode-1,images/331-basic-cartogram/thecode-1.png,"# Get the shape file of Africa
library(maptools)
data(wrld_simpl)
afr=wrld_simpl[wrld_simpl$REGION==2,]
 
# We can visualize the region's boundaries with the plot function
plot(afr)","library,data,=,[,==,$,plot",
331-basic-cartogram,thecode2-1,images/331-basic-cartogram/thecode2-1.png,"# We work with the cartogram library 
library(cartogram)
 
# construct a cartogram using the population in 2005
afr_cartogram <- cartogram(afr, ""POP2005"", itermax=5)
 
# This is a new geospatial object, we can visualise it!
plot(afr_cartogram)","library,<-,cartogram,plot",cartogram
331-basic-cartogram,thecode3-1,images/331-basic-cartogram/thecode3-1.png,"# It is a new geospatial object: we can use all the usual techniques on it! Let's start with a basic ggplot2 chloropleth map:
library(tidyverse)
library(broom)
spdf_fortified <- tidy(afr_cartogram)
spdf_fortified = spdf_fortified %>% left_join(. , afr_cartogram@data, by=c(""id""=""ISO3"")) 
ggplot() +
  geom_polygon(data = spdf_fortified, aes(fill = POP2005, x = long, y = lat, group = group) , size=0, alpha=0.9) +
  coord_map() +
  theme_void()
 ","library,<-,tidy,=,%>%,left_join,@,c,+,ggplot,geom_polygon,aes,coord_map,theme_void",geom_polygon
331-basic-cartogram,thecode4-1,images/331-basic-cartogram/thecode4-1.png,"# As seen before, we can do better with a bit of customization
library(viridis)
ggplot() +
  geom_polygon(data = spdf_fortified, aes(fill = POP2005/1000000, x = long, y = lat, group = group) , size=0, alpha=0.9) +
  theme_void() +
  scale_fill_viridis(name=""Population (M)"", breaks=c(1,50,100, 140), guide = guide_legend( keyheight = unit(3, units = ""mm""), keywidth=unit(12, units = ""mm""), label.position = ""bottom"", title.position = 'top', nrow=1)) +
  labs( title = ""Africa 2005 Population"" ) +
  ylim(-35,35) +
  theme(
    text = element_text(color = ""#22211d""), 
    plot.background = element_rect(fill = ""#f5f5f4"", color = NA), 
    panel.background = element_rect(fill = ""#f5f5f4"", color = NA), 
    legend.background = element_rect(fill = ""#f5f5f4"", color = NA),
    plot.title = element_text(size= 22, hjust=0.5, color = ""#4e4d47"", margin = margin(b = -0.1, t = 0.4, l = 2, unit = ""cm"")),
    legend.position = c(0.2, 0.26)
  ) +
  coord_map()","library,+,ggplot,geom_polygon,aes,/,theme_void,scale_fill_viridis,c,guide_legend,unit,labs,ylim,-,theme,element_text,element_rect,margin,coord_map",geom_polygon
332-hexbin-chloropleth-cartogram,thecode-1,images/332-hexbin-chloropleth-cartogram/thecode-1.png,"# library
library(tidyverse)
library(geojsonio)
library(RColorBrewer)
library(rgdal)

# Hexagones boundaries at geojson format were found here, and stored on my github https://team.carto.com/u/andrew/tables/andrew.us_states_hexgrid/public/map.

# Load this file.
spdf <- geojson_read(""https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/us_states_hexgrid.geojson.json"",  what = ""sp"")

# Bit of reformating
spdf@data = spdf@data %>% 
  mutate(google_name = gsub("" \\(United States\\)"", """", google_name))

# Show it
plot(spdf)","library,<-,geojson_read,=,@,%>%,mutate,gsub,plot",
332-hexbin-chloropleth-cartogram,thecode2-1,images/332-hexbin-chloropleth-cartogram/thecode2-1.png,"# Library
library(cartogram)

# Load the population per states (source: https://www.census.gov/data/tables/2017/demo/popest/nation-total.html)
pop <- read.table(""https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/pop_US.csv"", sep="","", header=T)
pop$pop <- pop$pop / 1000000
 
# merge both
spdf@data <- spdf@data %>% left_join(., pop, by=c(""google_name""=""state""))

# Compute the cartogram, using this population information
cartogram <- cartogram(spdf, 'pop')
 
# First look!
plot(cartogram)","library,<-,read.table,$,/,@,%>%,left_join,c,cartogram,plot",cartogram
332-hexbin-chloropleth-cartogram,thecode3-1,images/332-hexbin-chloropleth-cartogram/thecode3-1.png,"# Library
library(broom) # for the tidy function
library(rgeos) # for the gcentroid function

# tidy data to be drawn by ggplot2 (broom library of the tidyverse)
carto_fortified <- tidy(cartogram, region = ""google_name"")
carto_fortified <- carto_fortified %>% 
  left_join(. , cartogram@data, by=c(""id""=""google_name"")) 
 
# Calculate the position of state labels
centers <- cbind.data.frame(data.frame(gCentroid(cartogram, byid=TRUE), id=cartogram@data$iso3166_2))
 
# plot
ggplot() +
  geom_polygon(data = carto_fortified, aes(fill = pop, x = long, y = lat, group = group) , size=0.05, alpha=0.9, color=""black"") +
  scale_fill_gradientn(
    colours=brewer.pal(7,""BuPu""), name=""population (in M)"", 
    guide=guide_legend( keyheight = unit(3, units = ""mm""), 
                        keywidth=unit(12, units = ""mm""), 
                        title.position = 'top', 
                        label.position = ""bottom"") 
  ) +
  geom_text(data=centers, aes(x=x, y=y, label=id), color=""white"", size=3, alpha=0.6) +
  theme_void() +
  ggtitle( ""Another look on the US population"" ) +
  
  theme(
    legend.position = c(0.5, 0.9),
    legend.direction = ""horizontal"",
    text = element_text(color = ""#22211d""),
    plot.background = element_rect(fill = ""#f5f5f9"", color = NA), 
    panel.background = element_rect(fill = ""#f5f5f9"", color = NA), 
    legend.background = element_rect(fill = ""#f5f5f9"", color = NA),
    plot.title = element_text(size= 22, hjust=0.5, color = ""#4e4d47"", margin = margin(b = -0.1, t = 0.4, l = 2, unit = ""cm"")),
  ) +
  coord_map()
","library,<-,tidy,%>%,left_join,@,c,cbind.data.frame,data.frame,gCentroid,$,+,ggplot,geom_polygon,aes,scale_fill_gradientn,brewer.pal,guide_legend,unit,geom_text,theme_void,ggtitle,theme,element_text,element_rect,margin,-,coord_map","geom_polygon,geom_text"
334-basic-dendrogram-with-ggraph,thecode-1,images/334-basic-dendrogram-with-ggraph/thecode-1.png,"# libraries
library(ggraph)
library(igraph)
library(tidyverse)
 
# create an edge list data frame giving the hierarchical structure of your individuals
d1 <- data.frame(from=""origin"", to=paste(""group"", seq(1,5), sep=""""))
d2 <- data.frame(from=rep(d1$to, each=5), to=paste(""subgroup"", seq(1,25), sep=""_""))
edges <- rbind(d1, d2)
 
# Create a graph object 
mygraph <- graph_from_data_frame( edges )
 
# Basic tree
ggraph(mygraph, layout = 'dendrogram', circular = FALSE) + 
  geom_edge_diagonal() +
  geom_node_point() +
  theme_void()
","library,<-,data.frame,paste,seq,rep,$,rbind,graph_from_data_frame,+,ggraph,geom_edge_diagonal,geom_node_point,theme_void","ggraph,geom_edge_diagonal,geom_node_point"
334-basic-dendrogram-with-ggraph,thecode2-1,images/334-basic-dendrogram-with-ggraph/thecode2-1.png,"# libraries
library(ggraph)
library(igraph)
library(tidyverse)
 
# create a data frame 
data <- data.frame(
  level1=""CEO"",
  level2=c( rep(""boss1"",4), rep(""boss2"",4)),
  level3=paste0(""mister_"", letters[1:8])
)
 
# transform it to a edge list!
edges_level1_2 <- data %>% select(level1, level2) %>% unique %>% rename(from=level1, to=level2)
edges_level2_3 <- data %>% select(level2, level3) %>% unique %>% rename(from=level2, to=level3)
edge_list=rbind(edges_level1_2, edges_level2_3)
 
# Now we can plot that
mygraph <- graph_from_data_frame( edge_list )
ggraph(mygraph, layout = 'dendrogram', circular = FALSE) + 
  geom_edge_diagonal() +
  geom_node_point() +
  theme_void()","library,<-,data.frame,c,rep,paste0,[,:,%>%,select,rename,=,rbind,graph_from_data_frame,+,ggraph,geom_edge_diagonal,geom_node_point,theme_void","ggraph,geom_edge_diagonal,geom_node_point"
339-circular-dendrogram-with-ggraph,thecode8-1,images/339-circular-dendrogram-with-ggraph/thecode8-1.png,"# Libraries
library(ggraph)
library(igraph)
library(tidyverse)
library(RColorBrewer) 
# create a data frame giving the hierarchical structure of your individuals
d1=data.frame(from=""origin"", to=paste(""group"", seq(1,10), sep=""""))
d2=data.frame(from=rep(d1$to, each=10), to=paste(""subgroup"", seq(1,100), sep=""_""))
edges=rbind(d1, d2)
 
# create a vertices data.frame. One line per object of our hierarchy
vertices = data.frame(
  name = unique(c(as.character(edges$from), as.character(edges$to))) , 
  value = runif(111)
) 
# Let's add a column with the group of each name. It will be useful later to color points
vertices$group = edges$from[ match( vertices$name, edges$to ) ]
 
 
#Let's add information concerning the label we are going to add: angle, horizontal adjustement and potential flip
#calculate the ANGLE of the labels
vertices$id=NA
myleaves=which(is.na( match(vertices$name, edges$from) ))
nleaves=length(myleaves)
vertices$id[ myleaves ] = seq(1:nleaves)
vertices$angle= 90 - 360 * vertices$id / nleaves
 
# calculate the alignment of labels: right or left
# If I am on the left part of the plot, my labels have currently an angle < -90
vertices$hjust<-ifelse( vertices$angle < -90, 1, 0)
 
# flip angle BY to make them readable
vertices$angle<-ifelse(vertices$angle < -90, vertices$angle+180, vertices$angle)
 
# Create a graph object
mygraph <- graph_from_data_frame( edges, vertices=vertices )
 
# Make the plot
ggraph(mygraph, layout = 'dendrogram', circular = TRUE) + 
  geom_edge_diagonal(colour=""grey"") +
  scale_edge_colour_distiller(palette = ""RdPu"") +
  geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2.7, alpha=1) +
  geom_node_point(aes(filter = leaf, x = x*1.07, y=y*1.07, colour=group, size=value, alpha=0.2)) +
  scale_colour_manual(values= rep( brewer.pal(9,""Paired"") , 30)) +
  scale_size_continuous( range = c(0.1,10) ) +
  theme_void() +
  theme(
    legend.position=""none"",
    plot.margin=unit(c(0,0,0,0),""cm""),
  ) +
  expand_limits(x = c(-1.3, 1.3), y = c(-1.3, 1.3))","library,=,data.frame,paste,seq,rep,$,rbind,unique,c,as.character,runif,[,match,which,is.na,length,:,-,/,*,<-,ifelse,<,+,graph_from_data_frame,ggraph,geom_edge_diagonal,scale_edge_colour_distiller,geom_node_text,aes,geom_node_point,scale_colour_manual,brewer.pal,scale_size_continuous,theme_void,theme,unit,expand_limits","ggraph,geom_edge_diagonal,geom_node_text,geom_node_point"
340-custom-your-dendrogram-with-dendextend,thecode-1,images/340-custom-your-dendrogram-with-dendextend/thecode-1.png,"# Library
library(tidyverse)
 
# Data
head(mtcars)
 
# Clusterisation using 3 variables
mtcars %>% 
  select(mpg, cyl, disp) %>% 
  dist() %>% 
  hclust() %>% 
  as.dendrogram() -> dend
 
# Plot
par(mar=c(7,3,1,1))  # Increase bottom margin to have the complete label
plot(dend)","library,head,<-,%>%,select,dist,hclust,as.dendrogram,par,c,plot",
340-custom-your-dendrogram-with-dendextend,thecodeA-1,images/340-custom-your-dendrogram-with-dendextend/thecodeA-1.png,"# library
library(dendextend)

# Chart (left)
dend %>% 
  # Custom branches
  set(""branches_col"", ""grey"") %>% set(""branches_lwd"", 3) %>%
  # Custom labels
  set(""labels_col"", ""orange"") %>% set(""labels_cex"", 0.8) %>%
  plot()","library,%>%,set,plot",
340-custom-your-dendrogram-with-dendextend,thecodeB-1,images/340-custom-your-dendrogram-with-dendextend/thecodeB-1.png,"# Middle
dend %>% 
  set(""nodes_pch"", 19)  %>% 
  set(""nodes_cex"", 0.7) %>% 
  set(""nodes_col"", ""orange"") %>% 
  plot()","%>%,set,plot",
340-custom-your-dendrogram-with-dendextend,thecodeC-1,images/340-custom-your-dendrogram-with-dendextend/thecodeC-1.png,"# right
dend %>% 
  set(""leaves_pch"", 19)  %>% 
  set(""leaves_cex"", 0.7) %>% 
  set(""leaves_col"", ""skyblue"") %>% 
  plot()
","%>%,set,plot",
340-custom-your-dendrogram-with-dendextend,thecode2A-1,images/340-custom-your-dendrogram-with-dendextend/thecode2A-1.png,"# Color in function of the cluster
par(mar=c(1,1,1,7))
dend %>%
  set(""labels_col"", value = c(""skyblue"", ""orange"", ""grey""), k=3) %>%
  set(""branches_k_color"", value = c(""skyblue"", ""orange"", ""grey""), k = 3) %>%
  plot(horiz=TRUE, axes=FALSE)
abline(v = 350, lty = 2)","par,c,%>%,set,plot,abline",abline
340-custom-your-dendrogram-with-dendextend,thecode2B-1,images/340-custom-your-dendrogram-with-dendextend/thecode2B-1.png,"# Highlight a cluster with rectangle
par(mar=c(9,1,1,1))
dend %>%
  set(""labels_col"", value = c(""skyblue"", ""orange"", ""grey""), k=3) %>%
  set(""branches_k_color"", value = c(""skyblue"", ""orange"", ""grey""), k = 3) %>%
  plot(axes=FALSE)
rect.dendrogram( dend, k=3, lty = 5, lwd = 0, x=1, col=rgb(0.1, 0.2, 0.4, 0.1) ) 
","par,c,%>%,set,plot,rect.dendrogram,rgb",rect.dendrogram
340-custom-your-dendrogram-with-dendextend,thecode3-1,images/340-custom-your-dendrogram-with-dendextend/thecode3-1.png,"# Create a vector of colors, darkgreen if am is 0, green if 1.
my_colors <- ifelse(mtcars$am==0, ""forestgreen"", ""green"")
 
# Make the dendrogram
par(mar=c(10,1,1,1))
dend %>%
  set(""labels_col"", value = c(""skyblue"", ""orange"", ""grey""), k=3) %>%
  set(""branches_k_color"", value = c(""skyblue"", ""orange"", ""grey""), k = 3) %>%
  set(""leaves_pch"", 19)  %>% 
  set(""nodes_cex"", 0.7) %>% 
  plot(axes=FALSE)
 
# Add the colored bar
colored_bars(colors = my_colors, dend = dend, rowLabels = ""am"")","<-,ifelse,==,$,par,c,%>%,set,plot,colored_bars",colored_bars
340-custom-your-dendrogram-with-dendextend,thecode4-1,images/340-custom-your-dendrogram-with-dendextend/thecode4-1.png,"# Make 2 dendrograms, using 2 different clustering methods
d1 <- USArrests %>% dist() %>% hclust( method=""average"" ) %>% as.dendrogram()
d2 <- USArrests %>% dist() %>% hclust( method=""complete"" ) %>% as.dendrogram()
 
# Custom these kendo, and place them in a list
dl <- dendlist(
  d1 %>% 
    set(""labels_col"", value = c(""skyblue"", ""orange"", ""grey""), k=3) %>%
    set(""branches_lty"", 1) %>%
    set(""branches_k_color"", value = c(""skyblue"", ""orange"", ""grey""), k = 3),
  d2 %>% 
    set(""labels_col"", value = c(""skyblue"", ""orange"", ""grey""), k=3) %>%
    set(""branches_lty"", 1) %>%
    set(""branches_k_color"", value = c(""skyblue"", ""orange"", ""grey""), k = 3)
)
 
# Plot them together
tanglegram(dl, 
           common_subtrees_color_lines = FALSE, highlight_distinct_edges  = TRUE, highlight_branches_lwd=FALSE, 
           margin_inner=7,
           lwd=2
)","<-,%>%,dist,hclust,as.dendrogram,dendlist,set,c,tanglegram",
341-stacked-barplot-with-negative-values,thecode2-1,images/341-stacked-barplot-with-negative-values/thecode2-1.png," # library
library(ggplot2)

# plot
ggplot(data_long, aes(fill=group, y=value, x=x)) + 
  geom_bar(position=""stack"", stat=""identity"")","library,+,ggplot,aes,geom_bar",geom_bar
341-stacked-barplot-with-negative-values,thecode3-1,images/341-stacked-barplot-with-negative-values/thecode3-1.png," # library
library(ggplot2)
library(hrbrthemes)
library(viridis)

# plot
ggplot(data_long, aes(fill=group, y=value, x=x)) + 
  geom_bar(position=""stack"", stat=""identity"") + 
  scale_fill_viridis(discrete=TRUE, name="""") +
  theme_ipsum() +
  ylab(""Money input"") + 
  xlab(""Month"")","library,+,ggplot,aes,geom_bar,scale_fill_viridis,theme_ipsum,ylab,xlab",geom_bar
342-introduction-to-waffle-plot-with-R,thecode-1,images/342-introduction-to-waffle-plot-with-R/thecode-1.png,"# Load the library
library(waffle)

# Vector
x <- c(30, 25, 20, 5)

# Waffle chart
waffle(x, rows = 8)","library,<-,c,waffle",
342-introduction-to-waffle-plot-with-R,thecode2-1,images/342-introduction-to-waffle-plot-with-R/thecode2-1.png,"# install.packages(""waffle"", repos = ""https://cinc.rud.is"")
library(waffle)

# Creating a simple data frame
mypizza <- data.frame(
  ingredients = c(""Cheese"",""Tomatoes"",""Mushroom"",""Pepperoni""),
  vals = c(30, 25, 20, 5)
)

waffle(mypizza)","library,<-,data.frame,c,waffle",
342-introduction-to-waffle-plot-with-R,thecode3-1,images/342-introduction-to-waffle-plot-with-R/thecode3-1.png,"library(waffle)

# Creating a simple data frame
mypizza <- data.frame(
  ingredients = c(""Cheese"",""Tomatoes"",""Mushroom"",""Pepperoni""),
  vals = c(30, 25, 20, 5)
)

waffle(mypizza, 
   rows = 7, # Numbers of rows
   size = 1, # width of the separator between blocks
   colors = c(""#E8D630"", ""#FF0000"", ""#582900"",""#A91101""), # Colors of each group
   legend_pos = ""bottom"", # Position of the legend
   title = ""Most popular toppings on a pizza"" # Title
) ","library,<-,data.frame,c,waffle",
35-xyplot,thecode-1,images/35-xyplot/thecode-1.png,"# Library
library(lattice)

# create data :
sample <- paste(rep(""sample_"",40) , seq(1,40) , sep="""")
specie <- c(rep(""carot"" , 10) , rep(""cumcumber"" , 10) , rep(""wheat"" , 10) , rep(""Potatoe"" , 10) )
gene1 <- c( seq(5,14)+rnorm(10 , 4 , 1) , seq(5,14)+rnorm(10 , 4 , 1) , seq(5,14)+rnorm(10 , 4 , 1) , seq(5,14)+rnorm(10 , 4 , 1) )
gene2 <- c( seq(5,14)+rnorm(10 , 4 , 1) , seq(5,14)+rnorm(10 , 2 , 0.2) , seq(5,14)+rnorm(10 , 4 , 4) , seq(5,14)+rnorm(10 , 4 , 3) )
data <- data.frame(sample,specie,gene1,gene2)
 
# Make the graph
xyplot(gene1 ~ gene2 | specie , data=data , pch=20 , cex=3 , col=rgb(0.2,0.4,0.8,0.5) )","library,<-,paste,rep,seq,c,+,rnorm,data.frame,xyplot,~,|,rgb",xyplot
37-barplot-with-number-of-observation,thecode-1,images/37-barplot-with-number-of-observation/thecode-1.png,"# Data
data <- data.frame(
  name = c(""DD"",""with himself"",""with DC"",""with Silur"" ,""DC"",""with himself"",""with DD"",""with Silur"" ,""Silur"",""with himself"",""with DD"",""with DC"" ),
  average = sample(seq(1,10) , 12 , replace=T),
  number = sample(seq(4,39) , 12 , replace=T)
)

# Increase bottom margin
par(mar=c(6,4,4,4))


# Basic Barplot
my_bar <- barplot(data$average , border=F , names.arg=data$name , 
                  las=2 , 
                  col=c(rgb(0.3,0.1,0.4,0.6) , rgb(0.3,0.5,0.4,0.6) , rgb(0.3,0.9,0.4,0.6) ,  rgb(0.3,0.9,0.4,0.6)) , 
                  ylim=c(0,13) , 
                  main="""" )

# Add abline
abline(v=c(4.9 , 9.7) , col=""grey"")
 
# Add the text 
text(my_bar, data$average+0.4 , paste(""n: "", data$number, sep="""") ,cex=1) 
 
#Legende
legend(""topleft"", legend = c(""Alone"",""with Himself"",""With other genotype"" ) , 
     col = c(rgb(0.3,0.1,0.4,0.6) , rgb(0.3,0.5,0.4,0.6) , rgb(0.3,0.9,0.4,0.6) ,  rgb(0.3,0.9,0.4,0.6)) , 
     bty = ""n"", pch=20 , pt.cex = 2, cex = 0.8, horiz = FALSE, inset = c(0.05, 0.05))","<-,data.frame,c,sample,seq,par,barplot,$,rgb,abline,text,+,paste,legend","barplot,abline,text"
38-rcolorbrewers-palettes,thecode-1,images/38-rcolorbrewers-palettes/thecode-1.png,"library(RColorBrewer)
par(mar=c(3,4,2,2))
display.brewer.all()","library,par,c,display.brewer.all",
39-pie-plot-with-rcolorbrewer-palette,thecode-1,images/39-pie-plot-with-rcolorbrewer-palette/thecode-1.png,"# No margin
par(mar=c(0,0,1,0))

# Load RColorBrewer
library(RColorBrewer)

# Build a color palette, 5 colors coming from the BuPu color palette""
coul <- brewer.pal(5, ""BuPu"") 

# Build a pie chart with it
pie(rep(1, length(coul)), col = coul , main="""") ","par,c,library,<-,brewer.pal,pie,rep,length",pie
4-barplot-with-error-bar,thecode-1,images/4-barplot-with-error-bar/thecode-1.png,"# Load ggplot2
library(ggplot2)

# create dummy data
data <- data.frame(
  name=letters[1:5],
  value=sample(seq(4,15),5),
  sd=c(1,0.2,3,2,4)
)
 
# Most basic error bar
ggplot(data) +
    geom_bar( aes(x=name, y=value), stat=""identity"", fill=""skyblue"", alpha=0.7) +
    geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour=""orange"", alpha=0.9, size=1.3)
 ","library,<-,data.frame,[,:,sample,seq,c,+,ggplot,geom_bar,aes,geom_errorbar,-","geom_bar,geom_errorbar"
4-barplot-with-error-bar,thecode2-1,images/4-barplot-with-error-bar/thecode2-1.png,"# Load ggplot2
library(ggplot2)

# create dummy data
data <- data.frame(
  name=letters[1:5],
  value=sample(seq(4,15),5),
  sd=c(1,0.2,3,2,4)
)

# rectangle
ggplot(data) +
  geom_bar( aes(x=name, y=value), stat=""identity"", fill=""skyblue"", alpha=0.5) +
  geom_crossbar( aes(x=name, y=value, ymin=value-sd, ymax=value+sd), width=0.4, colour=""orange"", alpha=0.9, size=1.3)
 
# line
ggplot(data) +
  geom_bar( aes(x=name, y=value), stat=""identity"", fill=""skyblue"", alpha=0.5) +
  geom_linerange( aes(x=name, ymin=value-sd, ymax=value+sd), colour=""orange"", alpha=0.9, size=1.3)

# line + dot
ggplot(data) +
  geom_bar( aes(x=name, y=value), stat=""identity"", fill=""skyblue"", alpha=0.5) +
  geom_pointrange( aes(x=name, y=value, ymin=value-sd, ymax=value+sd), colour=""orange"", alpha=0.9, size=1.3)
 
# horizontal
ggplot(data) +
  geom_bar( aes(x=name, y=value), stat=""identity"", fill=""skyblue"", alpha=0.5) +
  geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour=""orange"", alpha=0.9, size=1.3) +
  coord_flip()","library,<-,data.frame,[,:,sample,seq,c,+,ggplot,geom_bar,aes,geom_crossbar,-,geom_linerange,geom_pointrange,geom_errorbar,coord_flip","geom_bar,geom_crossbar,geom_linerange,geom_pointrange,geom_errorbar"
4-barplot-with-error-bar,thecode2-2,images/4-barplot-with-error-bar/thecode2-2.png,,,
4-barplot-with-error-bar,thecode3-1,images/4-barplot-with-error-bar/thecode3-1.png,"# Load ggplot2
library(ggplot2)
library(dplyr)

# Data
data <- iris %>% select(Species, Sepal.Length) 
 
# Calculates mean, sd, se and IC
my_sum <- data %>%
  group_by(Species) %>%
  summarise( 
    n=n(),
    mean=mean(Sepal.Length),
    sd=sd(Sepal.Length)
  ) %>%
  mutate( se=sd/sqrt(n))  %>%
  mutate( ic=se * qt((1-0.05)/2 + .5, n-1))
 
# Standard deviation
ggplot(my_sum) +
  geom_bar( aes(x=Species, y=mean), stat=""identity"", fill=""forestgreen"", alpha=0.5) +
  geom_errorbar( aes(x=Species, ymin=mean-sd, ymax=mean+sd), width=0.4, colour=""orange"", alpha=0.9, size=1.5) +
  ggtitle(""using standard deviation"")
 
# Standard Error
ggplot(my_sum) +
  geom_bar( aes(x=Species, y=mean), stat=""identity"", fill=""forestgreen"", alpha=0.5) +
  geom_errorbar( aes(x=Species, ymin=mean-se, ymax=mean+se), width=0.4, colour=""orange"", alpha=0.9, size=1.5) +
  ggtitle(""using standard error"")
 
# Confidence Interval
ggplot(my_sum) +
  geom_bar( aes(x=Species, y=mean), stat=""identity"", fill=""forestgreen"", alpha=0.5) +
  geom_errorbar( aes(x=Species, ymin=mean-ic, ymax=mean+ic), width=0.4, colour=""orange"", alpha=0.9, size=1.5) +
  ggtitle(""using confidence interval"")","library,<-,%>%,select,group_by,summarise,n,mean,sd,mutate,/,sqrt,*,qt,+,(,-,ggplot,geom_bar,aes,geom_errorbar,ggtitle","geom_bar,geom_errorbar"
4-barplot-with-error-bar,thecode3-2,images/4-barplot-with-error-bar/thecode3-2.png,,,
4-barplot-with-error-bar,thecode4-1,images/4-barplot-with-error-bar/thecode4-1.png,"#Let's build a dataset : height of 10 sorgho and poacee sample in 3 environmental conditions (A, B, C)
data <- data.frame(
  specie=c(rep(""sorgho"" , 10) , rep(""poacee"" , 10) ),
  cond_A=rnorm(20,10,4),
  cond_B=rnorm(20,8,3),
  cond_C=rnorm(20,5,4)
)

#Let's calculate the average value for each condition and each specie with the *aggregate* function
bilan <- aggregate(cbind(cond_A,cond_B,cond_C)~specie , data=data , mean)
rownames(bilan) <- bilan[,1]
bilan <- as.matrix(bilan[,-1])
 
#Plot boundaries
lim <- 1.2*max(bilan)

#A function to add arrows on the chart
error.bar <- function(x, y, upper, lower=upper, length=0.1,...){
  arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...)
}
 
#Then I calculate the standard deviation for each specie and condition :
stdev <- aggregate(cbind(cond_A,cond_B,cond_C)~specie , data=data , sd)
rownames(stdev) <- stdev[,1]
stdev <- as.matrix(stdev[,-1]) * 1.96 / 10
 
#I am ready to add the error bar on the plot using my ""error bar"" function !
ze_barplot <- barplot(bilan , beside=T , legend.text=T,col=c(""blue"" , ""skyblue"") , ylim=c(0,lim) , ylab=""height"")
error.bar(ze_barplot,bilan, stdev)","<-,data.frame,c,rep,rnorm,aggregate,~,cbind,rownames,[,as.matrix,-,*,max,function,{,arrows,+,/,barplot,error.bar","arrows,barplot"
40-rcolorbrewer-get-a-longer-palette,thecode-1,images/40-rcolorbrewer-get-a-longer-palette/thecode-1.png,"# No margin
par(mar=c(0,0,1,0))

# Load RColorBrewer
library(RColorBrewer)

# Classic palette BuPu, with 4 colors
coul <- brewer.pal(4, ""PuOr"") 

# Add more colors to this palette :
coul <- colorRampPalette(coul)(25)

# Plot it
pie(rep(1, length(coul)), col = coul , main="""") ","par,c,library,<-,brewer.pal,colorRampPalette,pie,rep,length",pie
41-value-of-the-col-function,thecode-1,images/41-value-of-the-col-function/thecode-1.png,"par(mar=c(0,0,0,0))
plot(0, 0, type = ""n"", xlim = c(0, 1), ylim = c(0, 1), axes = FALSE, xlab = """", ylab = """")

# Parameters
line <- 31
col <- 21

# Rectangles
rect( rep((0:(col - 1)/col),line) ,  sort(rep((0:(line - 1)/line),col),decreasing=T) , rep((1:col/col),line) , sort(rep((1:line/line),col),decreasing=T),  
       border = ""light gray"" , col=colors()[seq(1,651)])

# Text
text( rep((0:(col - 1)/col),line)+0.02 ,  sort(rep((0:(line - 1)/line),col),decreasing=T)+0.01 , seq(1,651)  , cex=0.5)","par,c,plot,<-,rect,rep,(,/,:,-,sort,[,colors,seq,text,+","rect,text"
42-colors-names,thecode-1,images/42-colors-names/thecode-1.png,"# No margin around chart
par(mar=c(0,0,0,0))

# Empty chart
plot(0, 0, type = ""n"", xlim = c(0, 1), ylim = c(0, 1), axes = FALSE, xlab = """", ylab = """")

# Settings
line <- 25
col <- 5

# Add color background
rect(  
  rep((0:(col - 1)/col),line) ,  
  sort(rep((0:(line - 1)/line),col),decreasing=T),   
  rep((1:col/col),line) , 
  sort(rep((1:line/line),col),decreasing=T),  
  border = ""white"" , 
  col=colors()[seq(1,line*col)])

# Color names
text(  
  rep((0:(col - 1)/col),line)+0.1 ,  
  sort(rep((0:(line - 1)/line),col),decreasing=T)+0.015 , 
  colors()[seq(1,line*col)]  , 
  cex=1)","par,c,plot,<-,rect,rep,(,/,:,-,sort,[,colors,seq,*,text,+","rect,text"
43-rgb-colors,thecode-1,images/43-rgb-colors/thecode-1.png,"par(mfrow=c(2,3) , mar=c(2,2,2,1) , oma=c(4,5,1,1) )
 
line <- 6
col <- 6
red <- sort(rep(c(0,0.2,0.4,0.6,0.8,1),col))
green <- rep(c(0,0.2,0.4,0.6,0.8,1),line)
num <- 0
 
for(i in seq(0,1,0.2)){
    num <- num+1
    plot(0, 0, type = ""n"", xlim = c(0, 1), ylim = c(0, 1), axes = FALSE, xlab = """", ylab = """" )
    colors <- rgb(red,green,i,1)
    mtext(paste(""blue = "",i,sep="""") , side=3 , line=0.15 , col=""blue"" , font=2)
    rect(  rep((0:(col - 1)/col),line) ,  sort(rep((0:(line - 1)/line),col),decreasing=T)   ,   rep((1:col/col),line) , sort(rep((1:line/line),col),decreasing=T),  border = ""light gray"" , col=colors)
    axis(2 , at=c(17,14,11,8,5,2)/18-0.035 , labels=c(""0"",""0.2"",""0.4"",""0.6"",""0.8"",""1"") , tick=F , lty=6 , pos=0.01)
    axis(3 , at=c(1.5 , 3.5 , 5.5 , 7.5 , 9.5 , 11.5)/12-0.045 , labels=c(""0"",""0.2"",""0.4"",""0.6"",""0.8"",""1"") , tick=F , pos=-0.15)
    }
 
mtext(""Quantity of red"", side=2 , line=34 , col=""red"" , font=2 , at=1.2)
mtext(""Quantity of green"", side=1 , line=3 , at=-0.8 , col=""forestgreen"" , font=2)","par,c,<-,sort,rep,for,seq,{,+,plot,rgb,mtext,paste,rect,(,/,:,-,axis",rect
44-polynomial-curve-fitting,thecode-1,images/44-polynomial-curve-fitting/thecode-1.png,"x <- runif(300,  min=-10, max=10) 
y <- 0.1*x^3 - 0.5 * x^2 - x + 10 + rnorm(length(x),0,8) 
 
# plot of x and y :
plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3) 
 
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + I(x^2) + I(x^3))
 
# I can get the features of this model :
#summary(model)
#model$coefficients
#summary(model)$adj.r.squared
 
# For each value of x, I can get the value of y estimated by the model, and add it to the current plot !
myPredict <- predict( model ) 
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix], col=2, lwd=2 )  

# I add the features of the model to the plot
coeff <- round(model$coefficients , 2)
text(3, -70 , paste(""Model : "",coeff[1] , "" + "" , coeff[2] , ""*x""  , ""+"" , coeff[3] , ""*x^2"" , ""+"" , coeff[4] , ""*x^3"" , ""\n\n"" , ""P-value adjusted = "",round(summary(model)$adj.r.squared,2)))","<-,runif,-,+,*,^,rnorm,length,plot,rgb,lm,~,I,predict,$,sort,lines,[,round,text,paste,summary","lines,text"
45-confidence-interval-around-polynomial-curve-fitting,thecode-1,images/45-confidence-interval-around-polynomial-curve-fitting/thecode-1.png,"# We create 2 vectors x and y. It is a polynomial function.
x <- runif(300, min=-30, max=30) 
y <- -1.2*x^3 + 1.1 * x^2 - x + 10 + rnorm(length(x),0,100*abs(x)) 

# Basic plot of x and y :
plot(x,y,col=rgb(0.4,0.4,0.8,0.6), pch=16 , cex=1.3 , xlab="""" , ylab="""") 

# Can we find a polynome that fit this function ?
model <- lm(y ~ x + I(x^2) + I(x^3))

# I can get the features of this model :
#summary(model)
#model$coefficients
#summary(model)$adj.r.squared

#For each value of x, I can get the value of y estimated by the model, and the confidence interval around this value.
myPredict <- predict( model , interval=""predict"" )

#Finally, I can add it to the plot using the line and the polygon function with transparency.
ix <- sort(x,index.return=T)$ix
lines(x[ix], myPredict[ix , 1], col=2, lwd=2 )
polygon(c(rev(x[ix]), x[ix]), c(rev(myPredict[ ix,3]), myPredict[ ix,2]), col = rgb(0.7,0.7,0.7,0.4) , border = NA)","<-,runif,-,+,*,^,rnorm,length,abs,plot,rgb,lm,~,I,predict,$,sort,lines,[,polygon,c,rev","lines,polygon"
48-grouped-barplot-with-ggplot2,thecode-1,images/48-grouped-barplot-with-ggplot2/thecode-1.png," # library
library(ggplot2)
 
# create a dataset
specie <- c(rep(""sorgho"" , 3) , rep(""poacee"" , 3) , rep(""banana"" , 3) , rep(""triticum"" , 3) )
condition <- rep(c(""normal"" , ""stress"" , ""Nitrogen"") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
 
# Grouped
ggplot(data, aes(fill=condition, y=value, x=specie)) + 
    geom_bar(position=""dodge"", stat=""identity"")
 ","library,<-,c,rep,abs,rnorm,data.frame,+,ggplot,aes,geom_bar",geom_bar
48-grouped-barplot-with-ggplot2,thecode2-1,images/48-grouped-barplot-with-ggplot2/thecode2-1.png," # library
library(ggplot2)
 
# create a dataset
specie <- c(rep(""sorgho"" , 3) , rep(""poacee"" , 3) , rep(""banana"" , 3) , rep(""triticum"" , 3) )
condition <- rep(c(""normal"" , ""stress"" , ""Nitrogen"") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
 
# Stacked
ggplot(data, aes(fill=condition, y=value, x=specie)) + 
    geom_bar(position=""stack"", stat=""identity"")
 ","library,<-,c,rep,abs,rnorm,data.frame,+,ggplot,aes,geom_bar",geom_bar
48-grouped-barplot-with-ggplot2,thecode3-1,images/48-grouped-barplot-with-ggplot2/thecode3-1.png," # library
library(ggplot2)
 
# create a dataset
specie <- c(rep(""sorgho"" , 3) , rep(""poacee"" , 3) , rep(""banana"" , 3) , rep(""triticum"" , 3) )
condition <- rep(c(""normal"" , ""stress"" , ""Nitrogen"") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
 
# Stacked + percent
ggplot(data, aes(fill=condition, y=value, x=specie)) + 
    geom_bar(position=""fill"", stat=""identity"")
 ","library,<-,c,rep,abs,rnorm,data.frame,+,ggplot,aes,geom_bar",geom_bar
48-grouped-barplot-with-ggplot2,thecode4-1,images/48-grouped-barplot-with-ggplot2/thecode4-1.png,"# library
library(ggplot2)
library(viridis)
library(hrbrthemes)

# create a dataset
specie <- c(rep(""sorgho"" , 3) , rep(""poacee"" , 3) , rep(""banana"" , 3) , rep(""triticum"" , 3) )
condition <- rep(c(""normal"" , ""stress"" , ""Nitrogen"") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
 
# Small multiple
ggplot(data, aes(fill=condition, y=value, x=specie)) + 
    geom_bar(position=""stack"", stat=""identity"") +
    scale_fill_viridis(discrete = T) +
    ggtitle(""Studying 4 species.."") +
    theme_ipsum() +
    xlab("""")","library,<-,c,rep,abs,rnorm,data.frame,+,ggplot,aes,geom_bar,scale_fill_viridis,ggtitle,theme_ipsum,xlab",geom_bar
48-grouped-barplot-with-ggplot2,thecode5-1,images/48-grouped-barplot-with-ggplot2/thecode5-1.png,"# library
library(ggplot2)
library(viridis)
library(hrbrthemes)

# create a dataset
specie <- c(rep(""sorgho"" , 3) , rep(""poacee"" , 3) , rep(""banana"" , 3) , rep(""triticum"" , 3) )
condition <- rep(c(""normal"" , ""stress"" , ""Nitrogen"") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
 
# Graph
ggplot(data, aes(fill=condition, y=value, x=condition)) + 
    geom_bar(position=""dodge"", stat=""identity"") +
    scale_fill_viridis(discrete = T, option = ""E"") +
    ggtitle(""Studying 4 species.."") +
    facet_wrap(~specie) +
    theme_ipsum() +
    theme(legend.position=""none"") +
    xlab("""")
","library,<-,c,rep,abs,rnorm,data.frame,+,ggplot,aes,geom_bar,scale_fill_viridis,ggtitle,facet_wrap,~,theme_ipsum,theme,xlab","geom_bar,facet_wrap"
5-correlation-of-discrete-variables,thecode-1,images/5-correlation-of-discrete-variables/thecode-1.png,"#Let's create 2 discrete variables 
a <- c(1,1,3,4,5,5,1,1,2,3,4,1,3,2,1,1,5,1,4,3,2,3,1,0,2)
b <- c(1,2,3,5,5,5,2,1,1,3,4,3,3,4,1,1,4,1,4,2,2,3,0,0,1)
 
#I count the occurence of each couple of values. Eg : number of time a=1 and b=1, number of time a=1 and b=2 etc...
AA <- xyTable(a,b)
 
#Now I can plot this ! I represent the dots as big as the couple occurs often
coeff_bigger <- 2
plot(AA$x , AA$y , cex=AA$number*coeff_bigger  , pch=16 , col=rgb(0,0,1,0.5) , xlab= ""value of a"" , ylab=""value of b"" , xlim=c(0,6) , ylim=c(0,6) )
text(AA$x , AA$y , AA$number )
 
#Note : It's easy to make a function that will compute this kind of plot automaticaly :
represent_discrete_variable <- function(var1, var2 , coeff_bigger){
  AA=xyTable(var1,var2)
  plot(AA$x , AA$y , cex=AA$number*coeff_bigger  , pch=16 , col=""chocolate1"" , xlab= ""value of a"" , ylab=""value of b"" )
  text (AA$x , AA$y , AA$number )
}","<-,c,xyTable,plot,$,*,rgb,text,function,{,=","xyTable,text"
50-51-52-scatter-plot-with-ggplot2,unnamed-chunk-1-1,images/50-51-52-scatter-plot-with-ggplot2/unnamed-chunk-1-1.png,p1,,
50-51-52-scatter-plot-with-ggplot2,unnamed-chunk-2-1,images/50-51-52-scatter-plot-with-ggplot2/unnamed-chunk-2-1.png,p2,,
50-51-52-scatter-plot-with-ggplot2,unnamed-chunk-3-1,images/50-51-52-scatter-plot-with-ggplot2/unnamed-chunk-3-1.png,p3,,
59-nifty-graph,thecode-1,images/59-nifty-graph/thecode-1.png,"moxbuller = function(n) {   
    u = runif(n)   
    v = runif(n)   
    x = cos(2*pi*u)*sqrt(-2*log(v))  
    y = sin(2*pi*v)*sqrt(-2*log(u))
    r = list(x=x, y=y)
    return(r) 
}
r = moxbuller(50000) 
par(bg=""black"") 
par(mar=c(0,0,0,0)) 
plot(r$x,r$y, pch=""."", col=""blue"", cex=1.2)","=,function,{,runif,*,cos,sqrt,-,log,sin,list,return,moxbuller,par,c,plot,$",
6-graph-parameters-reminder,thecode-1,images/6-graph-parameters-reminder/thecode-1.png,"# initialization
par(mar=c(3,3,3,3))
num <- 0 ; 
num1 <- 0
plot(0,0 , xlim=c(0,21) , ylim=c(0.5,6.5), col=""white"" , yaxt=""n"" , ylab="""" , xlab="""")
 
#fill the graph
for (i in seq(1,20)){
  points(i,1 , pch=i , cex=3)
  points(i,2 , col=i , pch=16 , cex=3)
  points(i,3 , col=""black"" , pch=16 , cex=i*0.25)
  
  #lty
  if(i %in% c(seq(1,18,3))){
        num=num+1
    points(c(i,i+2), c(4,4) , col=""black"" , lty=num , type=""l"" , lwd=2)
        text(i+1.1 , 4.15 , num)
        }
  
  #type and lwd 
  if(i %in% c(seq(1,20,5))){
    num1=num1+1
    points(c(i,i+1,i+2,i+3), c(5,5,5,5) , col=""black""  , type=c(""p"",""l"",""b"",""o"")[num1] , lwd=2)
    text(i+1.1 , 5.2 , c(""p"",""l"",""b"",""o"")[num1] )
    points(c(i,i+1,i+2,i+3), c(6,6,6,6) , col=""black""  , type=""l"",  lwd=num1)
    text(i+1.1 , 6.2 , num1 )
 
    }
  }
 
#add axis
axis(2, at = c(1,2,3,4,5,6), labels = c(""pch"" , ""col"" , ""cex"" , ""lty"", ""type"" , ""lwd"" ), 
     tick = TRUE, col = ""black"", las = 1, cex.axis = 0.8)","par,c,<-,plot,for,seq,{,points,*,if,%in%,=,+,text,[,axis","points,text"
70-boxplot-with-categories-on-multiple-lines,unnamed-chunk-1-1,images/70-boxplot-with-categories-on-multiple-lines/unnamed-chunk-1-1.png,"# Create 2 vectors
a <- sample(2:24, 20 , replace=T)
b <- sample(4:14, 8 , replace=T)
 
# Make a list of these 2 vectors
C <- list(a,b)
 
# Change the names of the elements of the list :
names(C) <- c(paste(""Category 1\n n="" , length(a) , sep=""""), paste(""Category 2\n n="" , length(b) , sep=""""))
 
# Change the mgp argument: avoid text overlaps axis
par(mgp=c(3,2,0))
 
# Final Boxplot
boxplot(C , col=""#69b3a2"" , ylab=""value"" )","<-,sample,:,list,names,c,paste,length,par,boxplot",boxplot
71-split-screen-with-par-mfrow,thecode-1,images/71-split-screen-with-par-mfrow/thecode-1.png,"#Create data
a <- seq(1,29)+4*runif(29,0.4)
b <- seq(1,29)^2+runif(29,0.98)
 
#Divide the screen in 2 columns and 2 lines
par(mfrow=c(2,2))
 
#Add a plot in each sub-screen !
plot( a,b , pch=20)
plot(a-b , pch=18)
hist(a, border=F , col=rgb(0.2,0.2,0.8,0.7) , main="""")
boxplot(a , col=""grey"" , xlab=""a"")","<-,+,seq,*,runif,^,par,c,plot,-,hist,rgb,boxplot","hist,boxplot"
73-box-style-with-the-bty-function,unnamed-chunk-1-1,images/73-box-style-with-the-bty-function/unnamed-chunk-1-1.png,"# Cut the screen in 4 parts
par(mfrow=c(2,2))
 
#Create data
a=seq(1,29)+4*runif(29,0.4)
b=seq(1,29)^2+runif(29,0.98)
 
# First graph
par(bty=""l"")
boxplot(a , col=""#69b3a2"" , xlab=""bottom & left box"")
# Second
par(bty=""o"")
boxplot(b , col=""#69b3a2"" , xlab=""complete box"", horizontal=TRUE)
# Third
par(bty=""c"")
boxplot(a , col=""#69b3a2"" , xlab=""up & bottom & left box"", width=0.5)
# Fourth
par(bty=""n"")
boxplot(a , col=""#69b3a2"" , xlab=""no box"")","par,c,=,+,seq,*,runif,^,boxplot",boxplot
74-margin-and-oma-cheatsheet,thecode-1,images/74-margin-and-oma-cheatsheet/thecode-1.png,"# Margins area
par(oma=c(3,3,3,3)) # all sides have 3 lines of space
par(mar=c(5,4,4,2) + 0.1)

# Plot
plot(0:10, 0:10, type=""n"", xlab=""X"", ylab=""Y"") # type=""n"" hides the points

# Place text in the plot and color everything plot-related red
text(5,5, ""Plot"", col=""red"", cex=2)
box(col=""red"")

# Place text in the margins and label the margins, all in forestgreen  
mtext(""Margins"", side=3, line=2, cex=2, col=""forestgreen"")  
mtext(""par(mar=c(b,l,t,r))"", side=3, line=1, cex=1, col=""forestgreen"")  
mtext(""Line 0"", side=3, line=0, adj=1.0, cex=1, col=""forestgreen"")  
mtext(""Line 1"", side=3, line=1, adj=1.0, cex=1, col=""forestgreen"")  
mtext(""Line 2"", side=3, line=2, adj=1.0, cex=1, col=""forestgreen"")  
mtext(""Line 3"", side=3, line=3, adj=1.0, cex=1, col=""forestgreen"")  
box(""figure"", col=""forestgreen"")  
 
# Label the outer margin area and color it blue  
# Note the 'outer=TRUE' command moves us from the figure margins to the outer margins.  
mtext(""Outer Margin Area"", side=1, line=1, cex=2, col=""blue"", outer=TRUE)  
mtext(""par(oma=c(b,l,t,r))"", side=1, line=2, cex=1, col=""blue"", outer=TRUE)  
mtext(""Line 0"", side=1, line=0, adj=0.0, cex=1, col=""blue"", outer=TRUE)  
mtext(""Line 1"", side=1, line=1, adj=0.0, cex=1, col=""blue"", outer=TRUE)  
mtext(""Line 2"", side=1, line=2, adj=0.0, cex=1, col=""blue"", outer=TRUE)  
box(""outer"", col=""blue"")  ","par,c,+,plot,:,text,box,mtext",text
75-split-screen-with-layout,unnamed-chunk-1-1,images/75-split-screen-with-layout/unnamed-chunk-1-1.png,"# Dummy data
a <- seq(129,1)+4*runif(129,0.4)
b <- seq(1,129)^2+runif(129,0.98)
 
# Create the layout
nf <- layout( matrix(c(1,2), ncol=1) )

# Fill with plots
hist(a , breaks=30 , border=F , col=rgb(0.1,0.8,0.3,0.5) , xlab=""distribution of a"" , main="""")
boxplot(a , xlab=""a"" , col=rgb(0.8,0.8,0.3,0.5) , las=2)","<-,+,seq,*,runif,^,layout,matrix,c,hist,rgb,boxplot","hist,boxplot"
75-split-screen-with-layout,unnamed-chunk-3-1,images/75-split-screen-with-layout/unnamed-chunk-3-1.png,"# Dummy data
a <- seq(129,1)+4*runif(129,0.4)
b <- seq(1,129)^2+runif(129,0.98)
 
# Create the layout
nf <- layout( matrix(c(1,2), ncol=2) )

# Fill with plots
hist(a , breaks=30 , border=F , col=rgb(0.1,0.8,0.3,0.5) , xlab=""distribution of a"" , main="""")
boxplot(a , xlab=""a"" , col=rgb(0.8,0.8,0.3,0.5) , las=2)","<-,+,seq,*,runif,^,layout,matrix,c,hist,rgb,boxplot","hist,boxplot"
75-split-screen-with-layout,unnamed-chunk-5-1,images/75-split-screen-with-layout/unnamed-chunk-5-1.png,"# Dummy data
a <- seq(129,1)+4*runif(129,0.4)
b <- seq(1,129)^2+runif(129,0.98)
 
# Create the layout
nf <- layout( matrix(c(1,1,2,3), nrow=2,  byrow=TRUE) )

# Fill with plots
hist(a , breaks=30 , border=F , col=rgb(0.1,0.8,0.3,0.5) , xlab=""distribution of a"" , main="""")
boxplot(a , xlab=""a"" , col=rgb(0.8,0.8,0.3,0.5) , las=2)
boxplot(b , xlab=""b"" , col=rgb(0.4,0.2,0.3,0.5) , las=2)","<-,+,seq,*,runif,^,layout,matrix,c,hist,rgb,boxplot","hist,boxplot"
75-split-screen-with-layout,unnamed-chunk-7-1,images/75-split-screen-with-layout/unnamed-chunk-7-1.png,"# Dummy data
a <- seq(129,1)+4*runif(129,0.4)
b <- seq(1,129)^2+runif(129,0.98)
 
# Set the layout
nf <- layout(
  matrix(c(1,1,2,3), ncol=2, byrow=TRUE), 
  widths=c(3,1), 
  heights=c(2,2)
)

#Add the plots
hist(a , breaks=30 , border=F , col=rgb(0.1,0.8,0.3,0.5) , xlab=""distribution of a"" , main="""")
boxplot(a , xlab=""a"" , col=rgb(0.8,0.8,0.3,0.5) , las=2)
boxplot(b , xlab=""b"" , col=rgb(0.4,0.2,0.3,0.5) , las=2)","<-,+,seq,*,runif,^,layout,matrix,c,hist,rgb,boxplot","hist,boxplot"
76_split_screen_function,thecode-1,images/76_split_screen_function/thecode-1.png,"#Create data
a <- seq(1,29)+4*runif(29,0.4)
b <- seq(1,29)^2+runif(29,0.98)
 
# I divide the screen in 2 line and 1 column only
my_screen_step1 <- split.screen(c(2, 1))
 
# I add one graph on the screen number 1 which is on top :
screen(my_screen_step1[1])
plot( a,b , pch=20 , xlab=""value of a"" , cex=3 , col=rgb(0.4,0.9,0.8,0.5) )
 
 
# I divide the second screen in 2 columns :
my_screen_step2 <- split.screen(c(1, 2), screen = my_screen_step1[2])
screen(my_screen_step2[1])
hist(a, border=F , col=rgb(0.2,0.2,0.8,0.7) , main="""" , xlab=""distribution of a"")
screen(my_screen_step2[2])
hist(b, border=F , col=rgb(0.8,0.2,0.8,0.7) , main="""" ,  xlab=""distribution of b"")","<-,+,seq,*,runif,^,split.screen,c,screen,[,plot,rgb,hist",hist
77-turn-y-axis-upside-down,thecode-1,images/77-turn-y-axis-upside-down/thecode-1.png,"# Create data
x <- seq(1,29)^2+runif(29,0.98)
y <- abs(seq(1,29)+4*runif(29,0.4))

# Make the plotwith ylim in reverse
plot(y~x , ylim = rev(range(y)) ,
     lwd=4 , type=""l"" , bty=""n"" , ylab=""value of y (decreasing)"" , col=rgb(0.2,0.4,0.6,0.8) )

#Add the grey lines
abline(v=seq(0,900,100) , col=""grey"" , lwd=0.6)","<-,+,^,seq,runif,abs,*,plot,~,rev,range,rgb,abline",abline
79-levelplot-with-ggplot2,thecode-1,images/79-levelplot-with-ggplot2/thecode-1.png,"# Library
library(ggplot2)

# Dummy data
x <- LETTERS[1:20]
y <- paste0(""var"", seq(1,20))
data <- expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 5)
 
# Heatmap 
ggplot(data, aes(X, Y, fill= Z)) + 
  geom_tile()","library,<-,[,:,paste0,seq,expand.grid,$,runif,+,ggplot,aes,geom_tile",geom_tile
79-levelplot-with-ggplot2,thecode2-1,images/79-levelplot-with-ggplot2/thecode2-1.png,"# Library
library(ggplot2)
library(hrbrthemes)

# Dummy data
x <- LETTERS[1:20]
y <- paste0(""var"", seq(1,20))
data <- expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 5)
 
# Give extreme colors:
ggplot(data, aes(X, Y, fill= Z)) + 
  geom_tile() +
  scale_fill_gradient(low=""white"", high=""blue"") +
  theme_ipsum()

# Color Brewer palette
ggplot(data, aes(X, Y, fill= Z)) + 
  geom_tile() +
  scale_fill_distiller(palette = ""RdPu"") +
  theme_ipsum()

# Color Brewer palette
library(viridis)
ggplot(data, aes(X, Y, fill= Z)) + 
  geom_tile() +
  scale_fill_viridis(discrete=FALSE) +
  theme_ipsum()","library,<-,[,:,paste0,seq,expand.grid,$,runif,+,ggplot,aes,geom_tile,scale_fill_gradient,theme_ipsum,scale_fill_distiller,scale_fill_viridis",geom_tile
79-levelplot-with-ggplot2,thecode2-2,images/79-levelplot-with-ggplot2/thecode2-2.png,,,
79-levelplot-with-ggplot2,thecode3-1,images/79-levelplot-with-ggplot2/thecode3-1.png,"# Library
library(ggplot2)
library(tidyr)
library(tibble)
library(hrbrthemes)
library(dplyr)

# Volcano dataset
#volcano

# Heatmap 
volcano %>%
  
  # Data wrangling
  as_tibble() %>%
  rowid_to_column(var=""X"") %>%
  gather(key=""Y"", value=""Z"", -1) %>%
  
  # Change Y to numeric
  mutate(Y=as.numeric(gsub(""V"","""",Y))) %>%

  # Viz
  ggplot(aes(X, Y, fill= Z)) + 
    geom_tile() +
    theme_ipsum() +
    theme(legend.position=""none"")","library,+,%>%,as_tibble,rowid_to_column,gather,-,mutate,as.numeric,gsub,ggplot,aes,geom_tile,theme_ipsum,theme",geom_tile
81-barplot-with-variable-width,thecode-1,images/81-barplot-with-variable-width/thecode-1.png,"# Load ggplot2
library(ggplot2)
library(hrbrthemes) # for style

# make data
data <- data.frame(
  group=c(""A "",""B "",""C "",""D "") , 
  value=c(33,62,56,67) , 
  number_of_obs=c(100,500,459,342)
)
 
# Calculate the future positions on the x axis of each bar (left border, central position, right border)
data$right <- cumsum(data$number_of_obs) + 30*c(0:(nrow(data)-1))
data$left <- data$right - data$number_of_obs 
 
# Plot
ggplot(data, aes(ymin = 0)) + 
    geom_rect(aes(xmin = left, xmax = right, ymax = value, colour = group, fill = group)) +
    xlab(""number of obs"") + 
    ylab(""value"") +
    theme_ipsum() +
    theme(legend.position=""none"") ","library,<-,data.frame,c,$,+,cumsum,*,:,(,-,nrow,ggplot,aes,geom_rect,xlab,ylab,theme_ipsum,theme",geom_rect
82-boxplot-on-top-of-histogram,unnamed-chunk-1-1,images/82-boxplot-on-top-of-histogram/unnamed-chunk-1-1.png,"# Create data 
my_variable <- c( 
  rnorm(1000 , 0 , 2) , 
  rnorm(1000 , 9 , 2)
)

# Please Ignore, specific to a bug in the gallery
library(pacman)
pacman::p_unload(pacman::p_loaded(), character.only = TRUE)

# Layout to split the screen
layout(mat=matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,8))
 
# Draw the boxplot and the histogram 
par(mar=c(0, 3.1, 1.1, 2.1))
boxplot(my_variable , horizontal=TRUE , ylim=c(-10,20), xaxt=""n"" , col=rgb(0.8,0.8,0,0.5) , frame=F)
par(mar=c(4, 3.1, 1.1, 2.1))
hist(my_variable , breaks=40 , col=rgb(0.2,0.8,0.5,0.5) , border=F , main="""" , xlab=""value of the variable"", xlim=c(-10,20))","<-,c,rnorm,library,p_unload,p_loaded,layout,matrix,par,boxplot,-,rgb,hist","boxplot,hist"
83-histogram-with-colored-tail,unnamed-chunk-1-1,images/83-histogram-with-colored-tail/unnamed-chunk-1-1.png,"# Create data
my_variable <- rnorm(2000, 0 , 10)
 
# Calculate histogram, but do not draw it
my_hist <- hist(my_variable , breaks=40  , plot=F)
 
# Color vector
my_color <- ifelse(my_hist$breaks < -10, rgb(0.2,0.8,0.5,0.5) , ifelse (my_hist$breaks >=10, ""purple"", rgb(0.2,0.2,0.2,0.2) ))
 
# Final plot
plot(my_hist, col=my_color , border=F , main="""" , xlab=""value of the variable"", xlim=c(-40,40) )","<-,rnorm,hist,ifelse,<,$,-,rgb,>=,plot,c",hist
84-tukey-test,unnamed-chunk-1-1,images/84-tukey-test/unnamed-chunk-1-1.png,"# library
library(multcompView)
 
# Create data
set.seed(1)
treatment <- rep(c(""A"", ""B"", ""C"", ""D"", ""E""), each=20) 
value=c( sample(2:5, 20 , replace=T) , sample(6:10, 20 , replace=T), sample(1:7, 20 , replace=T), sample(3:10, 20 , replace=T) , sample(10:20, 20 , replace=T) )
data=data.frame(treatment,value)
 
# What is the effect of the treatment on the value ?
model=lm( data$value ~ data$treatment )
ANOVA=aov(model)
 
# Tukey test to study each pair of treatment :
TUKEY <- TukeyHSD(x=ANOVA, 'data$treatment', conf.level=0.95)
 
# Tuckey test representation :
plot(TUKEY , las=1 , col=""brown"")","library,set.seed,<-,rep,c,=,sample,:,data.frame,lm,~,$,aov,TukeyHSD,plot",
84-tukey-test,unnamed-chunk-3-1,images/84-tukey-test/unnamed-chunk-3-1.png,"# I need to group the treatments that are not different each other together.
generate_label_df <- function(TUKEY, variable){
 
     # Extract labels and factor levels from Tukey post-hoc 
     Tukey.levels <- TUKEY[[variable]][,4]
     Tukey.labels <- data.frame(multcompLetters(Tukey.levels)['Letters'])
     
     #I need to put the labels in the same order as in the boxplot :
     Tukey.labels$treatment=rownames(Tukey.labels)
     Tukey.labels=Tukey.labels[order(Tukey.labels$treatment) , ]
     return(Tukey.labels)
     }
 
# Apply the function on my dataset
LABELS <- generate_label_df(TUKEY , ""data$treatment"")
 
 
# A panel of colors to draw each group with the same color :
my_colors <- c( 
  rgb(143,199,74,maxColorValue = 255),
  rgb(242,104,34,maxColorValue = 255), 
  rgb(111,145,202,maxColorValue = 255)
  )
 
# Draw the basic boxplot
a <- boxplot(data$value ~ data$treatment , ylim=c(min(data$value) , 1.1*max(data$value)) , col=my_colors[as.numeric(LABELS[,1])] , ylab=""value"" , main="""")
 
# I want to write the letter over each box. Over is how high I want to write it.
over <- 0.1*max( a$stats[nrow(a$stats),] )
 
#Add the labels
text( c(1:nlevels(data$treatment)) , a$stats[nrow(a$stats),]+over , LABELS[,1]  , col=my_colors[as.numeric(LABELS[,1])] )","<-,function,{,[,[[,data.frame,multcompLetters,=,$,rownames,order,return,generate_label_df,c,rgb,boxplot,~,min,*,max,as.numeric,nrow,text,:,nlevels,+","boxplot,text"
89-box-and-scatter-plot-with-ggplot2,unnamed-chunk-1-1,images/89-box-and-scatter-plot-with-ggplot2/unnamed-chunk-1-1.png,"# Libraries
library(tidyverse)
library(hrbrthemes)
library(viridis)

# create a dataset
data <- data.frame(
  name=c( rep(""A"",500), rep(""B"",500), rep(""B"",500), rep(""C"",20), rep('D', 100)  ),
  value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )
)

# Plot
data %>%
  ggplot( aes(x=name, y=value, fill=name)) +
    geom_boxplot() +
    scale_fill_viridis(discrete = TRUE, alpha=0.6) +
    geom_jitter(color=""black"", size=0.4, alpha=0.9) +
    theme_ipsum() +
    theme(
      legend.position=""none"",
      plot.title = element_text(size=11)
    ) +
    ggtitle(""A boxplot with jitter"") +
    xlab("""")","library,<-,data.frame,c,rep,rnorm,+,%>%,ggplot,aes,geom_boxplot,scale_fill_viridis,geom_jitter,theme_ipsum,theme,element_text,ggtitle,xlab","geom_boxplot,geom_jitter"
89-box-and-scatter-plot-with-ggplot2,unnamed-chunk-3-1,images/89-box-and-scatter-plot-with-ggplot2/unnamed-chunk-3-1.png,"# Boxplot basic
data %>%
  ggplot( aes(x=name, y=value, fill=name)) +
    geom_boxplot() +
    scale_fill_viridis(discrete = TRUE, alpha=0.6, option=""A"") +
    theme_ipsum() +
    theme(
      legend.position=""none"",
      plot.title = element_text(size=11)
    ) +
    ggtitle(""Basic boxplot"") +
    xlab("""")

# Violin basic
data %>%
  ggplot( aes(x=name, y=value, fill=name)) +
    geom_violin() +
    scale_fill_viridis(discrete = TRUE, alpha=0.6, option=""A"") +
    theme_ipsum() +
    theme(
      legend.position=""none"",
      plot.title = element_text(size=11)
    ) +
    ggtitle(""Violin chart"") +
    xlab("""")","+,%>%,ggplot,aes,geom_boxplot,scale_fill_viridis,theme_ipsum,theme,element_text,ggtitle,xlab,geom_violin","geom_boxplot,geom_violin"
9-ordered-boxplot,unnamed-chunk-1-1,images/9-ordered-boxplot/unnamed-chunk-1-1.png,"# Create data : 7 varieties / 20 samples per variety / a numeric value for each sample
variety <- rep( c(""soldur"", ""silur"", ""lloyd"", ""pescadou"", ""X4582"", ""Dudur"", ""Classic""), each=20)
note <- c( sample(2:5, 20 , replace=T) , sample(6:10, 20 , replace=T),
        sample(1:7, 30 , replace=T), sample(3:10, 70 , replace=T) )
data <- data.frame(variety, note)
 
# Create a vector named ""new_order"" containing the desired order, and ask to boxplot using this vector !
new_order <- with(data, reorder(variety , note, median , na.rm=T))
 
# And draw the boxplot
boxplot(data$note ~ new_order , ylab=""sickness"" , col=""#69b3a2"", boxwex=0.4 , main="""")","<-,rep,c,sample,:,data.frame,with,reorder,boxplot,~,$",boxplot
9-ordered-boxplot,unnamed-chunk-3-1,images/9-ordered-boxplot/unnamed-chunk-3-1.png,"#Creating data 
names <- c(rep(""A"", 20) , rep(""B"", 20) , rep(""C"", 20), rep(""D"", 20))
value <- c( sample(2:5, 20 , replace=T) , sample(6:10, 20 , replace=T), 
       sample(1:7, 20 , replace=T), sample(3:10, 20 , replace=T) )
data <- data.frame(names,value)
 
# Classic boxplot (A-B-C-D order)
# boxplot(data$value ~ data$names)
 
# I reorder the groups order : I change the order of the factor data$names
data$names <- factor(data$names , levels=c(""A"", ""D"", ""C"", ""B""))
 
#The plot is now ordered !
boxplot(data$value ~ data$names , col=rgb(0.3,0.5,0.4,0.6) , ylab=""value"" , 
    xlab=""names in desired order"")","<-,c,rep,sample,:,data.frame,$,factor,boxplot,~,rgb",boxplot
9-ordered-boxplot,unnamed-chunk-5-1,images/9-ordered-boxplot/unnamed-chunk-5-1.png,"variety <- rep( c(""soldur"", ""silur"", ""lloyd"", ""pescadou"", ""X4582"", ""Dudur"", ""Classic""), each=40)
treatment <- rep(c(rep(""high"" , 20) , rep(""low"" , 20)) , 7)
note <- c( rep(c(sample(0:4, 20 , replace=T) , sample(1:6, 20 , replace=T)),2), 
          rep(c(sample(5:7, 20 , replace=T), sample(5:9, 20 , replace=T)),2), 
          c(sample(0:4, 20 , replace=T) , sample(2:5, 20 , replace=T), 
          rep(c(sample(6:8, 20 , replace=T) , sample(7:10, 20 , replace=T)),2) ))
data=data.frame(variety, treatment ,  note)
 
# Reorder varieties (group) (mixing low and high treatments for the calculations)
new_order <- with(data, reorder(variety , note, mean , na.rm=T))
 
# Then I make the boxplot, asking to use the 2 factors : variety (in the good order) AND treatment :
par(mar=c(3,4,3,1))
myplot <- boxplot(note ~ treatment*new_order , data=data  , 
        boxwex=0.4 , ylab=""sickness"",
        main=""sickness of several wheat lines"" , 
        col=c(""slateblue1"" , ""tomato"") ,  
        xaxt=""n"")
 
# To add the label of x axis
my_names <- sapply(strsplit(myplot$names , '\\.') , function(x) x[[2]] )
my_names <- my_names[seq(1 , length(my_names) , 2)]
axis(1, 
     at = seq(1.5 , 14 , 2), 
     labels = my_names , 
     tick=FALSE , cex=0.3)

# Add the grey vertical lines
for(i in seq(0.5 , 20 , 2)){ 
  abline(v=i,lty=1, col=""grey"")
  }
 
# Add a legend
legend(""bottomright"", legend = c(""High treatment"", ""Low treatment""), 
       col=c(""slateblue1"" , ""tomato""),
       pch = 15, bty = ""n"", pt.cex = 3, cex = 1.2,  horiz = F, inset = c(0.1, 0.1))","<-,rep,c,sample,:,=,data.frame,with,reorder,par,boxplot,~,*,sapply,strsplit,$,function,[[,[,seq,length,axis,for,{,abline,legend","boxplot,abline"
93-parrallel-plot,thecode-1,images/93-parrallel-plot/thecode-1.png,"# You need the MASS library
library(MASS)
 
# Vector color
my_colors <- colors()[as.numeric(iris$Species)*11]
 
# Make the graph !
parcoord(iris[,c(1:4)] , col= my_colors  )","library,<-,[,colors,*,as.numeric,$,parcoord,c,:",parcoord
93-parrallel-plot,thecode2-1,images/93-parrallel-plot/thecode2-1.png,"# You need the MASS library
library(MASS)
 
# Vector color
library(RColorBrewer)
palette <- brewer.pal(3, ""Set1"") 
 my_colors <- palette[as.numeric(iris$Species)]

# Make the graph !
parcoord(iris[,c(1,3,4,2)] , col= my_colors  )","library,<-,brewer.pal,[,as.numeric,$,parcoord,c",parcoord
93-parrallel-plot,thecode3-1,images/93-parrallel-plot/thecode3-1.png,"# You need the MASS library
library(MASS)
 
# Let's use the Iris dataset as an example
data(iris)
 
# Vector color: red if Setosa, grey otherwise.
isSetosa <- ifelse(iris$Species==""setosa"",""red"",""grey"")

# Make the graph !
parcoord(iris[,c(1,3,4,2)] , col=isSetosa  )","library,data,<-,ifelse,==,$,parcoord,[,c",parcoord
94-violin-plot,unnamed-chunk-1-1,images/94-violin-plot/unnamed-chunk-1-1.png,"# Load the vioplot library
library(vioplot)
 
# Create data
treatment <- c(rep(""A"", 40) , rep(""B"", 40) , rep(""C"", 40) )
value <- c( sample(2:5, 40 , replace=T) , sample(c(1:5,12:17), 40 , replace=T), sample(1:7, 40 , replace=T) )
data <- data.frame(treatment,value)
 
# Draw the plot
with(data , vioplot( 
  value[treatment==""A""] , value[treatment==""B""], value[treatment==""C""],  
  col=rgb(0.1,0.4,0.7,0.7) , names=c(""A"",""B"",""C"") 
))","library,<-,c,rep,sample,:,data.frame,with,vioplot,[,==,rgb",vioplot
95-violin-plot-with-ggplot2,unnamed-chunk-2-1,images/95-violin-plot-with-ggplot2/unnamed-chunk-2-1.png,p,,
95-violin-plot-with-ggplot2,unnamed-chunk-5-1,images/95-violin-plot-with-ggplot2/unnamed-chunk-5-1.png,"# Basic violin
ggplot(data, aes(x=name, y=value, fill=name)) + 
  geom_violin()","+,ggplot,aes,geom_violin",geom_violin
95-violin-plot-with-ggplot2,unnamed-chunk-8-1,images/95-violin-plot-with-ggplot2/unnamed-chunk-8-1.png,"library(tidyr)
library(ggplot2)
library(dplyr)
data_wide %>% 
  gather(key=""MesureType"", value=""Val"") %>%
  ggplot( aes(x=MesureType, y=Val, fill=MesureType)) +
    geom_violin()","library,+,%>%,gather,ggplot,aes,geom_violin",geom_violin
96-boxplot-with-jitter,unnamed-chunk-1-1,images/96-boxplot-with-jitter/unnamed-chunk-1-1.png,"# Create data
names <- as.factor(c(rep(""A"", 80) , rep(""B"", 50) , rep(""C"", 70)))
value <- c( rnorm(80 , mean=10 , sd=9) , rnorm(50 , mean=2 , sd=15) , rnorm(70 , mean=30 , sd=10) )
data <- data.frame(names,value)
 
# Basic boxplot
boxplot(data$value ~ data$names , col=terrain.colors(4) )
 
# Add data points
mylevels <- levels(data$names)
levelProportions <- summary(data$names)/nrow(data)
for(i in 1:length(mylevels)){
 
  thislevel <- mylevels[i]
  thisvalues <- data[data$names==thislevel, ""value""]
   
  # take the x-axis indices and add a jitter, proportional to the N in each level
  myjitter <- jitter(rep(i, length(thisvalues)), amount=levelProportions[i]/2)
  points(myjitter, thisvalues, pch=20, col=rgb(0,0,0,.9)) 
   
}","<-,as.factor,c,rep,rnorm,data.frame,boxplot,~,$,terrain.colors,levels,/,summary,nrow,for,:,length,{,[,==,jitter,points,rgb","boxplot,jitter,points"
97-correlation-ellipses,thecode-1,images/97-correlation-ellipses/thecode-1.png,"# Libraries
library(ellipse)
library(RColorBrewer)
 
# Use of the mtcars data proposed by R
data <- cor(mtcars)
 
# Build a Pannel of 100 colors with Rcolor Brewer
my_colors <- brewer.pal(5, ""Spectral"")
my_colors <- colorRampPalette(my_colors)(100)
 
# Order the correlation matrix
ord <- order(data[1, ])
data_ord <- data[ord, ord]
plotcorr(data_ord , col=my_colors[data_ord*50+50] , mar=c(1,1,1,1)  )","library,<-,cor,brewer.pal,colorRampPalette,order,[,plotcorr,+,*,c",plotcorr
98-basic-scatterplot-matrix,thecode-1,images/98-basic-scatterplot-matrix/thecode-1.png,"# Data: numeric variables of the native mtcars dataset
data <- mtcars[ , c(1,3:6)]
 
# Plot
plot(data , pch=20 , cex=1.5 , col=""#69b3a2"")","<-,[,c,:,plot",
99-scatterplot-matrix-car-package,thecode-1,images/99-scatterplot-matrix-car-package/thecode-1.png,"# Packages
library(car)
library(RColorBrewer) # for the color palette

# Let's use the car dataset natively available in R
data <- mtcars

# Make the plot
my_colors <- brewer.pal(nlevels(as.factor(data$cyl)), ""Set2"")
scatterplotMatrix(~mpg+disp+drat|cyl, data=data , 
      reg.line="""" , smoother="""", col=my_colors , 
      smoother.args=list(col=""grey"") , cex=1.5 , 
      pch=c(15,16,17) , 
      main=""Scatter plot with Three Cylinder Options""
      )","library,<-,brewer.pal,nlevels,as.factor,$,scatterplotMatrix,~,|,+,list,c",scatterplotMatrix
blog-post-template,thecode-1,images/blog-post-template/thecode-1.png,"# The plot on the right. Code will appear below
plot(1,1)",plot,
blog-post-template,unnamed-chunk-2-1,images/blog-post-template/unnamed-chunk-2-1.png,"plot(1,1)",plot,
choropleth-map-in-r,thecode9-1,images/choropleth-map-in-r/thecode9-1.png,"# Plot
plot(africa , xlim=c(-20,60) , ylim=c(-40,40))","plot,c,-",
choropleth-map-in-r,thecode-1,images/choropleth-map-in-r/thecode-1.png,"# library
library(dplyr)
library(ggplot2)

# Make sure the variable you are studying is numeric
africa@data$POP2005 <- as.numeric( africa@data$POP2005 )

# Distribution of the population per country?
africa@data %>% 
  ggplot( aes(x=as.numeric(POP2005))) + 
    geom_histogram(bins=20, fill='#69b3a2', color='white')","library,<-,$,@,as.numeric,+,%>%,ggplot,aes,geom_histogram",geom_histogram
choropleth-map-in-r,thecode2-1,images/choropleth-map-in-r/thecode2-1.png,"# Palette of 30 colors
library(RColorBrewer)
my_colors <- brewer.pal(9, ""Reds"") 
my_colors <- colorRampPalette(my_colors)(30)
 
# Attribute the appropriate color to each country
class_of_country <- cut(africa@data$POP2005, 30)
my_colors <- my_colors[as.numeric(class_of_country)]
 
# Make the plot
plot(africa , xlim=c(-20,60) , ylim=c(-40,40), col=my_colors ,  bg = ""#A6CAE0"")","library,<-,brewer.pal,colorRampPalette,cut,$,@,[,as.numeric,plot,c,-",
connected_scatterplot_ggplot2,thecode-1,images/connected_scatterplot_ggplot2/thecode-1.png,"# Libraries
library(ggplot2)
library(dplyr)

# Load dataset from github
data <- read.table(""https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv"", header=T)
data$date <- as.Date(data$date)

# Plot
data %>%
  tail(10) %>%
  ggplot( aes(x=date, y=value)) +
    geom_line() +
    geom_point()","library,<-,read.table,$,as.Date,+,%>%,tail,ggplot,aes,geom_line,geom_point","geom_line,geom_point"
connected_scatterplot_ggplot2,thecode2-1,images/connected_scatterplot_ggplot2/thecode2-1.png,"# Libraries
library(ggplot2)
library(dplyr)
library(hrbrthemes)

# Load dataset from github
data <- read.table(""https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv"", header=T)
data$date <- as.Date(data$date)

# Plot
data %>%
  tail(10) %>%
  ggplot( aes(x=date, y=value)) +
    geom_line( color=""grey"") +
    geom_point(shape=21, color=""black"", fill=""#69b3a2"", size=6) +
    theme_ipsum() +
    ggtitle(""Evolution of bitcoin price"")","library,<-,read.table,$,as.Date,+,%>%,tail,ggplot,aes,geom_line,geom_point,theme_ipsum,ggtitle","geom_line,geom_point"
connected_scatterplot_ggplot2,thecode3-1,images/connected_scatterplot_ggplot2/thecode3-1.png,"# Libraries
library(ggplot2)
library(dplyr)
library(babynames)
library(ggrepel)
library(tidyr)

# data
data <- babynames %>% 
  filter(name %in% c(""Ashley"", ""Amanda"")) %>%
  filter(sex==""F"") %>%
  filter(year>1970) %>%
  select(year, name, n) %>%
  spread(key = name, value=n, -1)

# plot
data %>% 
  ggplot(aes(x=Amanda, y=Ashley, label=year)) +
     geom_point() +
     geom_segment(aes(
                    xend=c(tail(Amanda, n=-1), NA), 
                    yend=c(tail(Ashley, n=-1), NA)
                  )
      ) ","library,<-,%>%,filter,%in%,c,==,>,select,spread,-,+,ggplot,aes,geom_point,geom_segment,tail","geom_point,geom_segment"
connected_scatterplot_ggplot2,thecode4-1,images/connected_scatterplot_ggplot2/thecode4-1.png,"# Libraries
library(ggplot2)
library(dplyr)
library(babynames)
library(ggrepel)
library(tidyr)

# data
data <- babynames %>% 
  filter(name %in% c(""Ashley"", ""Amanda"")) %>%
  filter(sex==""F"") %>%
  filter(year>1970) %>%
  select(year, name, n) %>%
  spread(key = name, value=n, -1)

# Select a few date to label the chart
tmp_date <- data %>% sample_frac(0.3)

# plot 
data %>% 
  ggplot(aes(x=Amanda, y=Ashley, label=year)) +
     geom_point(color=""#69b3a2"") +
     geom_text_repel(data=tmp_date) +
     geom_segment(color=""#69b3a2"", 
                  aes(
                    xend=c(tail(Amanda, n=-1), NA), 
                    yend=c(tail(Ashley, n=-1), NA)
                  ),
                  arrow=arrow(length=unit(0.3,""cm""))
      ) +
      theme_ipsum()","library,<-,%>%,filter,%in%,c,==,>,select,spread,-,sample_frac,+,ggplot,aes,geom_point,geom_text_repel,geom_segment,tail,arrow,unit,theme_ipsum","geom_point,geom_text_repel,geom_segment,arrow"
custom-fonts-in-R-and-ggplot2,unnamed-chunk-4-1,images/custom-fonts-in-R-and-ggplot2/unnamed-chunk-4-1.png,"library(ggplot2)

data <- data.frame(x = 1:4, y = 1:4)

ggplot(data) +
  geom_point(aes(x, y), size = 10, color = ""cadetblue4"") +
  geom_label(
    aes(x, y), 
    data = data.frame(x = 3, y = 2), 
    label = ""This is Hydrophilia Iced!"",
    family = ""hydrophilia"", # Use Hydrophilia Iced for the label,
    size = 7
  ) + 
  labs(
    x = ""Horizontal Label"",
    y = ""Vertical label too!"",
    title = ""Do you like titles with nice-looking fonts?""
  ) +
  theme(
    # Special Elite for both axis title and plot title
    axis.title = element_text(family = ""special""),
    title = element_text(family = ""special"")
  )","library,<-,data.frame,:,+,ggplot,geom_point,aes,geom_label,labs,theme,element_text","geom_point,geom_label"
custom-fonts-in-R-and-ggplot2,unnamed-chunk-7-1,images/custom-fonts-in-R-and-ggplot2/unnamed-chunk-7-1.png,"# Correlation | Ranking | Evolution.. 
htmltools::includeHTML(""htmlChunkRelatedRanking.html"")",includeHTML,
histogram_several_group,unnamed-chunk-2-1,images/histogram_several_group/unnamed-chunk-2-1.png,p,,
histogram_several_group,unnamed-chunk-4-1,images/histogram_several_group/unnamed-chunk-4-1.png,p,,
how-to-draw-connecting-routes-on-map-with-r-and-great-circles,thecode1-1,images/how-to-draw-connecting-routes-on-map-with-r-and-great-circles/thecode1-1.png,"# World map is available in the maps package
library(maps)

# No margin
par(mar=c(0,0,0,0))

# World map
map('world',
    col=""#f2f2f2"", fill=TRUE, bg=""white"", lwd=0.05,
    mar=rep(0,4),border=0, ylim=c(-80,80) 
)","library,par,c,map,rep,-",
how-to-draw-connecting-routes-on-map-with-r-and-great-circles,thecode2-1,images/how-to-draw-connecting-routes-on-map-with-r-and-great-circles/thecode2-1.png,"# Dplyr for data wrangling and pipe function
library(dplyr)

# Cities
Buenos_aires <- c(-58,-34)
Paris <- c(2,49)
Melbourne <- c(145,-38)

# Data frame
data <- rbind(Buenos_aires, Paris, Melbourne) %>% 
  as.data.frame()
colnames(data) <- c(""long"",""lat"")

# Show the cities on the map
map('world',
    col=""#f2f2f2"", fill=TRUE, bg=""white"", lwd=0.05,
    mar=rep(0,4),border=0, ylim=c(-80,80) 
)
points(x=data$long, y=data$lat, col=""slateblue"", cex=3, pch=20)","library,<-,c,-,%>%,rbind,as.data.frame,colnames,map,rep,points,$",points
how-to-draw-connecting-routes-on-map-with-r-and-great-circles,thecode3-1,images/how-to-draw-connecting-routes-on-map-with-r-and-great-circles/thecode3-1.png,"# Load geosphere
library(geosphere)

# Background map
map('world',
    col=""#f2f2f2"", fill=TRUE, bg=""white"", lwd=0.05,
    mar=rep(0,4),border=0, ylim=c(-80,80) 
)

# Dot for cities
points(x=data$long, y=data$lat, col=""slateblue"", cex=3, pch=20)

# Compute the connection between Buenos Aires and Paris
inter <- gcIntermediate(Paris,  Buenos_aires, n=50, addStartEnd=TRUE, breakAtDateLine=F)

# Show this connection
lines(inter, col=""slateblue"", lwd=2)
 
# Between Paris and Melbourne
inter <- gcIntermediate(Melbourne,  Paris, n=50, addStartEnd=TRUE, breakAtDateLine=F)             
lines(inter, col=""slateblue"", lwd=2)","library,map,rep,c,-,points,$,<-,gcIntermediate,lines","points,lines"
how-to-draw-connecting-routes-on-map-with-r-and-great-circles,thecode4-1,images/how-to-draw-connecting-routes-on-map-with-r-and-great-circles/thecode4-1.png,"# Load geosphere
library(geosphere)

# Background map
map('world',
    col=""#f2f2f2"", fill=TRUE, bg=""white"", lwd=0.05,
    mar=rep(0,4),border=0, ylim=c(-80,80) 
)

# Dot for cities
points(x=data$long, y=data$lat, col=""slateblue"", cex=3, pch=20)

# Compute the connection between Buenos Aires and Paris
inter <- gcIntermediate(Melbourne,  Buenos_aires, n=50, addStartEnd=TRUE, breakAtDateLine=F)

# Show this connection
lines(inter, col=""slateblue"", lwd=2)
 ","library,map,rep,c,-,points,$,<-,gcIntermediate,lines","points,lines"
how-to-draw-connecting-routes-on-map-with-r-and-great-circles,thecode5-1,images/how-to-draw-connecting-routes-on-map-with-r-and-great-circles/thecode5-1.png,"
# Background map
map('world',col=""#f2f2f2"", fill=TRUE, bg=""white"", lwd=0.05,mar=rep(0,4),border=0, ylim=c(-80,80) )

# Circles for cities
points(x=data$long, y=data$lat, col=""slateblue"", cex=3, pch=20)
 
# Connections
plot_my_connection(Paris[1], Paris[2], Melbourne[1], Melbourne[2], col=""slateblue"", lwd=2)
plot_my_connection(Buenos_aires[1], Buenos_aires[2], Melbourne[1], Melbourne[2], col=""slateblue"", lwd=2)
plot_my_connection(Buenos_aires[1], Buenos_aires[2], Paris[1], Paris[2], col=""slateblue"", lwd=2)
","map,rep,c,-,points,$,plot_my_connection,[",points
how-to-draw-connecting-routes-on-map-with-r-and-great-circles,thecode6-1,images/how-to-draw-connecting-routes-on-map-with-r-and-great-circles/thecode6-1.png,"# Create dataset
data <- rbind(
	Buenos_aires=c(-58,-34),
	Paris=c(2,49),
	Melbourne=c(145,-38),
	Saint.Petersburg=c(30.32, 59.93),
	Abidjan=c(-4.03, 5.33),
	Montreal=c(-73.57, 45.52),
	Nairobi=c(36.82, -1.29),
	Salvador=c(-38.5, -12.97)
	)  %>% as.data.frame()
colnames(data)=c(""long"",""lat"")

# Generate all pairs of coordinates
all_pairs <- cbind(t(combn(data$long, 2)), t(combn(data$lat, 2))) %>% as.data.frame()
colnames(all_pairs) <- c(""long1"",""long2"",""lat1"",""lat2"")

# background map
par(mar=c(0,0,0,0))
map('world',col=""#f2f2f2"", fill=TRUE, bg=""white"", lwd=0.05,mar=rep(0,4),border=0, ylim=c(-80,80) )
 
# add every connections:
for(i in 1:nrow(all_pairs)){
	plot_my_connection(all_pairs$long1[i], all_pairs$lat1[i], all_pairs$long2[i], all_pairs$lat2[i], col=""skyblue"", lwd=1)
	}
 
# add points and names of cities
points(x=data$long, y=data$lat, col=""slateblue"", cex=2, pch=20)
text(rownames(data), x=data$long, y=data$lat,  col=""slateblue"", cex=1, pos=4)
","<-,%>%,rbind,c,-,as.data.frame,=,colnames,cbind,t,combn,$,par,map,rep,for,:,nrow,{,plot_my_connection,[,points,text,rownames","points,text"
how-to-draw-connecting-routes-on-map-with-r-and-great-circles,thecode7-1,images/how-to-draw-connecting-routes-on-map-with-r-and-great-circles/thecode7-1.png,"# A function that keeps the good part of the great circle, by Jeff Leek:
getGreatCircle <- function(userLL,relationLL){
  tmpCircle = greatCircle(userLL,relationLL, n=200)
  start = which.min(abs(tmpCircle[,1] - data.frame(userLL)[1,1]))
  end = which.min(abs(tmpCircle[,1] - relationLL[1]))
  greatC = tmpCircle[start:end,]
  return(greatC)
}
 
# background map
map('world',col=""#f2f2f2"", fill=TRUE, bg=""white"", lwd=0.05,mar=rep(0,4),border=0, ylim=c(-80,80) )

# map 3 connections:
great <- getGreatCircle(Paris, Melbourne)
lines(great, col=""skyblue"", lwd=2)
great <- getGreatCircle(Buenos_aires, Melbourne)
lines(great, col=""skyblue"", lwd=2)
great <- getGreatCircle(Paris, Buenos_aires)
lines(great, col=""skyblue"", lwd=2)

# City names and dots
points(x=data$long, y=data$lat, col=""slateblue"", cex=3, pch=20)
text(rownames(data), x=data$long, y=data$lat,  col=""slateblue"", cex=1, pos=4)","<-,function,{,=,greatCircle,which.min,abs,-,[,data.frame,:,return,map,rep,c,getGreatCircle,lines,points,$,text,rownames","lines,points,text"
line_chart_annotation,thecode-1,images/line_chart_annotation/thecode-1.png,"# Libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)

# Load dataset from github
data <- read.table(""https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv"", header=T)
data$date <- as.Date(data$date)

# plot
data %>% 
  ggplot( aes(x=date, y=value)) +
    geom_line(color=""#69b3a2"") +
    ylim(0,22000) +
    annotate(geom=""text"", x=as.Date(""2017-01-01""), y=20089, 
             label=""Bitcoin price reached 20k $\nat the end of 2017"") +
    annotate(geom=""point"", x=as.Date(""2017-12-17""), y=20089, size=10, shape=21, fill=""transparent"") +
    geom_hline(yintercept=5000, color=""orange"", size=.5) +
    theme_ipsum()","library,<-,read.table,$,as.Date,+,%>%,ggplot,aes,geom_line,ylim,annotate,geom_hline,theme_ipsum","geom_line,geom_hline"
line-chart-dual-Y-axis-ggplot2,thecode-1,images/line-chart-dual-Y-axis-ggplot2/thecode-1.png,"# Libraries
library(ggplot2)
library(dplyr)
library(patchwork) # To display 2 charts together
library(hrbrthemes)

# Build dummy data
data <- data.frame(
  day = as.Date(""2019-01-01"") + 0:99,
  temperature = runif(100) + seq(1,100)^2.5 / 10000,
  price = runif(100) + seq(100,1)^1.5 / 10
)

# Most basic line chart
p1 <- ggplot(data, aes(x=day, y=temperature)) +
  geom_line(color=""#69b3a2"", size=2) +
  ggtitle(""Temperature: range 1-10"") +
  theme_ipsum()
  
p2 <- ggplot(data, aes(x=day, y=price)) +
  geom_line(color=""grey"",size=2) +
  ggtitle(""Price: range 1-100"") +
  theme_ipsum()

# Display both charts side by side thanks to the patchwork package
p1 + p2","library,<-,data.frame,+,as.Date,:,runif,/,^,seq,ggplot,aes,geom_line,ggtitle,theme_ipsum",geom_line
line-chart-dual-Y-axis-ggplot2,thecode1-1,images/line-chart-dual-Y-axis-ggplot2/thecode1-1.png,"# Start with a usual ggplot2 call:
ggplot(data, aes(x=day, y=temperature)) +
  
  # Custom the Y scales:
  scale_y_continuous(
    
    # Features of the first axis
    name = ""First Axis"",
    
    # Add a second axis and specify its features
    sec.axis = sec_axis( trans=~.*10, name=""Second Axis"")
  ) +
  
  theme_ipsum()","+,ggplot,aes,scale_y_continuous,sec_axis,~,*,theme_ipsum",
line-chart-dual-Y-axis-ggplot2,thecode2-1,images/line-chart-dual-Y-axis-ggplot2/thecode2-1.png,"# Value used to transform the data
coeff <- 10

ggplot(data, aes(x=day)) +
  
  geom_line( aes(y=temperature)) + 
  geom_line( aes(y=price / coeff)) + # Divide by 10 to get the same range than the temperature
  
  scale_y_continuous(
    
    # Features of the first axis
    name = ""First Axis"",
    
    # Add a second axis and specify its features
    sec.axis = sec_axis(~.*coeff, name=""Second Axis"")
  )","<-,+,ggplot,aes,geom_line,/,scale_y_continuous,sec_axis,~,*",geom_line
line-chart-dual-Y-axis-ggplot2,thecode3-1,images/line-chart-dual-Y-axis-ggplot2/thecode3-1.png,"# Value used to transform the data
coeff <- 10

# A few constants
temperatureColor <- ""#69b3a2""
priceColor <- rgb(0.2, 0.6, 0.9, 1)

ggplot(data, aes(x=day)) +
  
  geom_line( aes(y=temperature), size=2, color=temperatureColor) + 
  geom_line( aes(y=price / coeff), size=2, color=priceColor) +
  
  scale_y_continuous(
    
    # Features of the first axis
    name = ""Temperature (Celsius °)"",
    
    # Add a second axis and specify its features
    sec.axis = sec_axis(~.*coeff, name=""Price ($)"")
  ) + 
  
  theme_ipsum() +

  theme(
    axis.title.y = element_text(color = temperatureColor, size=13),
    axis.title.y.right = element_text(color = priceColor, size=13)
  ) +

  ggtitle(""Temperature down, price up"")
  ","<-,rgb,+,ggplot,aes,geom_line,/,scale_y_continuous,sec_axis,~,*,theme_ipsum,theme,element_text,ggtitle",geom_line
line-chart-dual-Y-axis-ggplot2,thecode4-1,images/line-chart-dual-Y-axis-ggplot2/thecode4-1.png,"# Value used to transform the data
coeff <- 10

# A few constants
temperatureColor <- ""#69b3a2""
priceColor <- rgb(0.2, 0.6, 0.9, 1)

ggplot(head(data, 80), aes(x=day)) +
  
  geom_bar( aes(y=temperature), stat=""identity"", size=.1, fill=temperatureColor, color=""black"", alpha=.4) + 
  geom_line( aes(y=price / coeff), size=2, color=priceColor) +
  
  scale_y_continuous(
    
    # Features of the first axis
    name = ""Temperature (Celsius °)"",
    
    # Add a second axis and specify its features
    sec.axis = sec_axis(~.*coeff, name=""Price ($)"")
  ) + 
  
  theme_ipsum() +

  theme(
    axis.title.y = element_text(color = temperatureColor, size=13),
    axis.title.y.right = element_text(color = priceColor, size=13)
  ) +

  ggtitle(""Temperature down, price up"")
  ","<-,rgb,+,ggplot,head,aes,geom_bar,geom_line,/,scale_y_continuous,sec_axis,~,*,theme_ipsum,theme,element_text,ggtitle","geom_bar,geom_line"
line-chart-ggplot2,thecode-1,images/line-chart-ggplot2/thecode-1.png,"# Libraries
library(ggplot2)

# create data
xValue <- 1:10
yValue <- cumsum(rnorm(10))
data <- data.frame(xValue,yValue)

# Plot
ggplot(data, aes(x=xValue, y=yValue)) +
  geom_line()","library,<-,:,cumsum,rnorm,data.frame,+,ggplot,aes,geom_line",geom_line
line-chart-ggplot2,thecode2-1,images/line-chart-ggplot2/thecode2-1.png,"# Libraries
library(ggplot2)
library(hrbrthemes)

# create data
xValue <- 1:10
yValue <- cumsum(rnorm(10))
data <- data.frame(xValue,yValue)

# Plot
ggplot(data, aes(x=xValue, y=yValue)) +
  geom_line( color=""#69b3a2"", size=2, alpha=0.9, linetype=2) +
  theme_ipsum() +
  ggtitle(""Evolution of something"")","library,<-,:,cumsum,rnorm,data.frame,+,ggplot,aes,geom_line,theme_ipsum,ggtitle",geom_line
line-chart-several-groups-ggplot2,thecode-1,images/line-chart-several-groups-ggplot2/thecode-1.png,"# Libraries
library(ggplot2)
library(babynames) # provide the dataset: a dataframe called babynames
library(dplyr)

# Keep only 3 names
don <- babynames %>% 
  filter(name %in% c(""Ashley"", ""Patricia"", ""Helen"")) %>%
  filter(sex==""F"")
  
# Plot
don %>%
  ggplot( aes(x=year, y=n, group=name, color=name)) +
    geom_line()","library,<-,%>%,filter,%in%,c,==,+,ggplot,aes,geom_line",geom_line
line-chart-several-groups-ggplot2,thecode2-1,images/line-chart-several-groups-ggplot2/thecode2-1.png,"# Libraries
library(ggplot2)
library(babynames) # provide the dataset: a dataframe called babynames
library(dplyr)
library(hrbrthemes)
library(viridis)

# Keep only 3 names
don <- babynames %>% 
  filter(name %in% c(""Ashley"", ""Patricia"", ""Helen"")) %>%
  filter(sex==""F"")
  
# Plot
don %>%
  ggplot( aes(x=year, y=n, group=name, color=name)) +
    geom_line() +
    scale_color_viridis(discrete = TRUE) +
    ggtitle(""Popularity of American names in the previous 30 years"") +
    theme_ipsum() +
    ylab(""Number of babies born"")","library,<-,%>%,filter,%in%,c,==,+,ggplot,aes,geom_line,scale_color_viridis,ggtitle,theme_ipsum,ylab",geom_line
line-plot-log-scale,thecode-1,images/line-plot-log-scale/thecode-1.png,"# Library
library(ggplot2)

# Create dummy data
data <- data.frame(
  x=seq(10,100),
  y=seq(10,100)/2+rnorm(90)
)

# Make the plot
ggplot(data, aes(x=x, y=y)) +
  geom_line() +
  scale_y_log10( breaks=c(1,5,10,15,20,50,100), limits=c(1,100) )","library,<-,data.frame,seq,+,/,rnorm,ggplot,aes,geom_line,scale_y_log10,c",geom_line
line-plot-log-scale,thecode2-1,images/line-plot-log-scale/thecode2-1.png,"# Library
library(ggplot2)

# Create dummy data
data <- data.frame(
  x=seq(10,100),
  y=seq(10,100)/2+rnorm(90)
)

# Make the plot
ggplot(data, aes(x=x, y=y)) +
  geom_line() ","library,<-,data.frame,seq,+,/,rnorm,ggplot,aes,geom_line",geom_line
parallel-plot-ggally,thecode-1,images/parallel-plot-ggally/thecode-1.png,"# Libraries
library(GGally)

# Data set is provided by R natively
data <- iris

# Plot
ggparcoord(data,
    columns = 1:4, groupColumn = 5
    ) ","library,<-,ggparcoord,:",ggparcoord
parallel-plot-ggally,thecode2-1,images/parallel-plot-ggally/thecode2-1.png,"# Libraries
library(hrbrthemes)
library(GGally)
library(viridis)

# Data set is provided by R natively
data <- iris

# Plot
ggparcoord(data,
    columns = 1:4, groupColumn = 5, order = ""anyClass"",
    showPoints = TRUE, 
    title = ""Parallel Coordinate Plot for the Iris Data"",
    alphaLines = 0.3
    ) + 
  scale_color_viridis(discrete=TRUE) +
  theme_ipsum()+
  theme(
    plot.title = element_text(size=10)
  )","library,<-,+,ggparcoord,:,scale_color_viridis,theme_ipsum,theme,element_text",ggparcoord
parallel-plot-ggally,thecode31-1,images/parallel-plot-ggally/thecode31-1.png,"ggparcoord(data,
    columns = 1:4, groupColumn = 5, order = ""anyClass"",
    scale=""globalminmax"",
    showPoints = TRUE, 
    title = ""No scaling"",
    alphaLines = 0.3
    ) + 
  scale_color_viridis(discrete=TRUE) +
  theme_ipsum()+
  theme(
    legend.position=""none"",
    plot.title = element_text(size=13)
  ) +
  xlab("""")","+,ggparcoord,:,scale_color_viridis,theme_ipsum,theme,element_text,xlab",ggparcoord
parallel-plot-ggally,thecode32-1,images/parallel-plot-ggally/thecode32-1.png,"ggparcoord(data,
    columns = 1:4, groupColumn = 5, order = ""anyClass"",
    scale=""uniminmax"",
    showPoints = TRUE, 
    title = ""Standardize to Min = 0 and Max = 1"",
    alphaLines = 0.3
    ) + 
  scale_color_viridis(discrete=TRUE) +
  theme_ipsum()+
  theme(
    legend.position=""none"",
    plot.title = element_text(size=13)
  ) +
  xlab("""")","+,ggparcoord,:,scale_color_viridis,theme_ipsum,theme,element_text,xlab",ggparcoord
parallel-plot-ggally,thecode33-1,images/parallel-plot-ggally/thecode33-1.png,"ggparcoord(data,
    columns = 1:4, groupColumn = 5, order = ""anyClass"",
    scale=""std"",
    showPoints = TRUE, 
    title = ""Normalize univariately (substract mean & divide by sd)"",
    alphaLines = 0.3
    ) + 
  scale_color_viridis(discrete=TRUE) +
  theme_ipsum()+
  theme(
    legend.position=""none"",
    plot.title = element_text(size=13)
  ) +
  xlab("""")","+,ggparcoord,:,scale_color_viridis,theme_ipsum,theme,element_text,xlab",ggparcoord
parallel-plot-ggally,thecode34-1,images/parallel-plot-ggally/thecode34-1.png,"ggparcoord(data,
    columns = 1:4, groupColumn = 5, order = ""anyClass"",
    scale=""center"",
    showPoints = TRUE, 
    title = ""Standardize and center variables"",
    alphaLines = 0.3
    ) + 
  scale_color_viridis(discrete=TRUE) +
  theme_ipsum()+
  theme(
    legend.position=""none"",
    plot.title = element_text(size=13)
  ) +
  xlab("""")","+,ggparcoord,:,scale_color_viridis,theme_ipsum,theme,element_text,xlab",ggparcoord
parallel-plot-ggally,thecode4-1,images/parallel-plot-ggally/thecode4-1.png,"# Libraries
library(GGally)
library(dplyr)

# Data set is provided by R natively
data <- iris

# Plot
data %>%
  arrange(desc(Species)) %>%
  ggparcoord(
    columns = 1:4, groupColumn = 5, order = ""anyClass"",
    showPoints = TRUE, 
    title = ""Original"",
    alphaLines = 1
    ) + 
  scale_color_manual(values=c( ""#69b3a2"", ""#E8E8E8"", ""#E8E8E8"") ) +
  theme_ipsum()+
  theme(
    legend.position=""Default"",
    plot.title = element_text(size=10)
  ) +
  xlab("""")","library,<-,+,%>%,arrange,desc,ggparcoord,:,scale_color_manual,c,theme_ipsum,theme,element_text,xlab",ggparcoord
piechart-ggplot2,thecode-1,images/piechart-ggplot2/thecode-1.png,"# Load ggplot2
library(ggplot2)

# Create Data
data <- data.frame(
  group=LETTERS[1:5],
  value=c(13,7,9,21,2)
)

# Basic piechart
ggplot(data, aes(x="""", y=value, fill=group)) +
  geom_bar(stat=""identity"", width=1) +
  coord_polar(""y"", start=0)","library,<-,data.frame,[,:,c,+,ggplot,aes,geom_bar,coord_polar","geom_bar,coord_polar"
piechart-ggplot2,thecode2-1,images/piechart-ggplot2/thecode2-1.png,"# Load ggplot2
library(ggplot2)

# Create Data
data <- data.frame(
  group=LETTERS[1:5],
  value=c(13,7,9,21,2)
)

# Basic piechart
ggplot(data, aes(x="""", y=value, fill=group)) +
  geom_bar(stat=""identity"", width=1, color=""white"") +
  coord_polar(""y"", start=0) +
  
  theme_void() # remove background, grid, numeric labels
  ","library,<-,data.frame,[,:,c,+,ggplot,aes,geom_bar,coord_polar,theme_void","geom_bar,coord_polar"
piechart-ggplot2,thecode3-1,images/piechart-ggplot2/thecode3-1.png,"# Load ggplot2
library(ggplot2)
library(dplyr)

# Create Data
data <- data.frame(
  group=LETTERS[1:5],
  value=c(13,7,9,21,2)
)

# Compute the position of labels
data <- data %>% 
  arrange(desc(group)) %>%
  mutate(prop = value / sum(data$value) *100) %>%
  mutate(ypos = cumsum(prop)- 0.5*prop )

# Basic piechart
ggplot(data, aes(x="""", y=prop, fill=group)) +
  geom_bar(stat=""identity"", width=1, color=""white"") +
  coord_polar(""y"", start=0) +
  theme_void() + 
  theme(legend.position=""none"") +
  
  geom_text(aes(y = ypos, label = group), color = ""white"", size=6) +
  scale_fill_brewer(palette=""Set1"")
  ","library,<-,data.frame,[,:,c,%>%,arrange,desc,mutate,*,/,sum,$,-,cumsum,+,ggplot,aes,geom_bar,coord_polar,theme_void,theme,geom_text,scale_fill_brewer","geom_bar,coord_polar,geom_text"
upset-plot,theCode-1,images/upset-plot/theCode-1.png,"# Specific library
library(UpSetR)

# Dataset
input <- c(
  M.acuminata = 759,
  P.dactylifera = 769,
  A.thaliana = 1187,
  O.sativa = 1246,
  S.bicolor = 827,
  B.distachyon = 387,
  ""P.dactylifera&M.acuminata"" = 467,
  ""O.sativa&M.acuminata"" = 29,
  ""A.thaliana&O.sativa"" = 6,
  ""S.bicolor&A.thaliana"" = 9,
  ""O.sativa&P.dactylifera"" = 32,
  ""S.bicolor&P.dactylifera"" = 49,
  ""S.bicolor&M.acuminata"" = 49,
  ""B.distachyon&O.sativa"" = 547,
  ""S.bicolor&O.sativa"" = 1151,
  ""B.distachyon&A.thaliana"" = 10,
  ""B.distachyon&M.acuminata"" = 9,
  ""B.distachyon&S.bicolor"" = 402,
  ""M.acuminata&A.thaliana"" = 155,
  ""A.thaliana&P.dactylifera"" = 105,
  ""B.distachyon&P.dactylifera"" = 25,
  ""S.bicolor&O.sativa&P.dactylifera"" = 42,
  ""B.distachyon&O.sativa&P.dactylifera"" = 12,
  ""S.bicolor&O.sativa&B.distachyon"" = 2809,
  ""B.distachyon&O.sativa&A.thaliana"" = 18,
  ""S.bicolor&O.sativa&A.thaliana"" = 40,
  ""S.bicolor&B.distachyon&A.thaliana"" = 14,
  ""O.sativa&B.distachyon&M.acuminata"" = 28,
  ""S.bicolor&B.distachyon&M.acuminata"" = 13,
  ""O.sativa&M.acuminata&P.dactylifera"" = 35,
  ""M.acuminata&S.bicolor&A.thaliana"" = 21,
  ""B.distachyon&M.acuminata&A.thaliana"" = 7,
  ""O.sativa&M.acuminata&A.thaliana"" = 13,
  ""M.acuminata&P.dactylifera&A.thaliana"" = 206,
  ""P.dactylifera&A.thaliana&S.bicolor"" = 4,
  ""O.sativa&A.thaliana&P.dactylifera"" = 6,
  ""S.bicolor&O.sativa&M.acuminata"" = 64,
  ""S.bicolor&M.acuminata&P.dactylifera"" = 19,
  ""B.distachyon&A.thaliana&P.dactylifera"" = 3,
  ""B.distachyon&M.acuminata&P.dactylifera"" = 12,
  ""B.distachyon&S.bicolor&P.dactylifera"" = 23,
  ""M.acuminata&B.distachyon&S.bicolor&A.thaliana"" = 54,
  ""P.dactylifera&S.bicolor&O.sativa&M.acuminata"" = 62,
  ""B.distachyon&O.sativa&M.acuminata&P.dactylifera"" = 18,
  ""S.bicolor&B.distachyon&O.sativa&A.thaliana"" = 206,
  ""B.distachyon&M.acuminata&O.sativa&A.thaliana"" = 29,
  ""O.sativa&M.acuminata&A.thaliana&S.bicolor"" = 71,
  ""M.acuminata&O.sativa&P.dactylifera&A.thaliana"" = 28,
  ""B.distachyon&M.acuminata&O.sativa&A.thaliana"" = 7,
  ""B.distachyon&S.bicolor&P.dactylifera&A.thaliana"" = 11,
  ""B.distachyon&O.sativa&P.dactylifera&A.thaliana"" = 5,
  ""A.thaliana&P.dactylifera&S.bicolor&O.sativa"" = 21,
  ""M.acuminata&S.bicolor&P.dactylifera&A.thaliana"" = 23,
  ""M.acuminata&B.distachyon&S.bicolor&P.dactylifera"" = 24,
  ""M.acuminata&O.sativa&S.bicolor&B.distachyon"" = 368,
  ""P.dactylifera&B.distachyon&S.bicolor&O.sativa"" = 190,
  ""P.dactylifera&B.distachyon&S.bicolor&O.sativa&A.thaliana"" = 258,
  ""P.dactylifera&M.acuminata&S.bicolor&B.distachyon&O.sativa"" = 685,
  ""M.acuminata&S.bicolor&B.distachyon&O.sativa&A.thaliana"" = 1458,
  ""S.bicolor&M.acuminata&P.dactylifera&O.sativa&A.thaliana"" = 149,
  ""B.distachyon&M.acuminata&P.dactylifera&O.sativa&A.thaliana"" = 80,
  ""M.acuminata&S.bicolor&B.distachyon&P.dactylifera&A.thaliana"" = 113,
  ""M.acuminata&S.bicolor&B.distachyon&P.dactylifera&O.sativa&A.thaliana"" = 7674
)

# Plot
upset(fromExpression(input), 
      nintersects = 40, 
      nsets = 6, 
      order.by = ""freq"", 
      decreasing = T, 
      mb.ratio = c(0.6, 0.4),
      number.angles = 0, 
      text.scale = 1.1, 
      point.size = 2.8, 
      line.size = 1
      )","library,<-,c,upset,fromExpression",
violin_and_boxplot_ggplot2,unnamed-chunk-1-1,images/violin_and_boxplot_ggplot2/unnamed-chunk-1-1.png,"# Libraries
library(ggplot2)
library(dplyr)
library(hrbrthemes)
library(viridis)

# create a dataset
data <- data.frame(
  name=c( rep(""A"",500), rep(""B"",500), rep(""B"",500), rep(""C"",20), rep('D', 100)  ),
  value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )
)

# sample size
sample_size = data %>% group_by(name) %>% summarize(num=n())

# Plot
data %>%
  left_join(sample_size) %>%
  mutate(myaxis = paste0(name, ""\n"", ""n="", num)) %>%
  ggplot( aes(x=myaxis, y=value, fill=name)) +
    geom_violin(width=1.4) +
    geom_boxplot(width=0.1, color=""grey"", alpha=0.2) +
    scale_fill_viridis(discrete = TRUE) +
    theme_ipsum() +
    theme(
      legend.position=""none"",
      plot.title = element_text(size=11)
    ) +
    ggtitle(""A Violin wrapping a boxplot"") +
    xlab("""")","library,<-,data.frame,c,rep,rnorm,=,%>%,group_by,summarize,n,+,left_join,mutate,paste0,ggplot,aes,geom_violin,geom_boxplot,scale_fill_viridis,theme_ipsum,theme,element_text,ggtitle,xlab","geom_violin,geom_boxplot"
violin_grouped_ggplot2,unnamed-chunk-1-1,images/violin_grouped_ggplot2/unnamed-chunk-1-1.png,"# Libraries
library(ggplot2)
library(dplyr)
library(forcats)
library(hrbrthemes)
library(viridis)

# Load dataset from github
data <- read.table(""https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv"", header=T, sep="","") %>%
  mutate(tip = round(tip/total_bill*100, 1))
  
# Grouped
data %>%
  mutate(day = fct_reorder(day, tip)) %>%
  mutate(day = factor(day, levels=c(""Thur"", ""Fri"", ""Sat"", ""Sun""))) %>%
  ggplot(aes(fill=sex, y=tip, x=day)) + 
    geom_violin(position=""dodge"", alpha=0.5, outlier.colour=""transparent"") +
    scale_fill_viridis(discrete=T, name="""") +
    theme_ipsum()  +
    xlab("""") +
    ylab(""Tip (%)"") +
    ylim(0,40)","library,<-,%>%,read.table,mutate,round,*,/,+,fct_reorder,factor,c,ggplot,aes,geom_violin,scale_fill_viridis,theme_ipsum,xlab,ylab,ylim",geom_violin
violin_horizontal_ggplot2,unnamed-chunk-1-1,images/violin_horizontal_ggplot2/unnamed-chunk-1-1.png,"# Libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(forcats)
library(hrbrthemes)
library(viridis)

# Load dataset from github
data <- read.table(""https://raw.githubusercontent.com/zonination/perceptions/master/probly.csv"", header=TRUE, sep="","")

# Data is at wide format, we need to make it 'tidy' or 'long'
data <- data %>% 
  gather(key=""text"", value=""value"") %>%
  mutate(text = gsub(""\\."", "" "",text)) %>%
  mutate(value = round(as.numeric(value),0)) %>%
  filter(text %in% c(""Almost Certainly"",""Very Good Chance"",""We Believe"",""Likely"",""About Even"", ""Little Chance"", ""Chances Are Slight"", ""Almost No Chance""))

# Plot
p <- data %>%
  mutate(text = fct_reorder(text, value)) %>% # Reorder data
  ggplot( aes(x=text, y=value, fill=text, color=text)) +
    geom_violin(width=2.1, size=0.2) +
    scale_fill_viridis(discrete=TRUE) +
    scale_color_viridis(discrete=TRUE) +
    theme_ipsum() +
    theme(
      legend.position=""none""
    ) +
    coord_flip() + # This switch X and Y axis and allows to get the horizontal version
    xlab("""") +
    ylab(""Assigned Probability (%)"")

p","library,<-,read.table,%>%,gather,mutate,gsub,round,as.numeric,filter,%in%,c,+,fct_reorder,ggplot,aes,geom_violin,scale_fill_viridis,scale_color_viridis,theme_ipsum,theme,coord_flip,xlab,ylab",geom_violin
web-circular-barplot-with-R-and-ggplot2,unnamed-chunk-6-1,images/web-circular-barplot-with-R-and-ggplot2/unnamed-chunk-6-1.png,"plt <- ggplot(plot_df) +
  # Make custom panel grid
  geom_hline(
    aes(yintercept = y), 
    data.frame(y = c(0:3) * 1000),
    color = ""lightgrey""
  ) + 
  # Add bars to represent the cumulative track lengths
  # str_wrap(region, 5) wraps the text so each line has at most 5 characters
  # (but it doesn't break long words!)
  geom_col(
    aes(
      x = reorder(str_wrap(region, 5), sum_length),
      y = sum_length,
      fill = n
    ),
    position = ""dodge2"",
    show.legend = TRUE,
    alpha = .9
  ) +
  
  # Add dots to represent the mean gain
  geom_point(
    aes(
      x = reorder(str_wrap(region, 5),sum_length),
      y = mean_gain
    ),
    size = 3,
    color = ""gray12""
  ) +
  
  # Lollipop shaft for mean gain per region
  geom_segment(
    aes(
      x = reorder(str_wrap(region, 5), sum_length),
      y = 0,
      xend = reorder(str_wrap(region, 5), sum_length),
      yend = 3000
    ),
    linetype = ""dashed"",
    color = ""gray12""
  ) + 
  
  # Make it circular!
  coord_polar()

plt","<-,+,ggplot,geom_hline,aes,data.frame,*,c,:,geom_col,reorder,str_wrap,geom_point,geom_segment,coord_polar","geom_hline,geom_col,geom_point,geom_segment,coord_polar"
web-circular-barplot-with-R-and-ggplot2,unnamed-chunk-7-1,images/web-circular-barplot-with-R-and-ggplot2/unnamed-chunk-7-1.png,"plt <- plt +
  # Annotate the bars and the lollipops so the reader understands the scaling
  annotate(
    x = 11, 
    y = 1300,
    label = ""Mean Elevation Gain\n[FASL]"",
    geom = ""text"",
    angle = -67.5,
    color = ""gray12"",
    size = 2.5,
    family = ""Bell MT""
  ) +
  annotate(
    x = 11, 
    y = 3150,
    label = ""Cummulative Length [FT]"",
    geom = ""text"",
    angle = 23,
    color = ""gray12"",
    size = 2.5,
    family = ""Bell MT""
  ) +
  # Annotate custom scale inside plot
  annotate(
    x = 11.7, 
    y = 1100, 
    label = ""1000"", 
    geom = ""text"", 
    color = ""gray12"", 
    family = ""Bell MT""
  ) +
  annotate(
    x = 11.7, 
    y = 2100, 
    label = ""2000"", 
    geom = ""text"", 
    color = ""gray12"", 
    family = ""Bell MT""
  ) +
  annotate(
    x = 11.7, 
    y =3100, 
    label = ""3000"", 
    geom = ""text"", 
    color = ""gray12"", 
    family = ""Bell MT""
  ) +
  # Scale y axis so bars don't start in the center
  scale_y_continuous(
    limits = c(-1500, 3500),
    expand = c(0, 0),
    breaks = c(0, 1000, 2000, 3000)
  ) + 
  # New fill and legend title for number of tracks per region
  scale_fill_gradientn(
    ""Amount of Tracks"",
     colours = c( ""#6C5B7B"",""#C06C84"",""#F67280"",""#F8B195"")
  ) +
  # Make the guide for the fill discrete
  guides(
    fill = guide_colorsteps(
      barwidth = 15, barheight = .5, title.position = ""top"", title.hjust = .5
    )
  ) +
  theme(
    # Remove axis ticks and text
    axis.title = element_blank(),
    axis.ticks = element_blank(),
    axis.text.y = element_blank(),
    # Use gray text for the region names
    axis.text.x = element_text(color = ""gray12"", size = 12),
    # Move the legend to the bottom
    legend.position = ""bottom"",
  )

plt","<-,+,annotate,-,scale_y_continuous,c,scale_fill_gradientn,guides,guide_colorsteps,theme,element_blank,element_text",
web-circular-barplot-with-R-and-ggplot2,unnamed-chunk-8-1,images/web-circular-barplot-with-R-and-ggplot2/unnamed-chunk-8-1.png,"plt <- plt + 
  # Add labels
  labs(
    title = ""\nHiking Locations in Washington"",
    subtitle = paste(
      ""\nThis Visualisation shows the cummulative length of tracks,"",
      ""the amount of tracks and the mean gain in elevation per location.\n"",
      ""If you are an experienced hiker, you might want to go"",
      ""to the North Cascades since there are a lot of tracks,"",
      ""higher elevations and total length to overcome."",
      sep = ""\n""
  ),
    caption = ""\n\nData Visualisation by Tobias Stalder\ntobias-stalder.netlify.app\nSource: TidyX Crew (Ellis Hughes, Patrick Ward)\nLink to Data: github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-11-24/readme.md"") +
  # Customize general theme
  theme(
    
    # Set default color and font family for the text
    text = element_text(color = ""gray12"", family = ""Bell MT""),
    
    # Customize the text in the title, subtitle, and caption
    plot.title = element_text(face = ""bold"", size = 25, hjust = 0.05),
    plot.subtitle = element_text(size = 14, hjust = 0.05),
    plot.caption = element_text(size = 10, hjust = .5),
    
    # Make the background white and remove extra grid lines
    panel.background = element_rect(fill = ""white"", color = ""white""),
    panel.grid = element_blank(),
    panel.grid.major.x = element_blank()
  )
# Use `ggsave(""plot.png"", plt,width=9, height=12.6)` to save it as in the output
plt","<-,+,labs,paste,theme,element_text,element_rect,element_blank",
web-circular-lollipop-plot-with-ggplot2,unnamed-chunk-6-1,images/web-circular-lollipop-plot-with-ggplot2/unnamed-chunk-6-1.png,"main <- ggplot(df_pw_plot, aes(rank, time, color = category)) +
  # This segment represents the vertical lines
  geom_segment(
    aes(x = rank, xend = rank, y = 0, yend = time), 
    size = 1.2
  ) +
  # This rect is converted into the inner circle where we're going to place text
  # when converting the plot to circular coordinates.
  geom_rect(
    aes(xmin = 1, xmax = 501, ymin = 0, ymax = plus), 
    fill = ""grey97"", color = ""grey97""
  ) + 
  
  # Add our custom grid lines for the radial axis.
  # These lines indicate one day, one week, one month and one year.
  geom_hline(aes(yintercept = (1 * 24 * 60 + plus)), color = ""grey88"") +
  geom_hline(aes(yintercept = (7 * 24 * 60 + plus)), color = ""grey85"") +
  geom_hline(aes(yintercept = (30 * 24 * 60 + plus)), color = ""grey82"") +
  geom_hline(aes(yintercept = (365 * 24 * 60 + plus)), color = ""grey79"") +
  
  # Add points on the end of each line
  geom_point(aes(size = time)) +
  
  # Polar axis (y-axis) is in log10 scale
  scale_y_log10(expand = c(0, 0)) +
  
  # Use the Prism color scale for the categories
  rcartocolor::scale_color_carto_d(palette = ""Prism"", guide = ""none"") +
  
  # Assign a range for the size of the dots
  scale_size(
    range = c(1, 8), 
    limits = c(plus, max(df_pw_plot$time)), 
    guide = ""none""
  ) +
  
  # Make it circular!
  coord_polar() 

main","<-,+,ggplot,aes,geom_segment,geom_rect,geom_hline,(,*,geom_point,scale_y_log10,c,scale_color_carto_d,scale_size,max,$,coord_polar","geom_segment,geom_rect,geom_hline,geom_point,coord_polar"
web-circular-lollipop-plot-with-ggplot2,unnamed-chunk-7-1,images/web-circular-lollipop-plot-with-ggplot2/unnamed-chunk-7-1.png,"main <- main + 
  # Add labels with `geom_richtext()`
  geom_richtext(
    data = labels,
    aes(x = x, y = y, label = label, color = category),
    lineheight = 0.8,
    size = 8,
    family = ""Roboto Mono"",
    label.color = NA
  ) +
  # Regular text with `geom_text()`
  # Note that coordinates are explicitly passed here.
  geom_text(
    x = 500, y = 1.2,
    label = ""********\nCracking\nYour Favorite\nPassword"",
    family = ""Roboto Mono Medium"",
    size = 20,
    lineheight = 0.87,
    color = ""grey60""
  ) +
  geom_text(
    x = 250, y = 0.25,
    label = ""********"",
    family = ""Roboto Mono Medium"",
    size = 20,
    lineheight = 0.87,
    color = ""grey60""
  ) +
  geom_text(
    x = 250, y = 1.1,
    label = ""Time it takes to crack the 500 most\ncommon passwords by online guessing.\nSorted by rank and colored by category."",
    family = ""Roboto Mono"",
    size = 7,
    lineheight = 0.87,
    color = ""grey73""
  ) +
  geom_text(
    x = 250, y = 1.95,
    label = ""Time is displayed on a logarithmic scale\nwith the rings representing one day,\none week, one month, and one year\n(from inner to outer ring)."",
    family = ""Roboto Mono"",
    size = 6,
    lineheight = 0.87,
    color = ""grey73""
  )
  
main","<-,+,geom_richtext,aes,geom_text","geom_richtext,geom_text"
web-circular-lollipop-plot-with-ggplot2,unnamed-chunk-9-1,images/web-circular-lollipop-plot-with-ggplot2/unnamed-chunk-9-1.png,"# Much of the code is the same than the code above.

facet <- ggplot(facet_data, aes(rank, time, color = category)) +
  geom_segment(
    aes(x = rank, xend = rank, y = 0, yend = time), 
    size = 0.6
  ) +
  geom_rect(
    aes(xmin = 1, xmax = 501, ymin = 0, ymax = plus), 
    fill = ""grey97"", color = ""grey97""
  ) + 
  geom_hline(aes(yintercept = (1 * 24 * 60 + plus)), color = ""grey82"", size = 0.2) +
  geom_hline(aes(yintercept = (7 * 24 * 60 + plus)), color = ""grey79"", size = 0.2) +
  geom_hline(aes(yintercept = (30 * 24 * 60 + plus)), color = ""grey76"", size = 0.2) +
  geom_hline(aes(yintercept = (365 * 24 * 60 + plus)), color = ""grey73"", size = 0.2) +
  geom_point(aes(size = time)) +
  
  # This is what adds the label within each circle
  geom_text(
    aes(label = cat_label, color = category),
    x = 500, y = 0,
    family = ""Roboto Mono Medium"",
    size = 8,
    lineheight = 0.87
  ) +
  # This is what wraps the panels for the categories into a layout of 2 rows
  facet_wrap(~ category, nrow = 2) +
  coord_polar() + 
  scale_y_log10(expand = c(0, 0)) + 
  rcartocolor::scale_color_carto_d(palette = ""Prism"", guide = ""none"") +
  scale_size(
    range = c(0.5, 7), 
    limits = c(plus, max(df_pw_plot$time)), 
    guide = ""none""
  ) + 
  theme(
    strip.text = element_blank(), 
  )
  
facet","<-,+,ggplot,aes,geom_segment,geom_rect,geom_hline,(,*,geom_point,geom_text,facet_wrap,~,coord_polar,scale_y_log10,c,scale_color_carto_d,scale_size,max,$,theme,element_blank","geom_segment,geom_rect,geom_hline,geom_point,geom_text,facet_wrap,coord_polar"
web-circular-lollipop-plot-with-ggplot2,unnamed-chunk-10-1,images/web-circular-lollipop-plot-with-ggplot2/unnamed-chunk-10-1.png,"# Customize the main panel (top-panel)
main <- main + 
  # This 'theme_void' adds a completely empty theme 
  theme_void() + 
  # These negative margins are VERY important to obtain a tight layout.
  theme(
    plot.margin = margin(-50, -180, -70, -180, ""lines""),
  )

facet <- facet + 
  # Same theme_void for the lower panels
  theme_void() +
  theme(
    # Negative spacing between panels, which means they overlap
    panel.spacing = unit(-8, ""lines""),
    # Negative margin on top, to decrease blank space between these panels
    # and the main plot on top
    plot.margin = margin(-40, 50, 10, 50)
  ) + 
  # Adjust settings for the caption
  theme(
    plot.caption = element_text(
      family = ""Roboto Mono Medium"", 
      size = 20, 
      color = ""grey60"", 
      hjust = 0.5, 
      margin = margin(-50, 10, 30, 10)
    )
  ) + 
  # Add caption
  labs(caption = ""Visualization by Cédric Scherer ∙ Data by Knowledge is Beautiful"")


# Combine the two plots
# The '+' means to 'add' the two ggplot2 plots together.
panel <- (main + facet) + 
  plot_layout(
    ncol = 1, # Results in one plot on top and another on the bottom.
    heights = c(1, 0.28) # Height assigned to each plot
  )
panel","<-,+,theme_void,theme,margin,-,unit,element_text,labs,(,plot_layout,c",
web-dumbbell-chart-with-a-gap-column,unnamed-chunk-3-1,images/web-dumbbell-chart-with-a-gap-column/unnamed-chunk-3-1.png,"df_long %>%
  ggplot(aes(x=value,y=labels)) +

  geom_line(aes(group=labels), color=""#E7E7E7"", linewidth=3.5) +
  # note that linewidth is a little larger than the point size
  # so that the line matches the height of the point. why is it
  # like that? i don't really know

  geom_point(aes(color=name), size=3) +
  theme_minimal() +
  theme(legend.position = ""none"",
        axis.text.y = element_text(color=""black""),
        axis.text.x = element_text(color=""#989898""),
        axis.title = element_blank(),
        panel.grid = element_blank()
        ) +
  scale_color_manual(values=c(""#436685"", ""#BF2F24""))+
  scale_x_continuous(labels = scales::percent_format(scale = 1))
","+,%>%,ggplot,aes,geom_line,geom_point,theme_minimal,theme,element_text,element_blank,scale_color_manual,c,scale_x_continuous,percent_format","geom_line,geom_point"
web-dumbbell-chart-with-a-gap-column,unnamed-chunk-5-1,images/web-dumbbell-chart-with-a-gap-column/unnamed-chunk-5-1.png,"
# set a custom nudge value
nudge_value=.6

p_main=
df_long %>%

  # the following 3 lines of code are the same
  ggplot(aes(x=value,y=labels)) +
  geom_line(aes(group=labels), color=""#E7E7E7"", linewidth=3.5) +
  geom_point(aes(color=name), size=3) +

  # but we want geom_text for the data callouts and the legend

  # data callout
  geom_text(aes(label=value, color=name),
            size=3.25,
            nudge_x=if_else(
              df_long$value==df_long$max, # if it's the larger value...
              nudge_value,   # move it to the right of the point
              -nudge_value), # otherwise, move it to the left of the point
            hjust=if_else(
              df_long$value==df_long$max, #if it's the larger value
              0, # left justify
              1),# otherwise, right justify
            )+

  # legend
  geom_text(aes(label=name, color=name),
            data=. %>% filter(gap==max(gap)),
            nudge_y =.5,
            fontface=""bold"",
            size=3.25)+

  theme_minimal() +
  theme(legend.position = ""none"",
        axis.text.y = element_text(color=""black""),
        axis.text.x = element_text(color=""#989898""),
        axis.title = element_blank(),
        panel.grid = element_blank()
        ) +
  labs(x=""%"",y=NULL) +
  scale_color_manual(values=c(""#436685"", ""#BF2F24"")) +

  #extend the y-axis otherwise the legend is cut off
  coord_cartesian(ylim=c(1, 7.5)) +

  #display percentages with % appended
  scale_x_continuous(labels = scales::percent_format(scale = 1))

p_main","=,+,%>%,ggplot,aes,geom_line,geom_point,geom_text,if_else,==,$,-,filter,max,theme_minimal,theme,element_text,element_blank,labs,scale_color_manual,c,coord_cartesian,scale_x_continuous,percent_format","geom_line,geom_point,geom_text"
web-dumbbell-chart-with-a-gap-column,unnamed-chunk-7-1,images/web-dumbbell-chart-with-a-gap-column/unnamed-chunk-7-1.png,"p_gap=
  df_gap %>%
  ggplot(aes(x=gap,y=labels)) +
  geom_text(aes(x=0, label=gap_label, color=gap_party_max),
            fontface=""bold"",
            size=3.25) +

  geom_text(aes(x=0, y=7), # 7 because that's the # of y-axis values
            label=""Diff"",
            nudge_y =.5, # match the nudge value of the main plot legend
            fontface=""bold"",
            size=3.25) +

  theme_void() +
  coord_cartesian(xlim = c(-.05, 0.05),
                  ylim=c(1,7.5) # needs to match main plot
                  )+
  theme(
    plot.margin = margin(l=0, r=0, b=0, t=0), #otherwise it adds too much space
    panel.background = element_rect(fill=""#EFEFE3"", color=""#EFEFE3""),
    legend.position = ""none""
  )+
  scale_color_manual(values=c(""#436685"", ""#BF2F24""))

p_gap","=,+,%>%,ggplot,aes,geom_text,theme_void,coord_cartesian,c,-,theme,margin,element_rect,scale_color_manual",geom_text
web-dumbbell-chart-with-a-gap-column,unnamed-chunk-8-1,images/web-dumbbell-chart-with-a-gap-column/unnamed-chunk-8-1.png,"p_whole=
  # syntax from `patchwork`
  p_main + p_gap + plot_layout(design=
  c(
    area(l=0,  r=45, t=0, b=1), # defines the main figure area
    area(l=46, r=52, t=0, b=1)  # defines the gap figure area
  ))

p_whole","=,+,plot_layout,c,area",
web-extended-dumbbell-plot-ggplot2,unnamed-chunk-7-1,images/web-extended-dumbbell-plot-ggplot2/unnamed-chunk-7-1.png,"p <- ggplot(dat_gender)+
  
 geom_segment(data = Males,
              aes(x = Enrollments, y = Year,
                  yend = Females$Year, xend = Females$Enrollments), #use the $ operator to fetch data from our ""Females"" tibble
              color = ""#aeb6bf"",
              size = 4.5, #Note that I sized the segment to fit the points
              alpha = .5) +
  
  geom_point(aes(x = Enrollments, y = Year, color = Gender), size = 4, show.legend = TRUE)+
  
ggtitle(""Enrollment Trends at Historically Black Colleges and Universities"")
p","<-,+,ggplot,geom_segment,aes,$,geom_point,ggtitle","geom_segment,geom_point"
web-extended-dumbbell-plot-ggplot2,unnamed-chunk-10-1,images/web-extended-dumbbell-plot-ggplot2/unnamed-chunk-10-1.png,"p + 
   geom_text(data = diff,
             aes(label = paste(""D: "",diff), x = x_pos, y = Year), #note thatI changed the greek letter Delta to ""D:"" because of encoding reasons
             fill = ""white"",
             color = ""#4a4e4d"",
             size = 2.5,
             family = ""Segoe UI Semibold"") -> p_labelled
p_labelled","<-,+,geom_text,aes,paste",geom_text
web-extended-dumbbell-plot-ggplot2,unnamed-chunk-11-1,images/web-extended-dumbbell-plot-ggplot2/unnamed-chunk-11-1.png,"p_labelled +
  
  #add facet for more control
  facet_grid(Year ~ ., scales = ""free"", switch = ""y"") +
  
  #theming
  theme_minimal()+
  theme(panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.ticks.x = element_line(color = ""#4a4e4d""),
        text = element_text(family = ""Segoe UI Semibold"", color = ""#4a4e4d""),
        strip.text.y.left  = element_text(angle = 0),
        panel.background = element_rect(fill = ""white"", color = ""white""),
        strip.background = element_rect(fill = ""white"", color = ""white""),
        strip.text = element_text(color = ""#4a4e4d"", family = ""Segoe UI""),
        plot.background = element_rect(fill = ""white"", color = ""white""),
        panel.spacing = unit(0, ""lines""),
        plot.margin = margin(1,1,.5,1, ""cm""))-> p_ext_facetted
p_ext_facetted","<-,+,facet_grid,~,theme_minimal,theme,element_blank,element_line,element_text,element_rect,unit,margin",facet_grid
web-extended-dumbbell-plot-ggplot2,unnamed-chunk-12-1,images/web-extended-dumbbell-plot-ggplot2/unnamed-chunk-12-1.png,"ggplot(dat_gender)+
  
  #add mean and standard deviation for both groups
  geom_rect(xmin = stats_males$meanneg, xmax = stats_males$meanpos,
            ymin = 2016, ymax = 1989, fill = ""#762a83"", alpha = .05)+
  geom_vline(xintercept = stats_males$mean, linetype = ""solid"", size = .5, alpha = .8, color = ""#762a83"")+
  
  geom_rect(xmin = stats_females$meanneg, xmax = stats_females$meanpos,
            ymin = 2016, ymax = 1989, fill = ""#009688"", alpha = .05)+  
  geom_vline(xintercept = stats_females$mean, color = ""#009688"", linetype = ""solid"",  size = .5, alpha = .8) +
  
  #add point range
  geom_segment(data = Males, aes(x = Enrollments, y = Year, yend = Females$Year, , xend = Females$Enrollments),
               color = ""#aeb6bf"", size = 4.5, alpha = .5) +
  
  #add points
  geom_point(aes(x = Enrollments, y = Year, color = Gender), size = 4, show.legend = FALSE) +
  
  #color points
  scale_color_manual(values = c(""#009688"",""#762a83""))+
  #add point-range labels
  geom_text(data = diff, aes(label = paste(""D: "",diff), x = x_pos, y = Year), fill = ""white"", color = ""#4a4e4d"", size = 2.5, family = ""Segoe UI"") +
  
  #add annotations for mean and standard deviations
  geom_text(x = stats_females$mean - 1500, y = 1990, label = ""MEAN"", angle = 90, size = 2.5, color = ""#009688"", family = ""Segoe UI"")+
  geom_text(x = stats_females$meanpos -1500, y = 1990, label = ""STDEV"", angle = 90, size = 2.5, color = ""#009688"", family = ""Segoe UI"")+
  
  #add facets for more control
  facet_grid(Year ~ ., scales = ""free"", switch = ""y"") +
  #add title
  ggtitle(""Enrollment Trends at Historically Black Colleges and Universities"")+
  #theming
  theme_minimal()+
  theme(panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.ticks.x = element_line(color = ""#4a4e4d""),
        text = element_text(family = ""Segoe UI"", color = ""#4a4e4d""),
        strip.text.y.left  = element_text(angle = 0),
        panel.background = element_rect(fill = ""white"", color = ""white""),
        strip.background = element_rect(fill = ""white"", color = ""white""),
        strip.text = element_text(color = ""#4a4e4d"", family = ""Segoe UI""),
        plot.background = element_rect(fill = ""white"", color = ""white""),
        panel.spacing = unit(0, ""lines""),
        plot.margin = margin(1,1,.5,1, ""cm"")) -> p_styled
p_styled","<-,+,ggplot,geom_rect,$,geom_vline,geom_segment,aes,geom_point,scale_color_manual,c,geom_text,paste,-,facet_grid,~,ggtitle,theme_minimal,theme,element_blank,element_line,element_text,element_rect,unit,margin","geom_rect,geom_vline,geom_segment,geom_point,geom_text,facet_grid"
web-extended-dumbbell-plot-ggplot2,unnamed-chunk-13-1,images/web-extended-dumbbell-plot-ggplot2/unnamed-chunk-13-1.png,"p_styled +   
  
  #add subtitle and caption
  labs(subtitle = ""<span style = 'color: #762a83;'>**Male**</span> and <span style = 'color: #009688;'>**Female**</span> Enrollment from 1990 to 2015<br>"",
       caption = ""Plot by **Tobias Stalder** | tobias-stalder.netlify.app<br>Data from **data.world** | data.world/nces | originally by NCES<br>**#TidyTuesday**"")+
  
  #add theming for title, subtitle, caption
  theme(plot.caption = element_markdown(hjust = 0, lineheight = 1.5),
        plot.subtitle = element_markdown(size = 14, hjust = -.06),
        plot.title = element_text(size = 16, hjust = -.14)) -> p_fin #Note that hjust of title and subtitle depend on the export dimensions
p_fin","<-,+,labs,theme,element_markdown,-,element_text",
web-grouped-line-chart-small-multiple,unnamed-chunk-1-1,images/web-grouped-line-chart-small-multiple/unnamed-chunk-1-1.png,"plot(1, pch = 16, cex = 3)
text(1, 1.1, ""A fancy dot"", family = ""lobster"", col = ""steelblue"", cex = 3)","plot,text",text
web-grouped-line-chart-small-multiple,unnamed-chunk-4-1,images/web-grouped-line-chart-small-multiple/unnamed-chunk-4-1.png,"data_wrangled %>% 
  ggplot() + 
  geom_line(data = data_wrangled_bis,aes(x = decade, y = rank , group = country), color = ""grey75"",size = .7) + 
  geom_line(aes( x = decade, y = rank , group = country_name), size = 1.1, color = ""#0b53c1"") +
  geom_point(aes(x = decade, y = rank), shape = 21, fill = ""white"", color = ""#0b53c1"", stroke = 1.3,  size = 2.8) +
  geom_richtext(data = decades_legend, aes(x = decades, y = ranks, label = labels, vjust = vjusts), label.color = NA,fill = NA, family=""Lato"", fontface = ""italic"", size =3 ) +
   labs(
     title = str_to_upper(""Ranking some countries by the number<br>of water sources installations by decade""),
     caption = ""Data from Water Point Data Exchange.<br>
      <span>&#xf099;</span>**@issa_madjid**""
   ) + 
  scale_y_reverse(
    name = NULL
  ) + 
   scale_x_discrete(
     name = NULL, 
     labels = function(x) {paste0(str_sub(x,-2,-1),""s"")}
   ) + 
   coord_cartesian(clip = ""off"") + 
  facet_wrap(vars(country_name)) + 
  theme_minimal(base_family = ""Inconsolata"") +
   theme(
     plot.background = element_rect(fill = ""#f9fbfc""),
     panel.grid.major = element_blank(),
     panel.grid.minor = element_blank(),
     axis.text.y = element_blank(),
     axis.text =  element_text(color = ""black""),
     plot.title = element_markdown(face = ""bold"", hjust = 0.5, size = rel(1.8), margin = margin(t=10, b = 15)),
     plot.subtitle = element_markdown(size = rel(0.9)),
     plot.caption = element_markdown(family = ""Source Sans Pro"",size = rel(.8), margin = margin(t = 10)),
     strip.text = element_text( face = ""bold"", size = rel(1.1)),
     plot.margin = margin(t= 15, r = 10,b = 20, l = 10)
   )","+,%>%,ggplot,geom_line,aes,geom_point,geom_richtext,labs,str_to_upper,scale_y_reverse,scale_x_discrete,function,{,paste0,str_sub,-,coord_cartesian,facet_wrap,vars,theme_minimal,theme,element_rect,element_blank,element_text,element_markdown,rel,margin","geom_line,geom_point,geom_richtext,facet_wrap"
web-horizontal-barplot-with-labels-the-economist,unnamed-chunk-4-1,images/web-horizontal-barplot-with-labels-the-economist/unnamed-chunk-4-1.png,"plt <- ggplot(data) +
  geom_col(aes(count, name), fill = BLUE, width = 0.6) 

plt","<-,+,ggplot,geom_col,aes",geom_col
web-horizontal-barplot-with-labels-the-economist,unnamed-chunk-5-1,images/web-horizontal-barplot-with-labels-the-economist/unnamed-chunk-5-1.png,"plt <- plt + 
  scale_x_continuous(
    limits = c(0, 55.5),
    breaks = seq(0, 55, by = 5), 
    expand = c(0, 0), # The horizontal axis does not extend to either side
    position = ""top""  # Labels are located on the top
  ) +
  # The vertical axis only extends upwards 
  scale_y_discrete(expand = expansion(add = c(0, 0.5))) +
  theme(
    # Set background color to white
    panel.background = element_rect(fill = ""white""),
    # Set the color and the width of the grid lines for the horizontal axis
    panel.grid.major.x = element_line(color = ""#A8BAC4"", size = 0.3),
    # Remove tick marks by setting their length to 0
    axis.ticks.length = unit(0, ""mm""),
    # Remove the title for both axes
    axis.title = element_blank(),
    # Only left line of the vertical axis is painted in black
    axis.line.y.left = element_line(color = ""black""),
    # Remove labels from the vertical axis
    axis.text.y = element_blank(),
    # But customize labels for the horizontal axis
    axis.text.x = element_text(family = ""Econ Sans Cnd"", size = 16)
  )

plt","<-,+,scale_x_continuous,c,seq,scale_y_discrete,expansion,theme,element_rect,element_line,unit,element_blank,element_text",
web-horizontal-barplot-with-labels-the-economist,unnamed-chunk-6-1,images/web-horizontal-barplot-with-labels-the-economist/unnamed-chunk-6-1.png,"plt <- plt + 
  geom_shadowtext(
    data = subset(data, count < 8),
    aes(count, y = name, label = name),
    hjust = 0,
    nudge_x = 0.3,
    colour = BLUE,
    bg.colour = ""white"",
    bg.r = 0.2,
    family = ""Econ Sans Cnd"",
    size = 7
  ) + 
  geom_text(
    data = subset(data, count >= 8),
    aes(0, y = name, label = name),
    hjust = 0,
    nudge_x = 0.3,
    colour = ""white"",
    family = ""Econ Sans Cnd"",
    size = 7
  )

plt","<-,+,geom_shadowtext,subset,<,aes,geom_text,>=","geom_shadowtext,geom_text"
web-horizontal-barplot-with-labels-the-economist,unnamed-chunk-7-1,images/web-horizontal-barplot-with-labels-the-economist/unnamed-chunk-7-1.png,"plt <- plt +
  labs(
    title = ""Escape artists"",
    subtitle = ""Number of laboratory-acquired infections, 1970-2021""
  ) + 
  theme(
    plot.title = element_text(
      family = ""Econ Sans Cnd"", 
      face = ""bold"",
      size = 22
    ),
    plot.subtitle = element_text(
      family = ""Econ Sans Cnd"",
      size = 20
    )
  )
plt","<-,+,labs,theme,element_text",
web-horizontal-barplot-with-labels-the-economist,unnamed-chunk-8-1,images/web-horizontal-barplot-with-labels-the-economist/unnamed-chunk-8-1.png,"# Make room for annotations
plt <- plt + 
  theme(
    plot.margin = margin(0.05, 0, 0.1, 0.01, ""npc"")
  )

# Print the ggplot2 plot
plt

# Add horizontal line on top
# It goes from x = 0 (left) to x = 1 (right) on the very top of the chart (y = 1)
# You can think of 'gp' and 'gpar' as 'graphical parameters'.
# There we indicate the line color and width
grid.lines(
  x = c(0, 1),
  y = 1,
  gp = gpar(col = ""#e5001c"", lwd = 4)
)

# Add rectangle on top-left
# lwd = 0 means the rectangle does not have an outer line
# 'just' gives the horizontal and vertical justification
grid.rect(
  x = 0,
  y = 1,
  width = 0.05,
  height = 0.025,
  just = c(""left"", ""top""),
  gp = gpar(fill = ""#e5001c"", lwd = 0)
)

# We have two captions, so we use grid.text instead of 
# the caption provided by  ggplot2.
grid.text(
  ""Sources: Laboratory-Acquired Infection Database; American Biological Safety Association"", 
  x = 0.005, 
  y = 0.06, 
  just = c(""left"", ""bottom""),
  gp = gpar(
    col = GREY,
    fontsize = 16,
    fontfamily = ""Econ Sans Cnd""
  )
)
grid.text(
  ""The Economist"", 
  x = 0.005, 
  y = 0.005, 
  just = c(""left"", ""bottom""),
  gp = gpar(
    col = GREY,
    fontsize = 16,
    fontfamily = ""Milo TE W01""
  )
)","<-,+,theme,margin,grid.lines,c,gpar,grid.rect,grid.text","grid.lines,grid.rect,grid.text"
web-horizontal-barplot-with-labels-the-economist,unnamed-chunk-9-1,images/web-horizontal-barplot-with-labels-the-economist/unnamed-chunk-9-1.png,"plt <- plt + 
  labs(title = NULL, subtitle = NULL) +
  theme(
    plot.margin = margin(0.15, 0, 0.1, 0.01, ""npc"")
  )

plt 

grid.text(
  ""Escape artists"", 
  0, 
  0.925,
  just = c(""left"", ""bottom""),
  gp = gpar(
    fontsize = 22,
    fontface = ""bold"",
    fontfamily = ""Econ Sans Cnd""
  )
)

grid.text(
  ""Number of laboratory-acquired infections, 1970-2021"", 
  0, 
  0.875,
  just = c(""left"", ""bottom""),
  gp = gpar(
    fontsize = 20,
    fontfamily = ""Econ Sans Cnd""
  )
)

grid.lines(
  x = c(0, 1),
  y = 1,
  gp = gpar(col = ""#e5001c"", lwd = 4)
)

grid.rect(
  x = 0,
  y = 1,
  width = 0.05,
  height = 0.025,
  just = c(""left"", ""top""),
  gp = gpar(fill = ""#e5001c"", lwd = 0)
)

grid.text(
  ""Sources: Laboratory-Acquired Infection Database; American Biological Safety Association"", 
  x = 0.005, 
  y = 0.06, 
  just = c(""left"", ""bottom""),
  gp = gpar(
    col = GREY,
    fontsize = 16,
    fontfamily = ""Econ Sans Cnd""
  )
)

grid.text(
  ""The Economist"", 
  x = 0.005, 
  y = 0.005, 
  just = c(""left"", ""bottom""),
  gp = gpar(
    col = GREY,
    fontsize = 16,
    fontfamily = ""Milo TE W01""
  )
)","<-,+,labs,theme,margin,grid.text,c,gpar,grid.lines,grid.rect","grid.text,grid.lines,grid.rect"
web-lemurs-parallel-plot,unnamed-chunk-5-1,images/web-lemurs-parallel-plot/unnamed-chunk-5-1.png,"plt <- ggplot(lem_longev) + 
  geom_segment(aes(y = longev_F, yend = longev_M, x = 1, xend = 2, color = color)) +
  geom_point(aes(y = longev_F, x = 1, color = color, size = n_F)) +
  geom_point(aes(y = longev_M, x = 2, color = color, size = n_M)) +
  scale_color_identity()

plt","<-,+,ggplot,geom_segment,aes,geom_point,scale_color_identity","geom_segment,geom_point"
web-lemurs-parallel-plot,unnamed-chunk-6-1,images/web-lemurs-parallel-plot/unnamed-chunk-6-1.png,"plt <- plt +
  geom_text_repel(
    data = subset(lem_longev, taxon_id %% 2 != 0),
    aes(y = longev_M, x = 2, label = latin_name),
    nudge_x = 0.1, hjust = 0, direction = ""y"", family = family1,
    point.padding = 1, segment.size = 0.2, color = ""grey15""
  ) +
  geom_text_repel(
    data = subset(lem_longev, taxon_id %% 2 == 0),
    aes(y = longev_F, x = 1, label = latin_name),
    nudge_x = -0.1, hjust = 1, direction = ""y"", family = family1,
    point.padding = 1, segment.size = 0.2, color = ""grey15""
  ) +
  scale_x_continuous(limits = c(0.5, 2.5))

plt","<-,+,geom_text_repel,subset,!=,%%,aes,==,-,scale_x_continuous,c",geom_text_repel
web-lemurs-parallel-plot,unnamed-chunk-7-1,images/web-lemurs-parallel-plot/unnamed-chunk-7-1.png,"plt <- ggplot(lem_longev) + 
  # Add horizontal lines in the bacground representing the years axis
  annotate(
    ""segment"", x = 1.1, xend = 1.9, 
    y = seq(10, 40, by = 1), yend = seq(10, 40, by = 1), 
    alpha = 0.2, size = 0.2
  ) +
  # Add points with the same color than the background. These are the 
  # background of the text indicating the ages
  annotate(
    ""point"", x = 1.5, y = seq(10, 40, by = 5), 
    size = 16, color = ""grey96""
  ) +
  # Add the ages
  annotate(
    ""text"", x = 1.5, y = seq(10, 40, by = 5), 
    label = seq(10, 40, by = 5), size = 8, alpha = 0.2, 
    family = family2, fontface = ""bold"", color = ""darkgreen""
  ) +
  # Add annotation indicating which sex is on each side
  annotate(
    ""text"", x = c(0.9, 2.1), y = 11.25, 
    label = c(""Female"", ""Male""), hjust = c(1, 0), family = family2, 
    fontface = ""bold"", size = 10, alpha = 0.3, color = ""darkgreen""
  ) +
  # Same lollipops as above
  geom_segment(aes(y = longev_F, yend = longev_M, x = 1, xend = 2, color = color)) +
  geom_point(aes(y = longev_F, x = 1, color = color, size = n_F)) +
  geom_point(aes(y = longev_M, x = 2, color = color, size = n_M)) +
  
  # Same labels as above
  geom_text_repel(
    data = subset(lem_longev, taxon_id %% 2 != 0),
    aes(y = longev_M, x = 2, label = latin_name),
    nudge_x = 0.1, hjust = 0, direction = ""y"", family = family1,
    point.padding = 1, segment.size = 0.2, color = ""grey15""
  ) +
  geom_text_repel(
    data = subset(lem_longev, taxon_id %% 2 == 0),
    aes(y = longev_F, x = 1, label = latin_name),
    nudge_x = -0.1, hjust = 1, direction = ""y"", family = family1,
    point.padding = 1, segment.size = 0.2, color = ""grey15""
  ) +
  scale_x_continuous(limits = c(0.5, 2.5)) +
  scale_color_identity() +
  # This scale determine how the legend for the size is created
  scale_size_continuous(
    range = c(0.5, 5), 
    breaks = seq(0, 120, by = 20), 
    name = ""Total number of lemurs hosted at DLC by species and sex""
  ) +
  # Use a completely empty theme
  theme_void() +
  # Build a theme from scratch
  theme(
    # Set background color to grey96
    plot.background = element_rect(fill = ""grey96"", color = NA),
    # Send legend to bottom
    legend.position = ""bottom"",
    # Customize text of individual elements in the legend
    legend.text = element_text(family = family1, color = ""darkgreen""),
    # Customize text of the legend title
    legend.title = element_text(family = family1, color = ""darkgreen""),
    # Customize margin, the 10 is added to the top of the legend.
    legend.margin = margin(10, 0, 0, 0)
  )
  
plt","<-,+,ggplot,annotate,seq,c,geom_segment,aes,geom_point,geom_text_repel,subset,!=,%%,==,-,scale_x_continuous,scale_color_identity,scale_size_continuous,theme_void,theme,element_rect,element_text,margin","geom_segment,geom_point,geom_text_repel"
web-lemurs-parallel-plot,unnamed-chunk-8-1,images/web-lemurs-parallel-plot/unnamed-chunk-8-1.png,"plt <- plt + 
  labs(
    title = ""Longest lived lemurs at the Duke Lemur Center"",
    subtitle = ""Maximum age recorded in years (living or dead), by species and sex"",
    caption = ""Source: Duke Lemur Center · Graphic: Georgios Karamanis""
  ) +
  theme(
    plot.title = element_text(
      hjust = 0.5, size = 28, family = family2, 
      face = ""bold"", color = ""darkgreen""
    ),
    plot.subtitle = element_text(
      margin = margin(7, 0, 0, 0), hjust = 0.5, 
      size = 18, family = family1, color = ""grey30""
    ),
    plot.caption = element_text(
      hjust = 0.5, size = 10, color = ""grey30"", family = family1
    ),
    plot.margin = margin(20, 20, 20, 20)
  )

plt","<-,+,labs,theme,element_text,margin",
web-line-chart-small-multiple-all-group-greyed-out,unnamed-chunk-4-1,images/web-line-chart-small-multiple-all-group-greyed-out/unnamed-chunk-4-1.png,"p1 <- df1 %>% 
  ggplot() +
  geom_hline(yintercept = 100,linetype=""solid"", size=.25) +
  geom_point(data=df1 %>% 
               group_by(country) %>% 
               slice_max(date),
             aes(x=date, y=value, color=country),shape=16) +
  geom_line(aes(x=date, y=value, color=country)) +
  gghighlight(use_direct_label = FALSE,
              unhighlighted_params = list(colour = alpha(""grey85"", 1))) +
  geom_text(data=df1 %>% 
               group_by(country) %>% 
               slice_max(date),
             aes(x=date, y=value, color=country, label = round(value)),
             hjust = -.5, vjust = .5, size=2.5, family=font, fontface=""bold"") +
  scale_color_met_d(name=""Redon"") +
  scale_x_date(date_labels = ""%y"") +
  scale_y_continuous(breaks = c(90,95,100,105,110),
                     labels = c("""","""",""100"","""","""")
                     ) +
  #facet_wrap(~ country) +
  facet_wrap(~  factor(country, levels=c('USA','China','Japan','Germany', 'UK','France', 'Italy', 'South Korea', 'Australia'))) +
  coord_cartesian(clip = ""off"") +
  theme(
    axis.title = element_blank(),
    axis.text = element_text(color=txt_col, size=7),
    strip.text.x = element_text(face=""bold""),
    plot.title = element_markdown(hjust=.5,size=34, color=txt_col,lineheight=.8, face=""bold"", margin=margin(20,0,30,0)),
    plot.subtitle = element_markdown(hjust=.5,size=18, color=txt_col,lineheight = 1, margin=margin(10,0,30,0)),
    plot.caption = element_markdown(hjust=.5, margin=margin(60,0,0,0), size=8, color=txt_col, lineheight = 1.2),
    plot.caption.position = ""plot"",
    plot.background = element_rect(color=bg, fill=bg),
    plot.margin = margin(10,10,10,10),
    legend.position = ""none"",
    legend.title = element_text(face=""bold"")
  )

p1","<-,+,%>%,ggplot,geom_hline,geom_point,group_by,slice_max,aes,geom_line,gghighlight,list,alpha,geom_text,round,-,scale_color_met_d,scale_x_date,scale_y_continuous,c,facet_wrap,~,factor,coord_cartesian,theme,element_blank,element_text,element_markdown,margin,element_rect","geom_hline,geom_point,geom_line,gghighlight,geom_text,facet_wrap"
web-line-chart-with-labels-at-end-of-line,unnamed-chunk-6-1,images/web-line-chart-with-labels-at-end-of-line/unnamed-chunk-6-1.png,"plt <- ggplot(
  # The ggplot object has associated the data for the highlighted countries
  df_mac_indexed_2008 %>% filter(group != ""other""), 
  aes(year, price_rel, group = iso_a3)
) + 
  # Geometric annotations that play the role of grid lines
  geom_vline(
    xintercept = seq(2000, 2020, by = 5),
    color = ""grey91"", 
    size = .6
  ) +
  geom_segment(
    data = tibble(y = seq(-4, 3, by = 1), x1 = 2000, x2 = 2020),
    aes(x = x1, xend = x2, y = y, yend = y),
    inherit.aes = FALSE,
    color = ""grey91"",
    size = .6
  ) +
  geom_segment(
    data = tibble(y = 0, x1 = 2000, x2 = 2020),
    aes(x = x1, xend = x2, y = y, yend = y),
    inherit.aes = FALSE,
    color = ""grey60"",
    size = .8
  ) +
  geom_vline(
    aes(xintercept = ref_year), 
    color = ""grey40"",
    linetype = ""dotted"",
    size = .8
  ) +
  ## Lines for the non-highlighted countries
  geom_line(
    data = df_mac_indexed_2008 %>% filter(group == ""other""),
    color = ""grey75"",
    size = .6,
    alpha = .5
  ) +
  ## Lines for the highlighted countries.
  # It's important to put them after the grey lines
  # so the colored ones are on top
  geom_line(
    aes(color = group),
    size = .9
  )
plt","<-,+,ggplot,%>%,filter,!=,aes,geom_vline,seq,geom_segment,tibble,-,geom_line,==","geom_vline,geom_segment,geom_line"
web-line-chart-with-labels-at-end-of-line,unnamed-chunk-7-1,images/web-line-chart-with-labels-at-end-of-line/unnamed-chunk-7-1.png,"plt <- plt + 
  annotate(
    ""text"", x = 2008.15, y = -3.35, 
    label = ""2008"",
    family = ""Lato"",
    size = 8,
    color = ""grey40"",
    hjust = 0
  ) +
  geom_text_repel(
    aes(color = group, label = name_lab),
    family = ""Lato"",
    fontface = ""bold"",
    size = 8,
    direction = ""y"",
    xlim = c(2020.8, NA),
    hjust = 0,
    segment.size = .7,
    segment.alpha = .5,
    segment.linetype = ""dotted"",
    box.padding = .4,
    segment.curvature = -0.1,
    segment.ncp = 3,
    segment.angle = 20
  ) +
  ## coordinate system + scales
  coord_cartesian(
    clip = ""off"",
    ylim = c(-4, 3)
  ) +
  scale_x_continuous(
    expand = c(0, 0),
    limits = c(2000, 2023.5), 
    breaks = seq(2000, 2020, by = 5)
  ) +
  scale_y_continuous(
    expand = c(0, 0),
    breaks = seq(-4, 3, by = 1),
    labels = glue::glue(""{format(seq(-4, 3, by = 1), nsmall = 2)}$"")
  )
plt ","<-,+,annotate,-,geom_text_repel,aes,c,coord_cartesian,scale_x_continuous,seq,scale_y_continuous,glue",geom_text_repel
web-line-chart-with-labels-at-end-of-line,unnamed-chunk-8-1,images/web-line-chart-with-labels-at-end-of-line/unnamed-chunk-8-1.png,"plt <- plt + 
  scale_color_manual(
    values = c(rcartocolor::carto_pal(n = n, name = ""Bold"")[1:n-1], ""grey50"")
  ) +
  labs(
    title = ""Compared to the financial crisis in 2008, how much more or less do you have to pay for a Big Mac today?"",
    subtitle = ""The <i>index chart</i> visualizes the price changes (in USD) of a Big Mac based on a 2008 as index year. The <b>Big Mac Index</b> is published by The Economist as an informal way to provide a test of the<br>extent to which market exchange rates result in goods costing the same in different countries. It <i>seeks to make exchange-rate theory a bit more digestible</i> and takes its name from the Big Mac,<br>a hamburger sold at McDonald's restaurants."",
    caption = ""Visualization by Cédric Scherer  •  Data by The Economist  •  The index chart shows the 27 countries that provide Big mac prices for all years from 2000 to 2020. In case a country was reported twice per year, the mean value was visualized.""
  )
plt","<-,+,scale_color_manual,c,[,carto_pal,-,:,labs",
web-lineplots-and-area-chart-the-economist,unnamed-chunk-5-1,images/web-lineplots-and-area-chart-the-economist/unnamed-chunk-5-1.png,"# Aesthetics defined in the `ggplot()` call are reused in the 
# `geom_line()` and `geom_point()` calls.
plt1 <- ggplot(line_data, aes(year, percent)) +
  geom_line(aes(color = region), size = 2.4) +
  geom_point(
    aes(fill = region), 
    size = 5, 
    pch = 21, # Type of point that allows us to have both color (border) and fill.
    color = ""white"", 
    stroke = 1 # The width of the border, i.e. stroke.
  ) +
  # Set values for the color and the fill
  scale_color_manual(values = c(BLUE, GREEN, BROWN)) +
  scale_fill_manual(values = c(BLUE, GREEN, BROWN)) + 
  # Do not include any legend
  theme(legend.position = ""none"")

plt1","<-,+,ggplot,aes,geom_line,geom_point,scale_color_manual,c,scale_fill_manual,theme","geom_line,geom_point"
web-lineplots-and-area-chart-the-economist,unnamed-chunk-6-1,images/web-lineplots-and-area-chart-the-economist/unnamed-chunk-6-1.png,"plt1 <- plt1 + 
  scale_x_continuous(
    limits = c(2007.5, 2021.5),
    expand = c(0, 0), # The horizontal axis does not extend to either side
    breaks = c(2008, 2012, 2016, 2020),  # Set custom break locations
    labels = c(""2008"", ""12"", ""16"", ""20"") # And custom labels on those breaks!
  ) +
  scale_y_continuous(
    limits = c(0, 32),
    breaks = seq(0, 30, by = 5), 
    expand = c(0, 0)
  ) + 
  theme(
    # Set background color to white
    panel.background = element_rect(fill = ""white""),
    # Remove all grid lines
    panel.grid = element_blank(),
    # But add grid lines for the vertical axis, customizing color and size 
    panel.grid.major.y = element_line(color = ""#A8BAC4"", size = 0.3),
    # Remove tick marks on the vertical axis by setting their length to 0
    axis.ticks.length.y = unit(0, ""mm""), 
    # But keep tick marks on horizontal axis
    axis.ticks.length.x = unit(2, ""mm""),
    # Remove the title for both axes
    axis.title = element_blank(),
    # Only the bottom line of the vertical axis is painted in black
    axis.line.x.bottom = element_line(color = ""black""),
    # Remove labels from the vertical axis
    axis.text.y = element_blank(),
    # But customize labels for the horizontal axis
    axis.text.x = element_text(family = ""Econ Sans Cnd"", size = 16)
  )

plt1","<-,+,scale_x_continuous,c,scale_y_continuous,seq,theme,element_rect,element_blank,element_line,unit,element_text",
web-lineplots-and-area-chart-the-economist,unnamed-chunk-7-1,images/web-lineplots-and-area-chart-the-economist/unnamed-chunk-7-1.png,"
# Add labels for the lines
plt1 <- plt1 + 
  new_scale_color() + 
  geom_shadowtext(
    aes(x, y, label = labels, color = color),
    data = line_labels,
    hjust = 0, # Align to the left
    bg.colour = ""white"", # Shadow color (or background color)
    bg.r = 0.4, # Radius of the background. The higher the value the bigger the shadow.
    family = ""Econ Sans Cnd"",
    size = 6
  ) + 
  scale_color_identity() # Use the colors in the 'color' variable as they are.

# Add labels for the horizontal lines
plt1 <- plt1 + 
  geom_text(
    data = data.frame(x = 2021.5, y = seq(0, 30, by = 5)),
    aes(x, y, label = y),
    hjust = 1, # Align to the right
    vjust = 0, # Align to the bottom
    nudge_y = 32 * 0.01, # The pad is equal to 1% of the vertical range (32 - 0)
    family = ""Econ Sans Cnd"",
    size = 6
  )

# Add title
plt1 <- plt1 +
  labs(
    title = ""**Selected regions,** % of child population"",
  ) + 
  theme(
    # theme_markdown() is provided by ggtext and means the title contains 
    # Markdown that should be parsed as such (the '**' symbols)
    plot.title = element_markdown(
      family = ""Econ Sans Cnd"", 
      size = 18
    )
  )

plt1","<-,+,new_scale_color,geom_shadowtext,aes,scale_color_identity,geom_text,data.frame,seq,*,labs,theme,element_markdown","geom_shadowtext,geom_text"
web-lineplots-and-area-chart-the-economist,unnamed-chunk-8-1,images/web-lineplots-and-area-chart-the-economist/unnamed-chunk-8-1.png,"plt2 <- ggplot(stacked_data) +
  # color = ""white"" indicates the color of the lines between the areas
  geom_area(aes(year, percent, fill = region), color = ""white"") +
  scale_fill_manual(values = c(GREY, BROWN, GREEN, BLUE)) +
  theme(legend.position = ""None"") # no legend

plt2","<-,+,ggplot,geom_area,aes,scale_fill_manual,c,theme",geom_area
web-lineplots-and-area-chart-the-economist,unnamed-chunk-9-1,images/web-lineplots-and-area-chart-the-economist/unnamed-chunk-9-1.png,"
plt2 <- plt2 + 
  scale_x_continuous(
    # Note: Data goes from 2008 to 2020. Extra space is added on the right
    # so there's room for the grid line labels ;)
    limits = c(2007.5, 2021.5),
    expand = c(0, 0),
    breaks = c(2008, 2012, 2016, 2020),
    labels = c(""2008"", ""12"", ""16"", ""20"")
  ) +
  scale_y_continuous(
    limits = c(0, 320),
    breaks = seq(0, 300, by = 50), 
    expand = c(0, 0)
  ) + 
  theme(
    # Set background color to white
    panel.background = element_rect(fill = ""white""),
    # Remove all grid lines
    panel.grid = element_blank(),
    # But add grid lines for the vertical axis, customizing color and size 
    panel.grid.major.y = element_line(color = ""#A8BAC4"", size = 0.3),
    # Remove tick marks by setting their length to 0
    axis.ticks.length.y = unit(0, ""mm""), 
    axis.ticks.length.x = unit(2, ""mm""),
    # Remove the title for both axes
    axis.title = element_blank(),
    # Only bottom line of the vertical axis is painted in black
    axis.line.x.bottom = element_line(color = ""black""),
    # Remove labels from the vertical axis
    axis.text.y = element_blank(),
    # But customize labels for the horizontal axis
    axis.text.x = element_text(family = ""Econ Sans Cnd"", size = 16)
  )

plt2","<-,+,scale_x_continuous,c,scale_y_continuous,seq,theme,element_rect,element_blank,element_line,unit,element_text",
web-lineplots-and-area-chart-the-economist,unnamed-chunk-10-1,images/web-lineplots-and-area-chart-the-economist/unnamed-chunk-10-1.png,"plt2 <- plt2 + 
  geom_text(
    aes(x, y, label = labels, color = color),
    data = stacked_labels,
    hjust = 0,
    vjust = 0.5,
    family = ""Econ Sans Cnd"",
    size = 6,
    inherit.aes = FALSE
  ) + 
  scale_color_identity()

plt2 <- plt2 +
  geom_text(
    data = data.frame(x = 2021.5, y = seq(0, 300, by = 50)),
    aes(x, y, label = y),
    hjust = 1,
    vjust = 0,
    nudge_y = 300 * 0.01, # Again, the pad is equal to 1% of the vertical range.
    family = ""Econ Sans Cnd"",
    size = 6,
    inherit.aes = FALSE
  )

plt2 <- plt2 + 
  geom_curve(
    aes(x = x, y = y, xend = xend, yend = yend),
    data = data.frame(x = 2016.9, y = 210, xend = 2018.8, yend = 138),
    curvature = -0.5,
    angle = 90
  ) +
  geom_point(
    aes(x, y), 
    data = data.frame(x = 2018.8, y = 138),
    color = ""black""
  )

# Note again we use `element_markdown()` to render Markdown content
plt2 <- plt2 + 
  labs(
    title = ""**Number of children,** m"",
  ) + 
  theme(
    plot.title = element_markdown(
      family = ""Econ Sans Cnd"", 
      size = 18
    )
  )

plt2","<-,+,geom_text,aes,scale_color_identity,data.frame,seq,*,geom_curve,-,geom_point,labs,theme,element_markdown","geom_text,geom_curve,geom_point"
web-lineplots-and-area-chart-the-economist,unnamed-chunk-11-1,images/web-lineplots-and-area-chart-the-economist/unnamed-chunk-11-1.png,"plt1 <- plt1 + theme(plot.margin = margin(0, 0.05, 0, 0, ""npc""))
plt2 <- plt2 + theme(plot.margin = margin(0, 0, 0.05, 0, ""npc""))
plt <- plt1 | plt2


title_theme <- theme(
  plot.title = element_text(
    family = ""Econ Sans Cnd"", 
    face = ""bold"",
    size = 22,
    margin = margin(0.8, 0, 0, 0, ""npc"")
  ),
  plot.subtitle = element_text(
    family = ""Econ Sans Cnd"",
    size = 20,
    margin = margin(0.4, 0, 0, 0, ""npc"")
  )
)

plt <- plt + plot_annotation(
    title = ""All work, no play"",
    subtitle = ""Children in child labour*"",
    theme = title_theme
  ) +
  theme(
    plot.margin = margin(0.075, 0, 0.1, 0, ""npc""),
  )

plt","<-,+,theme,margin,|,element_text,plot_annotation",
web-lineplots-and-area-chart-the-economist,unnamed-chunk-12-1,images/web-lineplots-and-area-chart-the-economist/unnamed-chunk-12-1.png,"plt

# Add line on top of the chart
grid.lines(
  x = c(0, 1),
  y = 1,
  gp = gpar(col = ""#e5001c"", lwd = 4)
)

# Add rectangle on top-left
# lwd = 0 means the rectangle does not have an outer line
# 'just' gives the horizontal and vertical justification
grid.rect(
  x = 0,
  y = 1,
  width = 0.05,
  height = 0.025,
  just = c(""left"", ""top""),
  gp = gpar(fill = ""#e5001c"", lwd = 0)
)
# Add first caption
grid.text(
  'Source: ""Child Labour: Global estimates 2020, trends and the road forward"", ILO and UNICEF', 
  x = 0.005, 
  y = 0.06, 
  just = c(""left"", ""bottom""),
  gp = gpar(
    col = ""grey50"",
    fontsize = 16,
    fontfamily = ""Econ Sans Cnd""
  )
)

# Add second caption
grid.text(
  ""The Economist"", 
  x = 0.005, 
  y = 0.005, 
  just = c(""left"", ""bottom""),
  gp = gpar(
    col = ""grey50"",
    fontsize = 16,
    fontfamily = ""Milo TE W01""
  )
)

# Add third caption
grid.text(
  ""*5- to 17- year-olds"", 
  x = 0.995, 
  y = 0.06, 
  just = c(""right"", ""bottom""),
  gp = gpar(
    col = ""grey50"",
    fontsize = 16,
    fontfamily = ""Econ Sans Cnd""
  )
)","grid.lines,c,gpar,grid.rect,grid.text","grid.lines,grid.rect,grid.text"
web-lollipop-plot-with-R-the-office,unnamed-chunk-5-1,images/web-lollipop-plot-with-R-the-office/unnamed-chunk-5-1.png,"# First, horizontal lines that are used as scale reference. 
# They are added first to ensure they stay in the background.
p <- df_office_avg %>% 
  ggplot(aes(episode_mod, imdb_rating)) +
    geom_hline(
      data = tibble(y = 7:10),
      aes(yintercept = y),
      color = ""grey82"",
      size = .5
    )

# Add vertical segments. 
# These represent the deviation of episode's rating from the mean rating of 
# the season they appeared.
p <- p + 
  geom_segment(
    aes(
      xend = episode_mod,
      yend = avg, 
      color = season, 
      color = after_scale(colorspace::lighten(color, .2))
    )
  )

# Add lines and dots.
# These represent the mean rating per season. 
# The dots mark each episode's rating, with its size given by the number of votes.
p <- p + 
  geom_line(
    data = df_lines,
    aes(x, y),
    color = ""grey40""
  ) +
  geom_line(
    data = df_lines,
    aes(
      x_group, 
      y, 
      color = season, 
      color = after_scale(colorspace::darken(color, .2))
    ),
    size = 2.5
  ) + 
  geom_point(
    aes(size = total_votes, color = season)
  ) 

p","<-,+,%>%,ggplot,aes,geom_hline,tibble,:,geom_segment,after_scale,lighten,geom_line,darken,geom_point","geom_hline,geom_segment,geom_line,geom_point"
web-scatterplot-corruption-and-human-development,unnamed-chunk-5-1,images/web-scatterplot-corruption-and-human-development/unnamed-chunk-5-1.png,"# Okabe Ito colors
# The last color is used for the regression fit.
region_cols <- c(""#E69F00"", ""#56B4E9"", ""#009E73"", ""#F0E442"", ""#0072B2"", ""#999999"")


ggplot(corrupt, aes(cpi, hdi)) +
  # Adding the regression fit before the points make sure the line stays behind the points.
  geom_smooth(
    aes(color = ""y ~ log(x)"", fill = ""y ~ log(x)""),
    method = ""lm"", 
    formula = y~log(x), 
    se = FALSE, # Plot the line only (without confidence bands)
    fullrange = TRUE # The fit spans the full range of the horizontal axis
  ) +
  geom_point(
    aes(color = region, fill = region),
    size = 2.5, alpha = 0.5, 
    shape = 21 # This is a dot with both border (color) and fill.
  ) +
  # Add auto-positioned text
  geom_text_repel(
    aes(label = label),
    color = ""black"",
    size = 9/.pt, # font size 9 pt
    point.padding = 0.1, 
    box.padding = 0.6,
    min.segment.length = 0,
    max.overlaps = 1000,
    seed = 7654 # For reproducibility reasons
  ) +
  scale_color_manual(
    name = NULL, # it's one way to omit the legend title
    values = darken(region_cols, 0.3) # dot borders are a darker than the fill
  ) +
  scale_fill_manual(
    name = NULL,
    values = region_cols
  ) +
  # Add labels and customize axes
  scale_x_continuous(
    name = ""Corruption Perceptions Index, 2015 (100 = least corrupt)"",
    limits = c(10, 95),
    breaks = c(20, 40, 60, 80, 100),
    expand = c(0, 0) # This removes the default padding on the ends of the axis
  ) +
  scale_y_continuous(
    name = ""Human Development Index, 2015\n(1.0 = most developed)"",
    limits = c(0.3, 1.05),
    breaks = c(0.2, 0.4, 0.6, 0.8, 1.0), # Manually set axis breaks
    expand = c(0, 0)
  ) +
  # Override default legend appearance
  guides(
    color = guide_legend(
      # All keys go in the same row.
      nrow = 1,
      override.aes = list(
        # 0 means no line, 1 is a solid line 
        # The result is 5 keys with no line and 1 with a line
        linetype = c(rep(0, 5), 1), 
        # Now, 5 keys with the marker number 21 (the one used in the plot) 
        # and 1 key without this marker.
        shape = c(rep(21, 5), NA)
      )
    )
  ) +
  # Minimal grid theme that only draws horizontal lines
  theme_minimal_hgrid(12, rel_small = 1) +
  # Customize aspects of the legend
  theme(
    legend.position = ""top"",
    legend.justification = ""right"",
    legend.text = element_text(size = 9),
    legend.box.spacing = unit(0, ""pt"")
  )","<-,c,+,ggplot,aes,geom_smooth,~,log,geom_point,geom_text_repel,/,scale_color_manual,darken,scale_fill_manual,scale_x_continuous,scale_y_continuous,guides,guide_legend,list,rep,theme_minimal_hgrid,theme,element_text,unit","geom_smooth,geom_point,geom_text_repel"
web-streamchart-with-ggstream,unnamed-chunk-9-1,images/web-streamchart-with-ggstream/unnamed-chunk-9-1.png,"g <- df_best_stream_fct %>% 
  ggplot(
    aes(
      issue, value, 
      color = char_costume, 
      fill = char_costume
    )
  ) +
  geom_stream(
    geom = ""contour"",
    color = ""white"",
    size = 1.25,
    bw = .45 # Controls smoothness
  ) +
  geom_stream(
    geom = ""polygon"",
    bw = .45,
    size = 0
  ) +
  scale_color_manual(
    expand = c(0, 0),
    values = pal,
    guide = ""none""
  ) +
  scale_fill_manual(
    values = pal,
    name = NULL
  ) +
  facet_grid( ## needs facet_grid for space argument
    parameter ~ ., 
    scales = ""free_y"", 
    space = ""free""
  )

g","<-,+,%>%,ggplot,aes,geom_stream,scale_color_manual,c,scale_fill_manual,facet_grid,~","geom_stream,facet_grid"
web-streamchart-with-ggstream,unnamed-chunk-10-1,images/web-streamchart-with-ggstream/unnamed-chunk-10-1.png,"g <- g + 
  geom_vline(
    data = tibble(x = c(97, seq(125, 250, by = 25), 280)),
    aes(xintercept = x),
    inherit.aes = FALSE, 
    color = ""grey88"", 
    size = .5,
    linetype = ""dotted""
  ) +
  annotate(
    ""rect"",
    xmin = -Inf, xmax = 78, 
    ymin = -Inf, ymax = Inf,
    fill = ""grey88""
  ) +
  annotate(
    ""rect"",
    xmin = 299, xmax = Inf, 
    ymin = -Inf, ymax = Inf,
    fill = ""grey88""
  ) +
  # Appearence type label on each panel
  geom_text(
    data = labels,
    aes(issue, value, label = label),
    family = ""Reem Kufi"",
    inherit.aes = FALSE,
    size = 4.7,
    color = ""grey25"",
    fontface = ""bold"",
    lineheight = .85,
    hjust = 0
  ) +
  # Add informative text
  # geom_textbox comes with the great ggtext library.
  geom_textbox(
    data = texts,
    aes(
      issue, value, 
      label = text,
      color = char_costume,
      color = after_scale(darken(color, .12, space = ""HLS"")),
      vjust = vjust
    ),
    family = ""Reem Kufi"",
    size = 2.7,
    fill = ""grey95"",
    maxwidth = unit(7.25, ""lines""),
    hjust = .5
  ) + 
  # Customize labels of the horizontal axis
  scale_x_continuous(
    limits = c(74, NA),
    breaks = c(94, seq(125, 250, by = 25), 280),
    labels = glue::glue(""Issue\n#{c(97, seq(125, 250, by = 25), 280)}""),
    position = ""top""
  ) + 
  scale_y_continuous(expand = c(.03, .03)) + 
  # This clip=""off"" is very important. It allows to have annotations anywhere
  # in the plot, no matter they are not within the extent of 
  # the corresponding panel.
  coord_cartesian(clip = ""off"")
  
g","<-,+,geom_vline,tibble,c,seq,aes,annotate,-,geom_text,geom_textbox,after_scale,darken,unit,scale_x_continuous,glue,scale_y_continuous,coord_cartesian","geom_vline,geom_text,geom_textbox"
web-streamchart-with-ggstream,unnamed-chunk-11-1,images/web-streamchart-with-ggstream/unnamed-chunk-11-1.png,"g <- g +
  labs(
    title = ""Appearance of the Five Most Popular X-Men Characters in Chris Claremont's                           Comics"",
    caption = ""Visualization by Cédric Scherer  •  Data by Claremont Run Project via Malcom Barret  •  Popularity Scores by ranker.com  •  Logo by Comicraft""
  ) 

g <- ggdraw(g) + 
  # It works with only the path to the file! :)
  draw_image(
    ""img/fromTheWeb/uncannyxmen.png"", 
    x = .84, y = .955, 
    width = .1, 
    hjust = .5, 
    vjust = .5
  )
g","<-,+,labs,ggdraw,draw_image","ggdraw,draw_image"
web-time-series-and-facetting,unnamed-chunk-5-1,images/web-time-series-and-facetting/unnamed-chunk-5-1.png,"# Let's say we select the borough named ""Enfield"" 
df <- rescues_borough %>%
  filter(name == ""Enfield"")

ggplot(df, aes(x = cal_year)) +
  # One line for Cat rescues
  geom_line(aes(y = Cat, color = ""cats"")) +
  # Another line for Not_Cat rescues
  geom_line(aes(y = Not_Cat, color = ""other"")) +
  # stat_difference() from ggh4x package applies the conditional fill
  # based on which of Not_Cat and Cat is larger.
  stat_difference(aes(ymin = Not_Cat, ymax = Cat), alpha = 0.3)","<-,%>%,filter,==,+,ggplot,aes,geom_line,stat_difference","geom_line,stat_difference"
web-time-series-and-facetting,unnamed-chunk-6-1,images/web-time-series-and-facetting/unnamed-chunk-6-1.png,"plt <- ggplot(rescues_borough, aes(x = cal_year)) +
  geom_line(aes(y = Cat, color = ""cats"")) +
  geom_line(aes(y = Not_Cat, color = ""other"")) +
  stat_difference(aes(ymin = Not_Cat, ymax = Cat), alpha = 0.3) +
  # vars(name): Use the values in the name variable to create the subpanels
  # grid = ""gb_london_boroughs_grid"": use the London boroughs grid that comes
  # with the geofacet package
  facet_geo(vars(name), grid = ""gb_london_boroughs_grid"")

plt ","<-,+,ggplot,aes,geom_line,stat_difference,facet_geo,vars","geom_line,stat_difference,facet_geo"
web-time-series-and-facetting,unnamed-chunk-7-1,images/web-time-series-and-facetting/unnamed-chunk-7-1.png,"plt <- plt + 
  # Colors for the lines
  scale_color_manual(values = c(""#3D85F7"", ""#C32E5A"")) +
  # Colors for the fill. They are lighter versions of the line colors.
  # The third one is required because lines are sometimes equal
  scale_fill_manual(
    values = c(
      colorspace::lighten(""#3D85F7""), 
      colorspace::lighten(""#C32E5A""), 
      ""grey60""
    ),
    labels = c(""more cats"", ""more other"", ""same"")
  ) +
  # Set breaks along both axes
  scale_x_continuous(breaks = seq(2010, 2020, 5)) +
  scale_y_continuous(breaks = seq(0, 20, 10)) +
  # Add labels
  labs(
    title = ""Rescues of\ncats vs other animals by\nthe London fire brigade\n2009-2020"",
    caption = ""Source: London.gov · Graphic: Georgios Karamanis""
  ) +
  # Specify the order for the guides
  guides(
    # Order indicates the order of each legend among multiple guides.
    # The guide for 'color' will be placed before the onde for 'fill'
    color = guide_legend(order = 1), 
    fill = guide_legend(order = 2)
  ) 

plt","<-,+,scale_color_manual,c,scale_fill_manual,lighten,scale_x_continuous,seq,scale_y_continuous,labs,guides,guide_legend",
web-time-series-and-facetting,unnamed-chunk-8-1,images/web-time-series-and-facetting/unnamed-chunk-8-1.png,"plt <- plt + 
  # A minimalistic theme with no background annotations
  theme_minimal(base_family = ""Fira Sans Compressed"") +
  theme(
    # Top-right position
    legend.pos = c(0.875, 0.975),
    # Elements within a guide are placed one next to the other in the same row
    legend.direction = ""horizontal"",
    # Different guides are stacked vertically
    legend.box = ""vertical"",
    # No legend title
    legend.title = element_blank(),
    # Light background color
    plot.background = element_rect(fill = ""#F5F4EF"", color = NA),
    plot.margin = margin(20, 30, 20, 30),
    # Customize the title. Note the new font family and its larger size.
    plot.title = element_text(
      margin = margin(0, 0, -100, 0), 
      size = 26, 
      family = ""KyivType Sans"", 
      face = ""bold"", 
      vjust = 0, 
      color = ""grey25""
    ),
    plot.caption = element_text(size = 11),
    # Remove titles for x and y axes.
    axis.title = element_blank(),
    # Specify color for the tick labels along both axes 
    axis.text = element_text(color = ""grey40""),
    # Specify face and color for the text on top of each panel/facet
    strip.text = element_text(face = ""bold"", color = ""grey20"")
  )

plt ","<-,+,theme_minimal,theme,c,element_blank,element_rect,margin,element_text,-",
